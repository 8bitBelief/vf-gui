var vfgui =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/vf-gui.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@pixi/constants/lib/constants.es.js":
/*!**********************************************************!*\
  !*** ./node_modules/@pixi/constants/lib/constants.es.js ***!
  \**********************************************************/
/*! exports provided: BLEND_MODES, DRAW_MODES, ENV, FORMATS, GC_MODES, MIPMAP_MODES, PRECISION, RENDERER_TYPE, SCALE_MODES, TARGETS, TYPES, WRAP_MODES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLEND_MODES", function() { return BLEND_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAW_MODES", function() { return DRAW_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENV", function() { return ENV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FORMATS", function() { return FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GC_MODES", function() { return GC_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIPMAP_MODES", function() { return MIPMAP_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRECISION", function() { return PRECISION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RENDERER_TYPE", function() { return RENDERER_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCALE_MODES", function() { return SCALE_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TARGETS", function() { return TARGETS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPES", function() { return TYPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WRAP_MODES", function() { return WRAP_MODES; });
/*!
 * @pixi/constants - v5.1.0
 * Compiled Fri, 19 Jul 2019 21:54:36 UTC
 *
 * @pixi/constants is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/**
 * Different types of environments for WebGL.
 *
 * @static
 * @memberof PIXI
 * @name ENV
 * @enum {number}
 * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility
 *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.
 * @property {number} WEBGL - Version 1 of WebGL
 * @property {number} WEBGL2 - Version 2 of WebGL
 */
var ENV = {
    WEBGL_LEGACY: 0,
    WEBGL: 1,
    WEBGL2: 2,
};

/**
 * Constant to identify the Renderer Type.
 *
 * @static
 * @memberof PIXI
 * @name RENDERER_TYPE
 * @enum {number}
 * @property {number} UNKNOWN - Unknown render type.
 * @property {number} WEBGL - WebGL render type.
 * @property {number} CANVAS - Canvas render type.
 */
var RENDERER_TYPE = {
    UNKNOWN:    0,
    WEBGL:      1,
    CANVAS:     2,
};

/**
 * Various blend modes supported by PIXI.
 *
 * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.
 * Anything else will silently act like NORMAL.
 *
 * @memberof PIXI
 * @name BLEND_MODES
 * @enum {number}
 * @property {number} NORMAL
 * @property {number} ADD
 * @property {number} MULTIPLY
 * @property {number} SCREEN
 * @property {number} OVERLAY
 * @property {number} DARKEN
 * @property {number} LIGHTEN
 * @property {number} COLOR_DODGE
 * @property {number} COLOR_BURN
 * @property {number} HARD_LIGHT
 * @property {number} SOFT_LIGHT
 * @property {number} DIFFERENCE
 * @property {number} EXCLUSION
 * @property {number} HUE
 * @property {number} SATURATION
 * @property {number} COLOR
 * @property {number} LUMINOSITY
 * @property {number} NORMAL_NPM
 * @property {number} ADD_NPM
 * @property {number} SCREEN_NPM
 * @property {number} NONE
 * @property {number} SRC_IN
 * @property {number} SRC_OUT
 * @property {number} SRC_ATOP
 * @property {number} DST_OVER
 * @property {number} DST_IN
 * @property {number} DST_OUT
 * @property {number} DST_ATOP
 * @property {number} SUBTRACT
 * @property {number} SRC_OVER
 * @property {number} ERASE
 */
var BLEND_MODES = {
    NORMAL:         0,
    ADD:            1,
    MULTIPLY:       2,
    SCREEN:         3,
    OVERLAY:        4,
    DARKEN:         5,
    LIGHTEN:        6,
    COLOR_DODGE:    7,
    COLOR_BURN:     8,
    HARD_LIGHT:     9,
    SOFT_LIGHT:     10,
    DIFFERENCE:     11,
    EXCLUSION:      12,
    HUE:            13,
    SATURATION:     14,
    COLOR:          15,
    LUMINOSITY:     16,
    NORMAL_NPM:     17,
    ADD_NPM:        18,
    SCREEN_NPM:     19,
    NONE:           20,

    SRC_OVER:       0,
    SRC_IN:         21,
    SRC_OUT:        22,
    SRC_ATOP:       23,
    DST_OVER:       24,
    DST_IN:         25,
    DST_OUT:        26,
    DST_ATOP:       27,
    ERASE:          26,
    SUBTRACT:       28,
};

/**
 * Various webgl draw modes. These can be used to specify which GL drawMode to use
 * under certain situations and renderers.
 *
 * @memberof PIXI
 * @static
 * @name DRAW_MODES
 * @enum {number}
 * @property {number} POINTS
 * @property {number} LINES
 * @property {number} LINE_LOOP
 * @property {number} LINE_STRIP
 * @property {number} TRIANGLES
 * @property {number} TRIANGLE_STRIP
 * @property {number} TRIANGLE_FAN
 */
var DRAW_MODES = {
    POINTS:         0,
    LINES:          1,
    LINE_LOOP:      2,
    LINE_STRIP:     3,
    TRIANGLES:      4,
    TRIANGLE_STRIP: 5,
    TRIANGLE_FAN:   6,
};

/**
 * Various GL texture/resources formats.
 *
 * @memberof PIXI
 * @static
 * @name FORMATS
 * @enum {number}
 * @property {number} RGBA=6408
 * @property {number} RGB=6407
 * @property {number} ALPHA=6406
 * @property {number} LUMINANCE=6409
 * @property {number} LUMINANCE_ALPHA=6410
 * @property {number} DEPTH_COMPONENT=6402
 * @property {number} DEPTH_STENCIL=34041
 */
var FORMATS = {
    RGBA:             6408,
    RGB:              6407,
    ALPHA:            6406,
    LUMINANCE:        6409,
    LUMINANCE_ALPHA:  6410,
    DEPTH_COMPONENT:  6402,
    DEPTH_STENCIL:    34041,
};

/**
 * Various GL target types.
 *
 * @memberof PIXI
 * @static
 * @name TARGETS
 * @enum {number}
 * @property {number} TEXTURE_2D=3553
 * @property {number} TEXTURE_CUBE_MAP=34067
 * @property {number} TEXTURE_2D_ARRAY=35866
 * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069
 * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070
 * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071
 * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072
 * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073
 * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074
 */
var TARGETS = {
    TEXTURE_2D: 3553,
    TEXTURE_CUBE_MAP: 34067,
    TEXTURE_2D_ARRAY: 35866,
    TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
    TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
    TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
    TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
    TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
    TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
};

/**
 * Various GL data format types.
 *
 * @memberof PIXI
 * @static
 * @name TYPES
 * @enum {number}
 * @property {number} UNSIGNED_BYTE=5121
 * @property {number} UNSIGNED_SHORT=5123
 * @property {number} UNSIGNED_SHORT_5_6_5=33635
 * @property {number} UNSIGNED_SHORT_4_4_4_4=32819
 * @property {number} UNSIGNED_SHORT_5_5_5_1=32820
 * @property {number} FLOAT=5126
 * @property {number} HALF_FLOAT=36193
 */
var TYPES = {
    UNSIGNED_BYTE: 5121,
    UNSIGNED_SHORT: 5123,
    UNSIGNED_SHORT_5_6_5: 33635,
    UNSIGNED_SHORT_4_4_4_4: 32819,
    UNSIGNED_SHORT_5_5_5_1: 32820,
    FLOAT: 5126,
    HALF_FLOAT: 36193,
};

/**
 * The scale modes that are supported by pixi.
 *
 * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.
 * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.
 *
 * @memberof PIXI
 * @static
 * @name SCALE_MODES
 * @enum {number}
 * @property {number} LINEAR Smooth scaling
 * @property {number} NEAREST Pixelating scaling
 */
var SCALE_MODES = {
    LINEAR:     1,
    NEAREST:    0,
};

/**
 * The wrap modes that are supported by pixi.
 *
 * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.
 * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.
 * If the texture is non power of two then clamp will be used regardless as WebGL can
 * only use REPEAT if the texture is po2.
 *
 * This property only affects WebGL.
 *
 * @name WRAP_MODES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} CLAMP - The textures uvs are clamped
 * @property {number} REPEAT - The texture uvs tile and repeat
 * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring
 */
var WRAP_MODES = {
    CLAMP:           33071,
    REPEAT:          10497,
    MIRRORED_REPEAT: 33648,
};

/**
 * Mipmap filtering modes that are supported by pixi.
 *
 * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.
 * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,
 * or its `POW2` and texture dimensions are powers of 2.
 * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.
 *
 * This property only affects WebGL.
 *
 * @name MIPMAP_MODES
 * @memberof PIXI
 * @static
 * @enum {number}
 * @property {number} OFF - No mipmaps
 * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2
 * @property {number} ON - Always generate mipmaps
 */
var MIPMAP_MODES = {
    OFF: 0,
    POW2: 1,
    ON: 2,
};

/**
 * The gc modes that are supported by pixi.
 *
 * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO
 * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not
 * used for a specified period of time they will be removed from the GPU. They will of course
 * be uploaded again when they are required. This is a silent behind the scenes process that
 * should ensure that the GPU does not  get filled up.
 *
 * Handy for mobile devices!
 * This property only affects WebGL.
 *
 * @name GC_MODES
 * @enum {number}
 * @static
 * @memberof PIXI
 * @property {number} AUTO - Garbage collection will happen periodically automatically
 * @property {number} MANUAL - Garbage collection will need to be called manually
 */
var GC_MODES = {
    AUTO:           0,
    MANUAL:         1,
};

/**
 * Constants that specify float precision in shaders.
 *
 * @name PRECISION
 * @memberof PIXI
 * @static
 * @enum {string}
 * @constant
 * @property {string} LOW='lowp'
 * @property {string} MEDIUM='mediump'
 * @property {string} HIGH='highp'
 */
var PRECISION = {
    LOW: 'lowp',
    MEDIUM: 'mediump',
    HIGH: 'highp',
};


//# sourceMappingURL=constants.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/core/lib/core.es.js":
/*!************************************************!*\
  !*** ./node_modules/@pixi/core/lib/core.es.js ***!
  \************************************************/
/*! exports provided: AbstractBatchRenderer, AbstractRenderer, Attribute, BaseRenderTexture, BaseTexture, BatchDrawCall, BatchGeometry, BatchPluginFactory, BatchRenderer, BatchShaderGenerator, Buffer, CubeTexture, Filter, Framebuffer, GLProgram, GLTexture, Geometry, ObjectRenderer, Program, Quad, QuadUv, RenderTexture, RenderTexturePool, Renderer, Shader, SpriteMaskFilter, State, System, Texture, TextureMatrix, TextureUvs, UniformGroup, ViewableBuffer, autoDetectRenderer, checkMaxIfStatementsInShader, defaultFilterVertex, defaultVertex, resources, systems */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractBatchRenderer", function() { return AbstractBatchRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractRenderer", function() { return AbstractRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attribute", function() { return Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseRenderTexture", function() { return BaseRenderTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTexture", function() { return BaseTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchDrawCall", function() { return BatchDrawCall; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchGeometry", function() { return BatchGeometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchPluginFactory", function() { return BatchPluginFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchRenderer", function() { return BatchRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchShaderGenerator", function() { return BatchShaderGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Buffer", function() { return Buffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeTexture", function() { return CubeTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filter", function() { return Filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Framebuffer", function() { return Framebuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GLProgram", function() { return GLProgram; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GLTexture", function() { return BaseTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return Geometry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectRenderer", function() { return ObjectRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Program", function() { return Program; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quad", function() { return Quad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuadUv", function() { return QuadUv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderTexture", function() { return RenderTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderTexturePool", function() { return RenderTexturePool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return Renderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Shader", function() { return Shader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteMaskFilter", function() { return SpriteMaskFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "State", function() { return State; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "System", function() { return System; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Texture", function() { return Texture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureMatrix", function() { return TextureMatrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureUvs", function() { return TextureUvs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniformGroup", function() { return UniformGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewableBuffer", function() { return ViewableBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autoDetectRenderer", function() { return autoDetectRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkMaxIfStatementsInShader", function() { return checkMaxIfStatementsInShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultFilterVertex", function() { return defaultFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultVertex", function() { return _default; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "systems", function() { return systems; });
/* harmony import */ var _pixi_runner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/runner */ "./node_modules/@pixi/runner/lib/runner.es.js");
/* harmony import */ var _pixi_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pixi/utils */ "./node_modules/@pixi/utils/lib/utils.es.js");
/* harmony import */ var _pixi_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pixi/settings */ "./node_modules/@pixi/settings/lib/settings.es.js");
/* harmony import */ var _pixi_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pixi/constants */ "./node_modules/@pixi/constants/lib/constants.es.js");
/* harmony import */ var _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pixi/ticker */ "./node_modules/@pixi/ticker/lib/ticker.es.js");
/* harmony import */ var _pixi_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pixi/math */ "./node_modules/@pixi/math/lib/math.es.js");
/* harmony import */ var _pixi_display__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pixi/display */ "./node_modules/@pixi/display/lib/display.es.js");
/*!
 * @pixi/core - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/core is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */








/**
 * Base resource class for textures that manages validation and uploading, depending on its type.
 *
 * Uploading of a base texture to the GPU is required.
 *
 * @class
 * @memberof PIXI.resources
 */
var Resource = function Resource(width, height)
{
    if ( width === void 0 ) width = 0;
    if ( height === void 0 ) height = 0;

    /**
     * Internal width of the resource
     * @member {number}
     * @protected
     */
    this._width = width;

    /**
     * Internal height of the resource
     * @member {number}
     * @protected
     */
    this._height = height;

    /**
     * If resource has been destroyed
     * @member {boolean}
     * @readonly
     * @default false
     */
    this.destroyed = false;

    /**
     * `true` if resource is created by BaseTexture
     * useful for doing cleanup with BaseTexture destroy
     * and not cleaning up resources that were created
     * externally.
     * @member {boolean}
     * @protected
     */
    this.internal = false;

    /**
     * Mini-runner for handling resize events
     *
     * @member {Runner}
     * @private
     */
    this.onResize = new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('setRealSize', 2);

    /**
     * Mini-runner for handling update events
     *
     * @member {Runner}
     * @private
     */
    this.onUpdate = new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('update');

    /**
     * Handle internal errors, such as loading errors
     *
     * @member {Runner}
     * @private
     */
    this.onError = new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('onError', 1);
};

var prototypeAccessors = { valid: { configurable: true },width: { configurable: true },height: { configurable: true } };

/**
 * Bind to a parent BaseTexture
 *
 * @param {PIXI.BaseTexture} baseTexture - Parent texture
 */
Resource.prototype.bind = function bind (baseTexture)
{
    this.onResize.add(baseTexture);
    this.onUpdate.add(baseTexture);
    this.onError.add(baseTexture);

    // Call a resize immediate if we already
    // have the width and height of the resource
    if (this._width || this._height)
    {
        this.onResize.run(this._width, this._height);
    }
};

/**
 * Unbind to a parent BaseTexture
 *
 * @param {PIXI.BaseTexture} baseTexture - Parent texture
 */
Resource.prototype.unbind = function unbind (baseTexture)
{
    this.onResize.remove(baseTexture);
    this.onUpdate.remove(baseTexture);
    this.onError.remove(baseTexture);
};

/**
 * Trigger a resize event
 * @param {number} width X dimension
 * @param {number} height Y dimension
 */
Resource.prototype.resize = function resize (width, height)
{
    if (width !== this._width || height !== this._height)
    {
        this._width = width;
        this._height = height;
        this.onResize.run(width, height);
    }
};

/**
 * Has been validated
 * @readonly
 * @member {boolean}
 */
prototypeAccessors.valid.get = function ()
{
    return !!this._width && !!this._height;
};

/**
 * Has been updated trigger event
 */
Resource.prototype.update = function update ()
{
    if (!this.destroyed)
    {
        this.onUpdate.run();
    }
};

/**
 * This can be overridden to start preloading a resource
 * or do any other prepare step.
 * @protected
 * @return {Promise<void>} Handle the validate event
 */
Resource.prototype.load = function load ()
{
    return Promise.resolve();
};

/**
 * The width of the resource.
 *
 * @member {number}
 * @readonly
 */
prototypeAccessors.width.get = function ()
{
    return this._width;
};

/**
 * The height of the resource.
 *
 * @member {number}
 * @readonly
 */
prototypeAccessors.height.get = function ()
{
    return this._height;
};

/**
 * Uploads the texture or returns false if it cant for some reason. Override this.
 *
 * @param {PIXI.Renderer} renderer - yeah, renderer!
 * @param {PIXI.BaseTexture} baseTexture - the texture
 * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
 * @returns {boolean} true is success
 */
Resource.prototype.upload = function upload (renderer, baseTexture, glTexture) // eslint-disable-line no-unused-vars
{
    return false;
};

/**
 * Set the style, optional to override
 *
 * @param {PIXI.Renderer} renderer - yeah, renderer!
 * @param {PIXI.BaseTexture} baseTexture - the texture
 * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context
 * @returns {boolean} `true` is success
 */
Resource.prototype.style = function style (renderer, baseTexture, glTexture) // eslint-disable-line no-unused-vars
{
    return false;
};

/**
 * Clean up anything, this happens when destroying is ready.
 *
 * @protected
 */
Resource.prototype.dispose = function dispose ()
{
    // override
};

/**
 * Call when destroying resource, unbind any BaseTexture object
 * before calling this method, as reference counts are maintained
 * internally.
 */
Resource.prototype.destroy = function destroy ()
{
    if (!this.destroyed)
    {
        this.destroyed = true;
        this.dispose();
        this.onError.removeAll();
        this.onError = null;
        this.onResize.removeAll();
        this.onResize = null;
        this.onUpdate.removeAll();
        this.onUpdate = null;
    }
};

Object.defineProperties( Resource.prototype, prototypeAccessors );

/**
 * Base for all the image/canvas resources
 * @class
 * @extends PIXI.resources.Resource
 * @memberof PIXI.resources
 */
var BaseImageResource = /*@__PURE__*/(function (Resource) {
    function BaseImageResource(source)
    {
        var width = source.naturalWidth || source.videoWidth || source.width;
        var height = source.naturalHeight || source.videoHeight || source.height;

        Resource.call(this, width, height);

        /**
         * The source element
         * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement}
         * @readonly
         */
        this.source = source;
    }

    if ( Resource ) BaseImageResource.__proto__ = Resource;
    BaseImageResource.prototype = Object.create( Resource && Resource.prototype );
    BaseImageResource.prototype.constructor = BaseImageResource;

    /**
     * Set cross origin based detecting the url and the crossorigin
     * @protected
     * @param {HTMLElement} element - Element to apply crossOrigin
     * @param {string} url - URL to check
     * @param {boolean|string} [crossorigin=true] - Cross origin value to use
     */
    BaseImageResource.crossOrigin = function crossOrigin (element, url, crossorigin)
    {
        if (crossorigin === undefined && url.indexOf('data:') !== 0)
        {
            element.crossOrigin = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["determineCrossOrigin"])(url);
        }
        else if (crossorigin !== false)
        {
            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';
        }
    };

    /**
     * Upload the texture to the GPU.
     * @param {PIXI.Renderer} renderer Upload to the renderer
     * @param {PIXI.BaseTexture} baseTexture Reference to parent texture
     * @param {PIXI.GLTexture} glTexture
     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)
     * @returns {boolean} true is success
     */
    BaseImageResource.prototype.upload = function upload (renderer, baseTexture, glTexture, source)
    {
        var gl = renderer.gl;
        var width = baseTexture.realWidth;
        var height = baseTexture.realHeight;

        source = source || this.source;

        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.premultiplyAlpha);

        if (baseTexture.target === gl.TEXTURE_2D && glTexture.width === width && glTexture.height === height)
        {
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, baseTexture.type, source);
        }
        else
        {
            glTexture.width = width;
            glTexture.height = height;

            gl.texImage2D(baseTexture.target, 0, baseTexture.format, baseTexture.format, baseTexture.type, source);
        }

        return true;
    };

    /**
     * Checks if source width/height was changed, resize can cause extra baseTexture update.
     * Triggers one update in any case.
     */
    BaseImageResource.prototype.update = function update ()
    {
        if (this.destroyed)
        {
            return;
        }

        var width = this.source.naturalWidth || this.source.videoWidth || this.source.width;
        var height = this.source.naturalHeight || this.source.videoHeight || this.source.height;

        this.resize(width, height);

        Resource.prototype.update.call(this);
    };

    /**
     * Destroy this BaseImageResource
     * @override
     * @param {PIXI.BaseTexture} [fromTexture] Optional base texture
     * @return {boolean} Destroy was successful
     */
    BaseImageResource.prototype.dispose = function dispose ()
    {
        this.source = null;
    };

    return BaseImageResource;
}(Resource));

/**
 * Resource type for HTMLImageElement.
 * @class
 * @extends PIXI.resources.BaseImageResource
 * @memberof PIXI.resources
 */
var ImageResource = /*@__PURE__*/(function (BaseImageResource) {
    function ImageResource(source, options)
    {
        options = options || {};

        if (!(source instanceof HTMLImageElement))
        {
            var imageElement = new Image();

            BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);

            imageElement.src = source;
            source = imageElement;
        }

        BaseImageResource.call(this, source);

        // FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height
        // to non-zero values before its loading completes if images are in a cache.
        // Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.
        // Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).
        if (!source.complete && !!this._width && !!this._height)
        {
            this._width = 0;
            this._height = 0;
        }

        /**
         * URL of the image source
         * @member {string}
         */
        this.url = source.src;

        /**
         * When process is completed
         * @member {Promise<void>}
         * @private
         */
        this._process = null;

        /**
         * If the image should be disposed after upload
         * @member {boolean}
         * @default false
         */
        this.preserveBitmap = false;

        /**
         * If capable, convert the image using createImageBitmap API
         * @member {boolean}
         * @default PIXI.settings.CREATE_IMAGE_BITMAP
         */
        this.createBitmap = (options.createBitmap !== undefined
            ? options.createBitmap : _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].CREATE_IMAGE_BITMAP) && !!window.createImageBitmap;

        /**
         * Controls texture premultiplyAlpha field
         * Copies from options
         * @member {boolean|null}
         * @readonly
         */
        this.premultiplyAlpha = options.premultiplyAlpha !== false;

        /**
         * The ImageBitmap element created for HTMLImageElement
         * @member {ImageBitmap}
         * @default null
         */
        this.bitmap = null;

        /**
         * Promise when loading
         * @member {Promise<void>}
         * @private
         * @default null
         */
        this._load = null;

        if (options.autoLoad !== false)
        {
            this.load();
        }
    }

    if ( BaseImageResource ) ImageResource.__proto__ = BaseImageResource;
    ImageResource.prototype = Object.create( BaseImageResource && BaseImageResource.prototype );
    ImageResource.prototype.constructor = ImageResource;

    /**
     * returns a promise when image will be loaded and processed
     *
     * @param {boolean} [createBitmap=true] whether process image into bitmap
     * @returns {Promise<void>}
     */
    ImageResource.prototype.load = function load (createBitmap)
    {
        var this$1 = this;

        if (createBitmap !== undefined)
        {
            this.createBitmap = createBitmap;
        }

        if (this._load)
        {
            return this._load;
        }

        this._load = new Promise(function (resolve) {
            this$1.url = this$1.source.src;
            var ref = this$1;
            var source = ref.source;

            var completed = function () {
                if (this$1.destroyed)
                {
                    return;
                }
                source.onload = null;
                source.onerror = null;

                this$1.resize(source.width, source.height);
                this$1._load = null;

                if (this$1.createBitmap)
                {
                    resolve(this$1.process());
                }
                else
                {
                    resolve(this$1);
                }
            };

            if (source.complete && source.src)
            {
                completed();
            }
            else
            {
                source.onload = completed;
                source.onerror = function (event) { return this$1.onError.run(event); };
            }
        });

        return this._load;
    };

    /**
     * Called when we need to convert image into BitmapImage.
     * Can be called multiple times, real promise is cached inside.
     *
     * @returns {Promise<void>} cached promise to fill that bitmap
     */
    ImageResource.prototype.process = function process ()
    {
        var this$1 = this;

        if (this._process !== null)
        {
            return this._process;
        }
        if (this.bitmap !== null || !window.createImageBitmap)
        {
            return Promise.resolve(this);
        }

        this._process = window.createImageBitmap(this.source,
            0, 0, this.source.width, this.source.height,
            {
                premultiplyAlpha: this.premultiplyAlpha ? 'premultiply' : 'none',
            })
            .then(function (bitmap) {
                if (this$1.destroyed)
                {
                    return Promise.reject();
                }
                this$1.bitmap = bitmap;
                this$1.update();
                this$1._process = null;

                return Promise.resolve(this$1);
            });

        return this._process;
    };

    /**
     * Upload the image resource to GPU.
     *
     * @param {PIXI.Renderer} renderer - Renderer to upload to
     * @param {PIXI.BaseTexture} baseTexture - BaseTexture for this resource
     * @param {PIXI.GLTexture} glTexture - GLTexture to use
     * @returns {boolean} true is success
     */
    ImageResource.prototype.upload = function upload (renderer, baseTexture, glTexture)
    {
        baseTexture.premultiplyAlpha = this.premultiplyAlpha;

        if (!this.createBitmap)
        {
            return BaseImageResource.prototype.upload.call(this, renderer, baseTexture, glTexture);
        }
        if (!this.bitmap)
        {
            // yeah, ignore the output
            this.process();
            if (!this.bitmap)
            {
                return false;
            }
        }

        BaseImageResource.prototype.upload.call(this, renderer, baseTexture, glTexture, this.bitmap);

        if (!this.preserveBitmap)
        {
            // checks if there are other renderers that possibly need this bitmap

            var flag = true;

            for (var key in baseTexture._glTextures)
            {
                var otherTex = baseTexture._glTextures[key];

                if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId)
                {
                    flag = false;
                    break;
                }
            }

            if (flag)
            {
                if (this.bitmap.close)
                {
                    this.bitmap.close();
                }

                this.bitmap = null;
            }
        }

        return true;
    };

    /**
     * Destroys this texture
     * @override
     */
    ImageResource.prototype.dispose = function dispose ()
    {
        this.source.onload = null;
        this.source.onerror = null;

        BaseImageResource.prototype.dispose.call(this);

        if (this.bitmap)
        {
            this.bitmap.close();
            this.bitmap = null;
        }
        this._process = null;
        this._load = null;
    };

    return ImageResource;
}(BaseImageResource));

/**
 * Collection of installed resource types, class must extend {@link PIXI.resources.Resource}.
 * @example
 * class CustomResource extends PIXI.resources.Resource {
 *   // MUST have source, options constructor signature
 *   // for auto-detected resources to be created.
 *   constructor(source, options) {
 *     super();
 *   }
 *   upload(renderer, baseTexture, glTexture) {
 *     // upload with GL
 *     return true;
 *   }
 *   // used to auto-detect resource
 *   static test(source, extension) {
 *     return extension === 'xyz'|| source instanceof SomeClass;
 *   }
 * }
 * // Install the new resource type
 * PIXI.resources.INSTALLED.push(CustomResource);
 *
 * @name PIXI.resources.INSTALLED
 * @type {Array<*>}
 * @static
 * @readonly
 */
var INSTALLED = [];

/**
 * Create a resource element from a single source element. This
 * auto-detects which type of resource to create. All resources that
 * are auto-detectable must have a static `test` method and a constructor
 * with the arguments `(source, options?)`. Currently, the supported
 * resources for auto-detection include:
 *  - {@link PIXI.resources.ImageResource}
 *  - {@link PIXI.resources.CanvasResource}
 *  - {@link PIXI.resources.VideoResource}
 *  - {@link PIXI.resources.SVGResource}
 *  - {@link PIXI.resources.BufferResource}
 * @static
 * @function PIXI.resources.autoDetectResource
 * @param {string|*} source - Resource source, this can be the URL to the resource,
 *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri
 *        or any other resource that can be auto-detected. If not resource is
 *        detected, it's assumed to be an ImageResource.
 * @param {object} [options] - Pass-through options to use for Resource
 * @param {number} [options.width] - Width of BufferResource or SVG rasterization
 * @param {number} [options.height] - Height of BufferResource or SVG rasterization
 * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading
 * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height
 * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object
 * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin
 * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately
 * @param {number} [options.updateFPS=0] - Video option to update how many times a second the
 *        texture should be updated from the video. Leave at 0 to update at every render
 * @return {PIXI.resources.Resource} The created resource.
 */
function autoDetectResource(source, options)
{
    if (!source)
    {
        return null;
    }

    var extension = '';

    if (typeof source === 'string')
    {
        // search for file extension: period, 3-4 chars, then ?, # or EOL
        var result = (/\.(\w{3,4})(?:$|\?|#)/i).exec(source);

        if (result)
        {
            extension = result[1].toLowerCase();
        }
    }

    for (var i = INSTALLED.length - 1; i >= 0; --i)
    {
        var ResourcePlugin = INSTALLED[i];

        if (ResourcePlugin.test && ResourcePlugin.test(source, extension))
        {
            return new ResourcePlugin(source, options);
        }
    }

    // When in doubt: probably an image
    // might be appropriate to throw an error or return null
    return new ImageResource(source, options);
}

/**
 * @interface SharedArrayBuffer
 */

/**
 * Buffer resource with data of typed array.
 * @class
 * @extends PIXI.resources.Resource
 * @memberof PIXI.resources
 */
var BufferResource = /*@__PURE__*/(function (Resource) {
    function BufferResource(source, options)
    {
        var ref = options || {};
        var width = ref.width;
        var height = ref.height;

        if (!width || !height)
        {
            throw new Error('BufferResource width or height invalid');
        }

        Resource.call(this, width, height);

        /**
         * Source array
         * Cannot be ClampedUint8Array because it cant be uploaded to WebGL
         *
         * @member {Float32Array|Uint8Array|Uint32Array}
         */
        this.data = source;
    }

    if ( Resource ) BufferResource.__proto__ = Resource;
    BufferResource.prototype = Object.create( Resource && Resource.prototype );
    BufferResource.prototype.constructor = BufferResource;

    /**
     * Upload the texture to the GPU.
     * @param {PIXI.Renderer} renderer Upload to the renderer
     * @param {PIXI.BaseTexture} baseTexture Reference to parent texture
     * @param {PIXI.GLTexture} glTexture glTexture
     * @returns {boolean} true is success
     */
    BufferResource.prototype.upload = function upload (renderer, baseTexture, glTexture)
    {
        var gl = renderer.gl;

        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.premultiplyAlpha);

        if (glTexture.width === baseTexture.width && glTexture.height === baseTexture.height)
        {
            gl.texSubImage2D(
                baseTexture.target,
                0,
                0,
                0,
                baseTexture.width,
                baseTexture.height,
                baseTexture.format,
                baseTexture.type,
                this.data
            );
        }
        else
        {
            glTexture.width = baseTexture.width;
            glTexture.height = baseTexture.height;

            gl.texImage2D(
                baseTexture.target,
                0,
                glTexture.internalFormat,
                baseTexture.width,
                baseTexture.height,
                0,
                baseTexture.format,
                glTexture.type,
                this.data
            );
        }

        return true;
    };

    /**
     * Destroy and don't use after this
     * @override
     */
    BufferResource.prototype.dispose = function dispose ()
    {
        this.data = null;
    };

    /**
     * Used to auto-detect the type of resource.
     *
     * @static
     * @param {*} source - The source object
     * @return {boolean} `true` if <canvas>
     */
    BufferResource.test = function test (source)
    {
        return source instanceof Float32Array
            || source instanceof Uint8Array
            || source instanceof Uint32Array;
    };

    return BufferResource;
}(Resource));

var defaultBufferOptions = {
    scaleMode: _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["SCALE_MODES"].NEAREST,
    format: _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["FORMATS"].RGBA,
    premultiplyAlpha: false,
};

/**
 * A Texture stores the information that represents an image.
 * All textures have a base texture, which contains information about the source.
 * Therefore you can have many textures all using a single BaseTexture
 *
 * @class
 * @extends PIXI.utils.EventEmitter
 * @memberof PIXI
 * @param {PIXI.resources.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null]
 *        The current resource to use, for things that aren't Resource objects, will be converted
 *        into a Resource.
 * @param {Object} [options] - Collection of options
 * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture
 * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture
 * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures
 * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest
 * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type
 * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type
 * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target
 * @param {boolean} [options.premultiplyAlpha=true] - Pre multiply the image alpha
 * @param {number} [options.width=0] - Width of the texture
 * @param {number} [options.height=0] - Height of the texture
 * @param {number} [options.resolution] - Resolution of the base texture
 * @param {object} [options.resourceOptions] - Optional resource options,
 *        see {@link PIXI.resources.autoDetectResource autoDetectResource}
 */
var BaseTexture = /*@__PURE__*/(function (EventEmitter) {
    function BaseTexture(resource, options)
    {
        if ( resource === void 0 ) resource = null;
        if ( options === void 0 ) options = null;

        EventEmitter.call(this);

        options = options || {};

        var premultiplyAlpha = options.premultiplyAlpha;
        var mipmap = options.mipmap;
        var anisotropicLevel = options.anisotropicLevel;
        var scaleMode = options.scaleMode;
        var width = options.width;
        var height = options.height;
        var wrapMode = options.wrapMode;
        var format = options.format;
        var type = options.type;
        var target = options.target;
        var resolution = options.resolution;
        var resourceOptions = options.resourceOptions;

        // Convert the resource to a Resource object
        if (resource && !(resource instanceof Resource))
        {
            resource = autoDetectResource(resource, resourceOptions);
            resource.internal = true;
        }

        /**
         * The width of the base texture set when the image has loaded
         *
         * @readonly
         * @member {number}
         */
        this.width = width || 0;

        /**
         * The height of the base texture set when the image has loaded
         *
         * @readonly
         * @member {number}
         */
        this.height = height || 0;

        /**
         * The resolution / device pixel ratio of the texture
         *
         * @member {number}
         * @default PIXI.settings.RESOLUTION
         */
        this.resolution = resolution || _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].RESOLUTION;

        /**
         * Mipmap mode of the texture, affects downscaled images
         *
         * @member {PIXI.MIPMAP_MODES}
         * @default PIXI.settings.MIPMAP_TEXTURES
         */
        this.mipmap = mipmap !== undefined ? mipmap : _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].MIPMAP_TEXTURES;

        /**
         * Anisotropic filtering level of texture
         *
         * @member {number}
         * @default PIXI.settings.ANISOTROPIC_LEVEL
         */
        this.anisotropicLevel = anisotropicLevel !== undefined ? anisotropicLevel : _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].ANISOTROPIC_LEVEL;

        /**
         * How the texture wraps
         * @member {number}
         */
        this.wrapMode = wrapMode || _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].WRAP_MODE;

        /**
         * The scale mode to apply when scaling this texture
         *
         * @member {PIXI.SCALE_MODES}
         * @default PIXI.settings.SCALE_MODE
         */
        this.scaleMode = scaleMode !== undefined ? scaleMode : _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].SCALE_MODE;

        /**
         * The pixel format of the texture
         *
         * @member {PIXI.FORMATS}
         * @default PIXI.FORMATS.RGBA
         */
        this.format = format || _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["FORMATS"].RGBA;

        /**
         * The type of resource data
         *
         * @member {PIXI.TYPES}
         * @default PIXI.TYPES.UNSIGNED_BYTE
         */
        this.type = type || _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].UNSIGNED_BYTE;

        /**
         * The target type
         *
         * @member {PIXI.TARGETS}
         * @default PIXI.TARGETS.TEXTURE_2D
         */
        this.target = target || _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TARGETS"].TEXTURE_2D;

        /**
         * Set to true to enable pre-multiplied alpha
         *
         * @member {boolean}
         * @default true
         */
        this.premultiplyAlpha = premultiplyAlpha !== false;

        /**
         * Global unique identifier for this BaseTexture
         *
         * @member {string}
         * @protected
         */
        this.uid = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["uid"])();

        /**
         * Used by automatic texture Garbage Collection, stores last GC tick when it was bound
         *
         * @member {number}
         * @protected
         */
        this.touched = 0;

        /**
         * Whether or not the texture is a power of two, try to use power of two textures as much
         * as you can
         *
         * @readonly
         * @member {boolean}
         * @default false
         */
        this.isPowerOfTwo = false;
        this._refreshPOT();

        /**
         * The map of render context textures where this is bound
         *
         * @member {Object}
         * @private
         */
        this._glTextures = {};

        /**
         * Used by TextureSystem to only update texture to the GPU when needed.
         * Please call `update()` to increment it.
         *
         * @readonly
         * @member {number}
         */
        this.dirtyId = 0;

        /**
         * Used by TextureSystem to only update texture style when needed.
         *
         * @protected
         * @member {number}
         */
        this.dirtyStyleId = 0;

        /**
         * Currently default cache ID.
         *
         * @member {string}
         */
        this.cacheId = null;

        /**
         * Generally speaking means when resource is loaded.
         * @readonly
         * @member {boolean}
         */
        this.valid = width > 0 && height > 0;

        /**
         * The collection of alternative cache ids, since some BaseTextures
         * can have more than one ID, short name and longer full URL
         *
         * @member {Array<string>}
         * @readonly
         */
        this.textureCacheIds = [];

        /**
         * Flag if BaseTexture has been destroyed.
         *
         * @member {boolean}
         * @readonly
         */
        this.destroyed = false;

        /**
         * The resource used by this BaseTexture, there can only
         * be one resource per BaseTexture, but textures can share
         * resources.
         *
         * @member {PIXI.resources.Resource}
         * @readonly
         */
        this.resource = null;

        /**
         * Number of the texture batch, used by multi-texture renderers
         *
         * @member {number}
         */
        this._batchEnabled = 0;

        /**
         * Fired when a not-immediately-available source finishes loading.
         *
         * @protected
         * @event PIXI.BaseTexture#loaded
         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.
         */

        /**
         * Fired when a not-immediately-available source fails to load.
         *
         * @protected
         * @event PIXI.BaseTexture#error
         * @param {PIXI.BaseTexture} baseTexture - Resource errored.
         * @param {ErrorEvent} event - Load error event.
         */

        /**
         * Fired when BaseTexture is updated.
         *
         * @protected
         * @event PIXI.BaseTexture#loaded
         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.
         */

        /**
         * Fired when BaseTexture is updated.
         *
         * @protected
         * @event PIXI.BaseTexture#update
         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.
         */

        /**
         * Fired when BaseTexture is destroyed.
         *
         * @protected
         * @event PIXI.BaseTexture#dispose
         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.
         */

        // Set the resource
        this.setResource(resource);
    }

    if ( EventEmitter ) BaseTexture.__proto__ = EventEmitter;
    BaseTexture.prototype = Object.create( EventEmitter && EventEmitter.prototype );
    BaseTexture.prototype.constructor = BaseTexture;

    var prototypeAccessors = { realWidth: { configurable: true },realHeight: { configurable: true } };

    /**
     * Pixel width of the source of this texture
     *
     * @readonly
     * @member {number}
     */
    prototypeAccessors.realWidth.get = function ()
    {
        return Math.ceil((this.width * this.resolution) - 1e-4);
    };

    /**
     * Pixel height of the source of this texture
     *
     * @readonly
     * @member {number}
     */
    prototypeAccessors.realHeight.get = function ()
    {
        return Math.ceil((this.height * this.resolution) - 1e-4);
    };

    /**
     * Changes style options of BaseTexture
     *
     * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode
     * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps
     * @returns {PIXI.BaseTexture} this
     */
    BaseTexture.prototype.setStyle = function setStyle (scaleMode, mipmap)
    {
        var dirty;

        if (scaleMode !== undefined && scaleMode !== this.scaleMode)
        {
            this.scaleMode = scaleMode;
            dirty = true;
        }

        if (mipmap !== undefined && mipmap !== this.mipmap)
        {
            this.mipmap = mipmap;
            dirty = true;
        }

        if (dirty)
        {
            this.dirtyStyleId++;
        }

        return this;
    };

    /**
     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.
     *
     * @param {number} width Visual width
     * @param {number} height Visual height
     * @param {number} [resolution] Optionally set resolution
     * @returns {PIXI.BaseTexture} this
     */
    BaseTexture.prototype.setSize = function setSize (width, height, resolution)
    {
        this.resolution = resolution || this.resolution;
        this.width = width;
        this.height = height;
        this._refreshPOT();
        this.update();

        return this;
    };

    /**
     * Sets real size of baseTexture, preserves current resolution.
     *
     * @param {number} realWidth Full rendered width
     * @param {number} realHeight Full rendered height
     * @param {number} [resolution] Optionally set resolution
     * @returns {PIXI.BaseTexture} this
     */
    BaseTexture.prototype.setRealSize = function setRealSize (realWidth, realHeight, resolution)
    {
        this.resolution = resolution || this.resolution;
        this.width = realWidth / this.resolution;
        this.height = realHeight / this.resolution;
        this._refreshPOT();
        this.update();

        return this;
    };

    /**
     * Refresh check for isPowerOfTwo texture based on size
     *
     * @private
     */
    BaseTexture.prototype._refreshPOT = function _refreshPOT ()
    {
        this.isPowerOfTwo = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["isPow2"])(this.realWidth) && Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["isPow2"])(this.realHeight);
    };

    /**
     * Changes resolution
     *
     * @param {number} [resolution] res
     * @returns {PIXI.BaseTexture} this
     */
    BaseTexture.prototype.setResolution = function setResolution (resolution)
    {
        var oldResolution = this.resolution;

        if (oldResolution === resolution)
        {
            return this;
        }

        this.resolution = resolution;

        if (this.valid)
        {
            this.width = this.width * oldResolution / resolution;
            this.height = this.height * oldResolution / resolution;
            this.emit('update', this);
        }

        this._refreshPOT();

        return this;
    };

    /**
     * Sets the resource if it wasn't set. Throws error if resource already present
     *
     * @param {PIXI.resources.Resource} resource - that is managing this BaseTexture
     * @returns {PIXI.BaseTexture} this
     */
    BaseTexture.prototype.setResource = function setResource (resource)
    {
        if (this.resource === resource)
        {
            return this;
        }

        if (this.resource)
        {
            throw new Error('Resource can be set only once');
        }

        resource.bind(this);

        this.resource = resource;

        return this;
    };

    /**
     * Invalidates the object. Texture becomes valid if width and height are greater than zero.
     */
    BaseTexture.prototype.update = function update ()
    {
        if (!this.valid)
        {
            if (this.width > 0 && this.height > 0)
            {
                this.valid = true;
                this.emit('loaded', this);
                this.emit('update', this);
            }
        }
        else
        {
            this.dirtyId++;
            this.dirtyStyleId++;
            this.emit('update', this);
        }
    };

    /**
     * Handle errors with resources.
     * @private
     * @param {ErrorEvent} event - Error event emitted.
     */
    BaseTexture.prototype.onError = function onError (event)
    {
        this.emit('error', this, event);
    };

    /**
     * Destroys this base texture.
     * The method stops if resource doesn't want this texture to be destroyed.
     * Removes texture from all caches.
     */
    BaseTexture.prototype.destroy = function destroy ()
    {
        // remove and destroy the resource
        if (this.resource)
        {
            this.resource.unbind(this);
            // only destroy resourced created internally
            if (this.resource.internal)
            {
                this.resource.destroy();
            }
            this.resource = null;
        }

        if (this.cacheId)
        {
            delete _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][this.cacheId];
            delete _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][this.cacheId];

            this.cacheId = null;
        }

        // finally let the WebGL renderer know..
        this.dispose();

        BaseTexture.removeFromCache(this);
        this.textureCacheIds = null;

        this.destroyed = true;
    };

    /**
     * Frees the texture from WebGL memory without destroying this texture object.
     * This means you can still use the texture later which will upload it to GPU
     * memory again.
     *
     * @fires PIXI.BaseTexture#dispose
     */
    BaseTexture.prototype.dispose = function dispose ()
    {
        this.emit('dispose', this);
    };

    /**
     * Helper function that creates a base texture based on the source you provide.
     * The source can be - image url, image element, canvas element. If the
     * source is an image url or an image element and not in the base texture
     * cache, it will be created and loaded.
     *
     * @static
     * @param {string|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The
     *        source to create base texture from.
     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
     * @returns {PIXI.BaseTexture} The new base texture.
     */
    BaseTexture.from = function from (source, options)
    {
        var cacheId = null;

        if (typeof source === 'string')
        {
            cacheId = source;
        }
        else
        {
            if (!source._pixiId)
            {
                source._pixiId = "pixiid_" + (Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["uid"])());
            }

            cacheId = source._pixiId;
        }

        var baseTexture = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][cacheId];

        if (!baseTexture)
        {
            baseTexture = new BaseTexture(source, options);
            baseTexture.cacheId = cacheId;
            BaseTexture.addToCache(baseTexture, cacheId);
        }

        return baseTexture;
    };

    /**
     * Create a new BaseTexture with a BufferResource from a Float32Array.
     * RGBA values are floats from 0 to 1.
     * @static
     * @param {Float32Array|Uint8Array} buffer The optional array to use, if no data
     *        is provided, a new Float32Array is created.
     * @param {number} width - Width of the resource
     * @param {number} height - Height of the resource
     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
     * @return {PIXI.BaseTexture} The resulting new BaseTexture
     */
    BaseTexture.fromBuffer = function fromBuffer (buffer, width, height, options)
    {
        buffer = buffer || new Float32Array(width * height * 4);

        var resource = new BufferResource(buffer, { width: width, height: height });
        var type = buffer instanceof Float32Array ? _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].FLOAT : _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].UNSIGNED_BYTE;

        return new BaseTexture(resource, Object.assign(defaultBufferOptions, options || { width: width, height: height, type: type }));
    };

    /**
     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.
     *
     * @static
     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.
     * @param {string} id - The id that the BaseTexture will be stored against.
     */
    BaseTexture.addToCache = function addToCache (baseTexture, id)
    {
        if (id)
        {
            if (baseTexture.textureCacheIds.indexOf(id) === -1)
            {
                baseTexture.textureCacheIds.push(id);
            }

            if (_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][id])
            {
                // eslint-disable-next-line no-console
                console.warn(("BaseTexture added to the cache with an id [" + id + "] that already had an entry"));
            }

            _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][id] = baseTexture;
        }
    };

    /**
     * Remove a BaseTexture from the global BaseTextureCache.
     *
     * @static
     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.
     * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.
     */
    BaseTexture.removeFromCache = function removeFromCache (baseTexture)
    {
        if (typeof baseTexture === 'string')
        {
            var baseTextureFromCache = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][baseTexture];

            if (baseTextureFromCache)
            {
                var index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);

                if (index > -1)
                {
                    baseTextureFromCache.textureCacheIds.splice(index, 1);
                }

                delete _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][baseTexture];

                return baseTextureFromCache;
            }
        }
        else if (baseTexture && baseTexture.textureCacheIds)
        {
            for (var i = 0; i < baseTexture.textureCacheIds.length; ++i)
            {
                delete _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["BaseTextureCache"][baseTexture.textureCacheIds[i]];
            }

            baseTexture.textureCacheIds.length = 0;

            return baseTexture;
        }

        return null;
    };

    Object.defineProperties( BaseTexture.prototype, prototypeAccessors );

    return BaseTexture;
}(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]));

/**
 * Global number of the texture batch, used by multi-texture renderers
 *
 * @static
 * @member {number}
 */
BaseTexture._globalBatch = 0;

/**
 * A resource that contains a number of sources.
 *
 * @class
 * @extends PIXI.resources.Resource
 * @memberof PIXI.resources
 * @param {number|Array<*>} source - Number of items in array or the collection
 *        of image URLs to use. Can also be resources, image elements, canvas, etc.
 * @param {object} [options] Options to apply to {@link PIXI.resources.autoDetectResource}
 * @param {number} [options.width] - Width of the resource
 * @param {number} [options.height] - Height of the resource
 */
var ArrayResource = /*@__PURE__*/(function (Resource) {
    function ArrayResource(source, options)
    {
        options = options || {};

        var urls;
        var length = source;

        if (Array.isArray(source))
        {
            urls = source;
            length = source.length;
        }

        Resource.call(this, options.width, options.height);

        /**
         * Collection of resources.
         * @member {Array<PIXI.BaseTexture>}
         * @readonly
         */
        this.items = [];

        /**
         * Dirty IDs for each part
         * @member {Array<number>}
         * @readonly
         */
        this.itemDirtyIds = [];

        for (var i = 0; i < length; i++)
        {
            var partTexture = new BaseTexture();

            this.items.push(partTexture);
            this.itemDirtyIds.push(-1);
        }

        /**
         * Number of elements in array
         *
         * @member {number}
         * @readonly
         */
        this.length = length;

        /**
         * Promise when loading
         * @member {Promise}
         * @private
         * @default null
         */
        this._load = null;

        if (urls)
        {
            for (var i$1 = 0; i$1 < length; i$1++)
            {
                this.addResourceAt(autoDetectResource(urls[i$1], options), i$1);
            }
        }
    }

    if ( Resource ) ArrayResource.__proto__ = Resource;
    ArrayResource.prototype = Object.create( Resource && Resource.prototype );
    ArrayResource.prototype.constructor = ArrayResource;

    /**
     * Destroy this BaseImageResource
     * @override
     */
    ArrayResource.prototype.dispose = function dispose ()
    {
        for (var i = 0, len = this.length; i < len; i++)
        {
            this.items[i].destroy();
        }
        this.items = null;
        this.itemDirtyIds = null;
        this._load = null;
    };

    /**
     * Set a resource by ID
     *
     * @param {PIXI.resources.Resource} resource
     * @param {number} index - Zero-based index of resource to set
     * @return {PIXI.resources.ArrayResource} Instance for chaining
     */
    ArrayResource.prototype.addResourceAt = function addResourceAt (resource, index)
    {
        var baseTexture = this.items[index];

        if (!baseTexture)
        {
            throw new Error(("Index " + index + " is out of bounds"));
        }

        // Inherit the first resource dimensions
        if (resource.valid && !this.valid)
        {
            this.resize(resource.width, resource.height);
        }

        this.items[index].setResource(resource);

        return this;
    };

    /**
     * Set the parent base texture
     * @member {PIXI.BaseTexture}
     * @override
     */
    ArrayResource.prototype.bind = function bind (baseTexture)
    {
        Resource.prototype.bind.call(this, baseTexture);

        baseTexture.target = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TARGETS"].TEXTURE_2D_ARRAY;

        for (var i = 0; i < this.length; i++)
        {
            this.items[i].on('update', baseTexture.update, baseTexture);
        }
    };

    /**
     * Unset the parent base texture
     * @member {PIXI.BaseTexture}
     * @override
     */
    ArrayResource.prototype.unbind = function unbind (baseTexture)
    {
        Resource.prototype.unbind.call(this, baseTexture);

        for (var i = 0; i < this.length; i++)
        {
            this.items[i].off('update', baseTexture.update, baseTexture);
        }
    };

    /**
     * Load all the resources simultaneously
     * @override
     * @return {Promise<void>} When load is resolved
     */
    ArrayResource.prototype.load = function load ()
    {
        var this$1 = this;

        if (this._load)
        {
            return this._load;
        }

        var resources = this.items.map(function (item) { return item.resource; });

        // TODO: also implement load part-by-part strategy
        var promises = resources.map(function (item) { return item.load(); });

        this._load = Promise.all(promises)
            .then(function () {
                var ref = resources[0];
                var width = ref.width;
                var height = ref.height;

                this$1.resize(width, height);

                return Promise.resolve(this$1);
            }
            );

        return this._load;
    };

    /**
     * Upload the resources to the GPU.
     * @param {PIXI.Renderer} renderer
     * @param {PIXI.BaseTexture} texture
     * @param {PIXI.GLTexture} glTexture
     * @returns {boolean} whether texture was uploaded
     */
    ArrayResource.prototype.upload = function upload (renderer, texture, glTexture)
    {
        var ref = this;
        var length = ref.length;
        var itemDirtyIds = ref.itemDirtyIds;
        var items = ref.items;
        var gl = renderer.gl;

        if (glTexture.dirtyId < 0)
        {
            gl.texImage3D(
                gl.TEXTURE_2D_ARRAY,
                0,
                texture.format,
                this._width,
                this._height,
                length,
                0,
                texture.format,
                texture.type,
                null
            );
        }

        for (var i = 0; i < length; i++)
        {
            var item = items[i];

            if (itemDirtyIds[i] < item.dirtyId)
            {
                itemDirtyIds[i] = item.dirtyId;
                if (item.valid)
                {
                    gl.texSubImage3D(
                        gl.TEXTURE_2D_ARRAY,
                        0,
                        0, // xoffset
                        0, // yoffset
                        i, // zoffset
                        item.resource.width,
                        item.resource.height,
                        1,
                        texture.format,
                        texture.type,
                        item.resource.source
                    );
                }
            }
        }

        return true;
    };

    return ArrayResource;
}(Resource));

/**
 * @interface OffscreenCanvas
 */

/**
 * Resource type for HTMLCanvasElement.
 * @class
 * @extends PIXI.resources.BaseImageResource
 * @memberof PIXI.resources
 * @param {HTMLCanvasElement} source - Canvas element to use
 */
var CanvasResource = /*@__PURE__*/(function (BaseImageResource) {
    function CanvasResource () {
        BaseImageResource.apply(this, arguments);
    }

    if ( BaseImageResource ) CanvasResource.__proto__ = BaseImageResource;
    CanvasResource.prototype = Object.create( BaseImageResource && BaseImageResource.prototype );
    CanvasResource.prototype.constructor = CanvasResource;

    CanvasResource.test = function test (source)
    {
        var OffscreenCanvas = window.OffscreenCanvas;

        // Check for browsers that don't yet support OffscreenCanvas
        if (OffscreenCanvas && source instanceof OffscreenCanvas)
        {
            return true;
        }

        return source instanceof HTMLCanvasElement;
    };

    return CanvasResource;
}(BaseImageResource));

/**
 * Resource for a CubeTexture which contains six resources.
 *
 * @class
 * @extends PIXI.resources.ArrayResource
 * @memberof PIXI.resources
 * @param {Array<string|PIXI.resources.Resource>} [source] Collection of URLs or resources
 *        to use as the sides of the cube.
 * @param {object} [options] - ImageResource options
 * @param {number} [options.width] - Width of resource
 * @param {number} [options.height] - Height of resource
 */
var CubeResource = /*@__PURE__*/(function (ArrayResource) {
    function CubeResource(source, options)
    {
        options = options || {};

        ArrayResource.call(this, source, options);

        if (this.length !== CubeResource.SIDES)
        {
            throw new Error(("Invalid length. Got " + (this.length) + ", expected 6"));
        }

        for (var i = 0; i < CubeResource.SIDES; i++)
        {
            this.items[i].target = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TARGETS"].TEXTURE_CUBE_MAP_POSITIVE_X + i;
        }

        if (options.autoLoad !== false)
        {
            this.load();
        }
    }

    if ( ArrayResource ) CubeResource.__proto__ = ArrayResource;
    CubeResource.prototype = Object.create( ArrayResource && ArrayResource.prototype );
    CubeResource.prototype.constructor = CubeResource;

    /**
     * Add binding
     *
     * @override
     * @param {PIXI.BaseTexture} baseTexture - parent base texture
     */
    CubeResource.prototype.bind = function bind (baseTexture)
    {
        ArrayResource.prototype.bind.call(this, baseTexture);

        baseTexture.target = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TARGETS"].TEXTURE_CUBE_MAP;
    };

    /**
     * Upload the resource
     *
     * @returns {boolean} true is success
     */
    CubeResource.prototype.upload = function upload (renderer, baseTexture, glTexture)
    {
        var dirty = this.itemDirtyIds;

        for (var i = 0; i < CubeResource.SIDES; i++)
        {
            var side = this.items[i];

            if (dirty[i] < side.dirtyId)
            {
                dirty[i] = side.dirtyId;
                if (side.valid)
                {
                    side.resource.upload(renderer, side, glTexture);
                }
            }
        }

        return true;
    };

    return CubeResource;
}(ArrayResource));

/**
 * Number of texture sides to store for CubeResources
 *
 * @name PIXI.resources.CubeResource.SIDES
 * @static
 * @member {number}
 * @default 6
 */
CubeResource.SIDES = 6;

/**
 * Resource type for SVG elements and graphics.
 * @class
 * @extends PIXI.resources.BaseImageResource
 * @memberof PIXI.resources
 * @param {string} source - Base64 encoded SVG element or URL for SVG file.
 * @param {object} [options] - Options to use
 * @param {number} [options.scale=1] Scale to apply to SVG. Overridden by...
 * @param {number} [options.width] Rasterize SVG this wide. Aspect ratio preserved if height not specified.
 * @param {number} [options.height] Rasterize SVG this high. Aspect ratio preserved if width not specified.
 * @param {boolean} [options.autoLoad=true] Start loading right away.
 */
var SVGResource = /*@__PURE__*/(function (BaseImageResource) {
    function SVGResource(source, options)
    {
        options = options || {};

        BaseImageResource.call(this, document.createElement('canvas'));
        this._width = 0;
        this._height = 0;

        /**
         * Base64 encoded SVG element or URL for SVG file
         * @readonly
         * @member {string}
         */
        this.svg = source;

        /**
         * The source scale to apply when rasterizing on load
         * @readonly
         * @member {number}
         */
        this.scale = options.scale || 1;

        /**
         * A width override for rasterization on load
         * @readonly
         * @member {number}
         */
        this._overrideWidth = options.width;

        /**
         * A height override for rasterization on load
         * @readonly
         * @member {number}
         */
        this._overrideHeight = options.height;

        /**
         * Call when completely loaded
         * @private
         * @member {function}
         */
        this._resolve = null;

        /**
         * Cross origin value to use
         * @private
         * @member {boolean|string}
         */
        this._crossorigin = options.crossorigin;

        /**
         * Promise when loading
         * @member {Promise<void>}
         * @private
         * @default null
         */
        this._load = null;

        if (options.autoLoad !== false)
        {
            this.load();
        }
    }

    if ( BaseImageResource ) SVGResource.__proto__ = BaseImageResource;
    SVGResource.prototype = Object.create( BaseImageResource && BaseImageResource.prototype );
    SVGResource.prototype.constructor = SVGResource;

    SVGResource.prototype.load = function load ()
    {
        var this$1 = this;

        if (this._load)
        {
            return this._load;
        }

        this._load = new Promise(function (resolve) {
            // Save this until after load is finished
            this$1._resolve = function () {
                this$1.resize(this$1.source.width, this$1.source.height);
                resolve(this$1);
            };

            // Convert SVG inline string to data-uri
            if ((/^\<svg/).test(this$1.svg.trim()))
            {
                if (!btoa)
                {
                    throw new Error('Your browser doesn\'t support base64 conversions.');
                }
                this$1.svg = "data:image/svg+xml;base64," + (btoa(unescape(encodeURIComponent(this$1.svg))));
            }

            this$1._loadSvg();
        });

        return this._load;
    };

    /**
     * Loads an SVG image from `imageUrl` or `data URL`.
     *
     * @private
     */
    SVGResource.prototype._loadSvg = function _loadSvg ()
    {
        var this$1 = this;

        var tempImage = new Image();

        BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);
        tempImage.src = this.svg;

        tempImage.onerror = function (event) {
            tempImage.onerror = null;
            this$1.onError.run(event);
        };

        tempImage.onload = function () {
            var svgWidth = tempImage.width;
            var svgHeight = tempImage.height;

            if (!svgWidth || !svgHeight)
            {
                throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');
            }

            // Set render size
            var width = svgWidth * this$1.scale;
            var height = svgHeight * this$1.scale;

            if (this$1._overrideWidth || this$1._overrideHeight)
            {
                width = this$1._overrideWidth || this$1._overrideHeight / svgHeight * svgWidth;
                height = this$1._overrideHeight || this$1._overrideWidth / svgWidth * svgHeight;
            }
            width = Math.round(width);
            height = Math.round(height);

            // Create a canvas element
            var canvas = this$1.source;

            canvas.width = width;
            canvas.height = height;
            canvas._pixiId = "canvas_" + (Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["uid"])());

            // Draw the Svg to the canvas
            canvas
                .getContext('2d')
                .drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);

            this$1._resolve();
            this$1._resolve = null;
        };
    };

    /**
     * Get size from an svg string using regexp.
     *
     * @method
     * @param {string} svgString - a serialized svg element
     * @return {PIXI.ISize} image extension
     */
    SVGResource.getSize = function getSize (svgString)
    {
        var sizeMatch = SVGResource.SVG_SIZE.exec(svgString);
        var size = {};

        if (sizeMatch)
        {
            size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));
            size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));
        }

        return size;
    };

    /**
     * Destroys this texture
     * @override
     */
    SVGResource.prototype.dispose = function dispose ()
    {
        BaseImageResource.prototype.dispose.call(this);
        this._resolve = null;
        this._crossorigin = null;
    };

    /**
     * Used to auto-detect the type of resource.
     *
     * @static
     * @param {*} source - The source object
     * @param {string} extension - The extension of source, if set
     */
    SVGResource.test = function test (source, extension)
    {
        // url file extension is SVG
        return extension === 'svg'
            // source is SVG data-uri
            || (typeof source === 'string' && source.indexOf('data:image/svg+xml;base64') === 0)
            // source is SVG inline
            || (typeof source === 'string' && source.indexOf('<svg') === 0);
    };

    return SVGResource;
}(BaseImageResource));

/**
 * RegExp for SVG size.
 *
 * @static
 * @constant {RegExp|string} SVG_SIZE
 * @memberof PIXI.resources.SVGResource
 * @example &lt;svg width="100" height="100"&gt;&lt;/svg&gt;
 */
SVGResource.SVG_SIZE = /<svg[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*(?:\s(width|height)=('|")(\d*(?:\.\d+)?)(?:px)?('|"))[^>]*>/i; // eslint-disable-line max-len

/**
 * Resource type for HTMLVideoElement.
 * @class
 * @extends PIXI.resources.BaseImageResource
 * @memberof PIXI.resources
 * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.
 * @param {object} [options] - Options to use
 * @param {boolean} [options.autoLoad=true] - Start loading the video immediately
 * @param {boolean} [options.autoPlay=true] - Start playing video immediately
 * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.
 * Leave at 0 to update at every render.
 * @param {boolean} [options.crossorigin=true] - Load image using cross origin
 */
var VideoResource = /*@__PURE__*/(function (BaseImageResource) {
    function VideoResource(source, options)
    {
        options = options || {};

        if (!(source instanceof HTMLVideoElement))
        {
            var videoElement = document.createElement('video');

            // workaround for https://github.com/pixijs/pixi.js/issues/5996
            videoElement.setAttribute('preload', 'auto');
            videoElement.setAttribute('webkit-playsinline', '');
            videoElement.setAttribute('playsinline', '');

            if (typeof source === 'string')
            {
                source = [source];
            }

            BaseImageResource.crossOrigin(videoElement, (source[0].src || source[0]), options.crossorigin);

            // array of objects or strings
            for (var i = 0; i < source.length; ++i)
            {
                var sourceElement = document.createElement('source');

                var ref = source[i];
                var src = ref.src;
                var mime = ref.mime;

                src = src || source[i];

                var baseSrc = src.split('?').shift().toLowerCase();
                var ext = baseSrc.substr(baseSrc.lastIndexOf('.') + 1);

                mime = mime || ("video/" + ext);

                sourceElement.src = src;
                sourceElement.type = mime;

                videoElement.appendChild(sourceElement);
            }

            // Override the source
            source = videoElement;
        }

        BaseImageResource.call(this, source);

        this._autoUpdate = true;
        this._isAutoUpdating = false;
        this._updateFPS = options.updateFPS || 0;
        this._msToNextUpdate = 0;

        /**
         * When set to true will automatically play videos used by this texture once
         * they are loaded. If false, it will not modify the playing state.
         *
         * @member {boolean}
         * @default true
         */
        this.autoPlay = options.autoPlay !== false;

        /**
         * Promise when loading
         * @member {Promise<void>}
         * @private
         * @default null
         */
        this._load = null;

        /**
         * Callback when completed with load.
         * @member {function}
         * @private
         */
        this._resolve = null;

        // Bind for listeners
        this._onCanPlay = this._onCanPlay.bind(this);
        this._onError = this._onError.bind(this);

        if (options.autoLoad !== false)
        {
            this.load();
        }
    }

    if ( BaseImageResource ) VideoResource.__proto__ = BaseImageResource;
    VideoResource.prototype = Object.create( BaseImageResource && BaseImageResource.prototype );
    VideoResource.prototype.constructor = VideoResource;

    var prototypeAccessors = { autoUpdate: { configurable: true },updateFPS: { configurable: true } };

    /**
     * Trigger updating of the texture
     *
     * @param {number} [deltaTime=0] - time delta since last tick
     */
    VideoResource.prototype.update = function update (deltaTime)
    {
        if ( deltaTime === void 0 ) deltaTime = 0;

        if (!this.destroyed)
        {
            // account for if video has had its playbackRate changed
            var elapsedMS = _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__["Ticker"].shared.elapsedMS * this.source.playbackRate;

            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);
            if (!this._updateFPS || this._msToNextUpdate <= 0)
            {
                BaseImageResource.prototype.update.call(this, deltaTime);
                this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;
            }
        }
    };

    /**
     * Start preloading the video resource.
     *
     * @protected
     * @return {Promise<void>} Handle the validate event
     */
    VideoResource.prototype.load = function load ()
    {
        var this$1 = this;

        if (this._load)
        {
            return this._load;
        }

        var source = this.source;

        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)
            && source.width && source.height)
        {
            source.complete = true;
        }

        source.addEventListener('play', this._onPlayStart.bind(this));
        source.addEventListener('pause', this._onPlayStop.bind(this));

        if (!this._isSourceReady())
        {
            source.addEventListener('canplay', this._onCanPlay);
            source.addEventListener('canplaythrough', this._onCanPlay);
            source.addEventListener('error', this._onError, true);
        }
        else
        {
            this._onCanPlay();
        }

        this._load = new Promise(function (resolve) {
            if (this$1.valid)
            {
                resolve(this$1);
            }
            else
            {
                this$1._resolve = resolve;

                source.load();
            }
        });

        return this._load;
    };

    /**
     * Handle video error events.
     *
     * @private
     */
    VideoResource.prototype._onError = function _onError ()
    {
        this.source.removeEventListener('error', this._onError, true);
        this.onError.run(event);
    };

    /**
     * Returns true if the underlying source is playing.
     *
     * @private
     * @return {boolean} True if playing.
     */
    VideoResource.prototype._isSourcePlaying = function _isSourcePlaying ()
    {
        var source = this.source;

        return (source.currentTime > 0 && source.paused === false && source.ended === false && source.readyState > 2);
    };

    /**
     * Returns true if the underlying source is ready for playing.
     *
     * @private
     * @return {boolean} True if ready.
     */
    VideoResource.prototype._isSourceReady = function _isSourceReady ()
    {
        return this.source.readyState === 3 || this.source.readyState === 4;
    };

    /**
     * Runs the update loop when the video is ready to play
     *
     * @private
     */
    VideoResource.prototype._onPlayStart = function _onPlayStart ()
    {
        // Just in case the video has not received its can play even yet..
        if (!this.valid)
        {
            this._onCanPlay();
        }

        if (!this._isAutoUpdating && this.autoUpdate)
        {
            _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__["Ticker"].shared.add(this.update, this);
            this._isAutoUpdating = true;
        }
    };

    /**
     * Fired when a pause event is triggered, stops the update loop
     *
     * @private
     */
    VideoResource.prototype._onPlayStop = function _onPlayStop ()
    {
        if (this._isAutoUpdating)
        {
            _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__["Ticker"].shared.remove(this.update, this);
            this._isAutoUpdating = false;
        }
    };

    /**
     * Fired when the video is loaded and ready to play
     *
     * @private
     */
    VideoResource.prototype._onCanPlay = function _onCanPlay ()
    {
        var ref = this;
        var source = ref.source;

        source.removeEventListener('canplay', this._onCanPlay);
        source.removeEventListener('canplaythrough', this._onCanPlay);

        var valid = this.valid;

        this.resize(source.videoWidth, source.videoHeight);

        // prevent multiple loaded dispatches..
        if (!valid && this._resolve)
        {
            this._resolve(this);
            this._resolve = null;
        }

        if (this._isSourcePlaying())
        {
            this._onPlayStart();
        }
        else if (this.autoPlay)
        {
            source.play();
        }
    };

    /**
     * Destroys this texture
     * @override
     */
    VideoResource.prototype.dispose = function dispose ()
    {
        if (this._isAutoUpdating)
        {
            _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__["Ticker"].shared.remove(this.update, this);
        }

        if (this.source)
        {
            this.source.removeEventListener('error', this._onError, true);
            this.source.pause();
            this.source.src = '';
            this.source.load();
        }
        BaseImageResource.prototype.dispose.call(this);
    };

    /**
     * Should the base texture automatically update itself, set to true by default
     *
     * @member {boolean}
     */
    prototypeAccessors.autoUpdate.get = function ()
    {
        return this._autoUpdate;
    };

    prototypeAccessors.autoUpdate.set = function (value) // eslint-disable-line require-jsdoc
    {
        if (value !== this._autoUpdate)
        {
            this._autoUpdate = value;

            if (!this._autoUpdate && this._isAutoUpdating)
            {
                _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__["Ticker"].shared.remove(this.update, this);
                this._isAutoUpdating = false;
            }
            else if (this._autoUpdate && !this._isAutoUpdating)
            {
                _pixi_ticker__WEBPACK_IMPORTED_MODULE_4__["Ticker"].shared.add(this.update, this);
                this._isAutoUpdating = true;
            }
        }
    };

    /**
     * How many times a second to update the texture from the video. Leave at 0 to update at every render.
     * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.
     *
     * @member {number}
     */
    prototypeAccessors.updateFPS.get = function ()
    {
        return this._updateFPS;
    };

    prototypeAccessors.updateFPS.set = function (value) // eslint-disable-line require-jsdoc
    {
        if (value !== this._updateFPS)
        {
            this._updateFPS = value;
        }
    };

    /**
     * Used to auto-detect the type of resource.
     *
     * @static
     * @param {*} source - The source object
     * @param {string} extension - The extension of source, if set
     * @return {boolean} `true` if video source
     */
    VideoResource.test = function test (source, extension)
    {
        return (source instanceof HTMLVideoElement)
            || VideoResource.TYPES.indexOf(extension) > -1;
    };

    Object.defineProperties( VideoResource.prototype, prototypeAccessors );

    return VideoResource;
}(BaseImageResource));

/**
 * List of common video file extensions supported by VideoResource.
 * @constant
 * @member {Array<string>}
 * @static
 * @readonly
 */
VideoResource.TYPES = ['mp4', 'm4v', 'webm', 'ogg', 'ogv', 'h264', 'avi', 'mov'];

/**
 * Resource type for ImageBitmap.
 * @class
 * @extends PIXI.resources.BaseImageResource
 * @memberof PIXI.resources
 * @param {ImageBitmap} source - Image element to use
 */
var ImageBitmapResource = /*@__PURE__*/(function (BaseImageResource) {
    function ImageBitmapResource () {
        BaseImageResource.apply(this, arguments);
    }

    if ( BaseImageResource ) ImageBitmapResource.__proto__ = BaseImageResource;
    ImageBitmapResource.prototype = Object.create( BaseImageResource && BaseImageResource.prototype );
    ImageBitmapResource.prototype.constructor = ImageBitmapResource;

    ImageBitmapResource.test = function test (source)
    {
        return !!window.createImageBitmap && source instanceof ImageBitmap;
    };

    return ImageBitmapResource;
}(BaseImageResource));

INSTALLED.push(
    ImageResource,
    ImageBitmapResource,
    CanvasResource,
    VideoResource,
    SVGResource,
    BufferResource,
    CubeResource,
    ArrayResource
);

var index = ({
    INSTALLED: INSTALLED,
    autoDetectResource: autoDetectResource,
    ArrayResource: ArrayResource,
    BufferResource: BufferResource,
    CanvasResource: CanvasResource,
    CubeResource: CubeResource,
    ImageResource: ImageResource,
    ImageBitmapResource: ImageBitmapResource,
    SVGResource: SVGResource,
    VideoResource: VideoResource,
    Resource: Resource,
    BaseImageResource: BaseImageResource
});

/**
 * System is a base class used for extending systems used by the {@link PIXI.Renderer}
 *
 * @see PIXI.Renderer#addSystem
 * @class
 * @memberof PIXI
 */
var System = function System(renderer)
{
    /**
     * The renderer this manager works for.
     *
     * @member {PIXI.Renderer}
     */
    this.renderer = renderer;
};

/**
 * Generic destroy methods to be overridden by the subclass
 */
System.prototype.destroy = function destroy ()
{
    this.renderer = null;
};

/**
 * Resource type for DepthTexture.
 * @class
 * @extends PIXI.resources.BufferResource
 * @memberof PIXI.resources
 */
var DepthResource = /*@__PURE__*/(function (BufferResource) {
    function DepthResource () {
        BufferResource.apply(this, arguments);
    }

    if ( BufferResource ) DepthResource.__proto__ = BufferResource;
    DepthResource.prototype = Object.create( BufferResource && BufferResource.prototype );
    DepthResource.prototype.constructor = DepthResource;

    DepthResource.prototype.upload = function upload (renderer, baseTexture, glTexture)
    {
        var gl = renderer.gl;

        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.premultiplyAlpha);

        if (glTexture.width === baseTexture.width && glTexture.height === baseTexture.height)
        {
            gl.texSubImage2D(
                baseTexture.target,
                0,
                0,
                0,
                baseTexture.width,
                baseTexture.height,
                baseTexture.format,
                baseTexture.type,
                this.data
            );
        }
        else
        {
            glTexture.width = baseTexture.width;
            glTexture.height = baseTexture.height;

            gl.texImage2D(
                baseTexture.target,
                0,
                gl.DEPTH_COMPONENT16, // Needed for depth to render properly in webgl2.0
                baseTexture.width,
                baseTexture.height,
                0,
                baseTexture.format,
                baseTexture.type,
                this.data
            );
        }

        return true;
    };

    return DepthResource;
}(BufferResource));

/**
 * Frame buffer used by the BaseRenderTexture
 *
 * @class
 * @memberof PIXI
 */
var Framebuffer = function Framebuffer(width, height)
{
    this.width = Math.ceil(width || 100);
    this.height = Math.ceil(height || 100);

    this.stencil = false;
    this.depth = false;

    this.dirtyId = 0;
    this.dirtyFormat = 0;
    this.dirtySize = 0;

    this.depthTexture = null;
    this.colorTextures = [];

    this.glFramebuffers = {};

    this.disposeRunner = new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('disposeFramebuffer', 2);
};

var prototypeAccessors$1 = { colorTexture: { configurable: true } };

/**
 * Reference to the colorTexture.
 *
 * @member {PIXI.Texture[]}
 * @readonly
 */
prototypeAccessors$1.colorTexture.get = function ()
{
    return this.colorTextures[0];
};

/**
 * Add texture to the colorTexture array
 *
 * @param {number} [index=0] - Index of the array to add the texture to
 * @param {PIXI.Texture} [texture] - Texture to add to the array
 */
Framebuffer.prototype.addColorTexture = function addColorTexture (index, texture)
{
        if ( index === void 0 ) index = 0;

    // TODO add some validation to the texture - same width / height etc?
    this.colorTextures[index] = texture || new BaseTexture(null, { scaleMode: 0,
        resolution: 1,
        mipmap: false,
        width: this.width,
        height: this.height });// || new Texture();

    this.dirtyId++;
    this.dirtyFormat++;

    return this;
};

/**
 * Add a depth texture to the frame buffer
 *
 * @param {PIXI.Texture} [texture] - Texture to add
 */
Framebuffer.prototype.addDepthTexture = function addDepthTexture (texture)
{
    /* eslint-disable max-len */
    this.depthTexture = texture || new BaseTexture(new DepthResource(null, { width: this.width, height: this.height }), { scaleMode: 0,
        resolution: 1,
        width: this.width,
        height: this.height,
        mipmap: false,
        format: _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["FORMATS"].DEPTH_COMPONENT,
        type: _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].UNSIGNED_SHORT });// UNSIGNED_SHORT;
    /* eslint-disable max-len */
    this.dirtyId++;
    this.dirtyFormat++;

    return this;
};

/**
 * Enable depth on the frame buffer
 */
Framebuffer.prototype.enableDepth = function enableDepth ()
{
    this.depth = true;

    this.dirtyId++;
    this.dirtyFormat++;

    return this;
};

/**
 * Enable stencil on the frame buffer
 */
Framebuffer.prototype.enableStencil = function enableStencil ()
{
    this.stencil = true;

    this.dirtyId++;
    this.dirtyFormat++;

    return this;
};

/**
 * Resize the frame buffer
 *
 * @param {number} width - Width of the frame buffer to resize to
 * @param {number} height - Height of the frame buffer to resize to
 */
Framebuffer.prototype.resize = function resize (width, height)
{
    width = Math.ceil(width);
    height = Math.ceil(height);

    if (width === this.width && height === this.height) { return; }

    this.width = width;
    this.height = height;

    this.dirtyId++;
    this.dirtySize++;

    for (var i = 0; i < this.colorTextures.length; i++)
    {
        var texture = this.colorTextures[i];
        var resolution = texture.resolution;

        // take into acount the fact the texture may have a different resolution..
        texture.setSize(width / resolution, height / resolution);
    }

    if (this.depthTexture)
    {
        var resolution$1 = this.depthTexture.resolution;

        this.depthTexture.setSize(width / resolution$1, height / resolution$1);
    }
};

/**
 * disposes WebGL resources that are connected to this geometry
 */
Framebuffer.prototype.dispose = function dispose ()
{
    this.disposeRunner.run(this, false);
};

Object.defineProperties( Framebuffer.prototype, prototypeAccessors$1 );

/**
 * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
 *
 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded
 * otherwise black rectangles will be drawn instead.
 *
 * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position
 * and rotation of the given Display Objects is ignored. For example:
 *
 * ```js
 * let renderer = PIXI.autoDetectRenderer();
 * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });
 * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
 * let sprite = PIXI.Sprite.from("spinObj_01.png");
 *
 * sprite.position.x = 800/2;
 * sprite.position.y = 600/2;
 * sprite.anchor.x = 0.5;
 * sprite.anchor.y = 0.5;
 *
 * renderer.render(sprite, renderTexture);
 * ```
 *
 * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
 * you can clear the transform
 *
 * ```js
 *
 * sprite.setTransform()
 *
 * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });
 * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);
 *
 * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture
 * ```
 *
 * @class
 * @extends PIXI.BaseTexture
 * @memberof PIXI
 */
var BaseRenderTexture = /*@__PURE__*/(function (BaseTexture) {
    function BaseRenderTexture(options)
    {
        if (typeof options === 'number')
        {
            /* eslint-disable prefer-rest-params */
            // Backward compatibility of signature
            var width$1 = arguments[0];
            var height$1 = arguments[1];
            var scaleMode = arguments[2];
            var resolution = arguments[3];

            options = { width: width$1, height: height$1, scaleMode: scaleMode, resolution: resolution };
            /* eslint-enable prefer-rest-params */
        }

        BaseTexture.call(this, null, options);

        var ref = options || {};
        var width = ref.width;
        var height = ref.height;

        // Set defaults
        this.mipmap = false;
        this.width = Math.ceil(width) || 100;
        this.height = Math.ceil(height) || 100;
        this.valid = true;

        /**
         * A reference to the canvas render target (we only need one as this can be shared across renderers)
         *
         * @protected
         * @member {object}
         */
        this._canvasRenderTarget = null;

        this.clearColor = [0, 0, 0, 0];

        this.framebuffer = new Framebuffer(this.width * this.resolution, this.height * this.resolution)
            .addColorTexture(0, this)
            .enableStencil();

        // TODO - could this be added the systems?

        /**
         * The data structure for the stencil masks.
         *
         * @member {PIXI.Graphics[]}
         */
        this.stencilMaskStack = [];

        /**
         * The data structure for the filters.
         *
         * @member {PIXI.Graphics[]}
         */
        this.filterStack = [{}];
    }

    if ( BaseTexture ) BaseRenderTexture.__proto__ = BaseTexture;
    BaseRenderTexture.prototype = Object.create( BaseTexture && BaseTexture.prototype );
    BaseRenderTexture.prototype.constructor = BaseRenderTexture;

    /**
     * Resizes the BaseRenderTexture.
     *
     * @param {number} width - The width to resize to.
     * @param {number} height - The height to resize to.
     */
    BaseRenderTexture.prototype.resize = function resize (width, height)
    {
        width = Math.ceil(width);
        height = Math.ceil(height);
        this.framebuffer.resize(width * this.resolution, height * this.resolution);
    };

    /**
     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.
     * This means you can still use the texture later which will upload it to GPU
     * memory again.
     *
     * @fires PIXI.BaseTexture#dispose
     */
    BaseRenderTexture.prototype.dispose = function dispose ()
    {
        this.framebuffer.dispose();

        BaseTexture.prototype.dispose.call(this);
    };

    /**
     * Destroys this texture.
     *
     */
    BaseRenderTexture.prototype.destroy = function destroy ()
    {
        BaseTexture.prototype.destroy.call(this, true);

        this.framebuffer = null;
    };

    return BaseRenderTexture;
}(BaseTexture));

/**
 * Stores a texture's frame in UV coordinates, in
 * which everything lies in the rectangle `[(0,0), (1,0),
 * (1,1), (0,1)]`.
 *
 * | Corner       | Coordinates |
 * |--------------|-------------|
 * | Top-Left     | `(x0,y0)`   |
 * | Top-Right    | `(x1,y1)`   |
 * | Bottom-Right | `(x2,y2)`   |
 * | Bottom-Left  | `(x3,y3)`   |
 *
 * @class
 * @protected
 * @memberof PIXI
 */
var TextureUvs = function TextureUvs()
{
    /**
     * X-component of top-left corner `(x0,y0)`.
     *
     * @member {number}
     */
    this.x0 = 0;

    /**
     * Y-component of top-left corner `(x0,y0)`.
     *
     * @member {number}
     */
    this.y0 = 0;

    /**
     * X-component of top-right corner `(x1,y1)`.
     *
     * @member {number}
     */
    this.x1 = 1;

    /**
     * Y-component of top-right corner `(x1,y1)`.
     *
     * @member {number}
     */
    this.y1 = 0;

    /**
     * X-component of bottom-right corner `(x2,y2)`.
     *
     * @member {number}
     */
    this.x2 = 1;

    /**
     * Y-component of bottom-right corner `(x2,y2)`.
     *
     * @member {number}
     */
    this.y2 = 1;

    /**
     * X-component of bottom-left corner `(x3,y3)`.
     *
     * @member {number}
     */
    this.x3 = 0;

    /**
     * Y-component of bottom-right corner `(x3,y3)`.
     *
     * @member {number}
     */
    this.y3 = 1;

    this.uvsFloat32 = new Float32Array(8);
};

/**
 * Sets the texture Uvs based on the given frame information.
 *
 * @protected
 * @param {PIXI.Rectangle} frame - The frame of the texture
 * @param {PIXI.Rectangle} baseFrame - The base frame of the texture
 * @param {number} rotate - Rotation of frame, see {@link PIXI.GroupD8}
 */
TextureUvs.prototype.set = function set (frame, baseFrame, rotate)
{
    var tw = baseFrame.width;
    var th = baseFrame.height;

    if (rotate)
    {
        // width and height div 2 div baseFrame size
        var w2 = frame.width / 2 / tw;
        var h2 = frame.height / 2 / th;

        // coordinates of center
        var cX = (frame.x / tw) + w2;
        var cY = (frame.y / th) + h2;

        rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].add(rotate, _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].NW); // NW is top-left corner
        this.x0 = cX + (w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uX(rotate));
        this.y0 = cY + (h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uY(rotate));

        rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].add(rotate, 2); // rotate 90 degrees clockwise
        this.x1 = cX + (w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uX(rotate));
        this.y1 = cY + (h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uY(rotate));

        rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].add(rotate, 2);
        this.x2 = cX + (w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uX(rotate));
        this.y2 = cY + (h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uY(rotate));

        rotate = _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].add(rotate, 2);
        this.x3 = cX + (w2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uX(rotate));
        this.y3 = cY + (h2 * _pixi_math__WEBPACK_IMPORTED_MODULE_5__["GroupD8"].uY(rotate));
    }
    else
    {
        this.x0 = frame.x / tw;
        this.y0 = frame.y / th;

        this.x1 = (frame.x + frame.width) / tw;
        this.y1 = frame.y / th;

        this.x2 = (frame.x + frame.width) / tw;
        this.y2 = (frame.y + frame.height) / th;

        this.x3 = frame.x / tw;
        this.y3 = (frame.y + frame.height) / th;
    }

    this.uvsFloat32[0] = this.x0;
    this.uvsFloat32[1] = this.y0;
    this.uvsFloat32[2] = this.x1;
    this.uvsFloat32[3] = this.y1;
    this.uvsFloat32[4] = this.x2;
    this.uvsFloat32[5] = this.y2;
    this.uvsFloat32[6] = this.x3;
    this.uvsFloat32[7] = this.y3;
};

var DEFAULT_UVS = new TextureUvs();

/**
 * A texture stores the information that represents an image or part of an image.
 *
 * It cannot be added to the display list directly; instead use it as the texture for a Sprite.
 * If no frame is provided for a texture, then the whole image is used.
 *
 * You can directly create a texture from an image and then reuse it multiple times like this :
 *
 * ```js
 * let texture = PIXI.Texture.from('assets/image.png');
 * let sprite1 = new PIXI.Sprite(texture);
 * let sprite2 = new PIXI.Sprite(texture);
 * ```
 *
 * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:
 * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.
 *
 * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.
 * You can check for this by checking the sprite's _textureID property.
 * ```js
 * var texture = PIXI.Texture.from('assets/image.svg');
 * var sprite1 = new PIXI.Sprite(texture);
 * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file
 * ```
 * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.
 *
 * @class
 * @extends PIXI.utils.EventEmitter
 * @memberof PIXI
 */
var Texture = /*@__PURE__*/(function (EventEmitter) {
    function Texture(baseTexture, frame, orig, trim, rotate, anchor)
    {
        EventEmitter.call(this);

        /**
         * Does this Texture have any frame data assigned to it?
         *
         * This mode is enabled automatically if no frame was passed inside constructor.
         *
         * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.
         *
         * Beware, after loading or resize of baseTexture event can fired two times!
         * If you want more control, subscribe on baseTexture itself.
         *
         * ```js
         * texture.on('update', () => {});
         * ```
         *
         * Any assignment of `frame` switches off `noFrame` mode.
         *
         * @member {boolean}
         */
        this.noFrame = false;

        if (!frame)
        {
            this.noFrame = true;
            frame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"](0, 0, 1, 1);
        }

        if (baseTexture instanceof Texture)
        {
            baseTexture = baseTexture.baseTexture;
        }

        /**
         * The base texture that this texture uses.
         *
         * @member {PIXI.BaseTexture}
         */
        this.baseTexture = baseTexture;

        /**
         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,
         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)
         *
         * @member {PIXI.Rectangle}
         */
        this._frame = frame;

        /**
         * This is the trimmed area of original texture, before it was put in atlas
         * Please call `updateUvs()` after you change coordinates of `trim` manually.
         *
         * @member {PIXI.Rectangle}
         */
        this.trim = trim;

        /**
         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
         *
         * @member {boolean}
         */
        this.valid = false;

        /**
         * This will let a renderer know that a texture has been updated (used mainly for WebGL uv updates)
         *
         * @member {boolean}
         */
        this.requiresUpdate = false;

        /**
         * The WebGL UV data cache. Can be used as quad UV
         *
         * @member {PIXI.TextureUvs}
         * @protected
         */
        this._uvs = DEFAULT_UVS;

        /**
         * Default TextureMatrix instance for this texture
         * By default that object is not created because its heavy
         *
         * @member {PIXI.TextureMatrix}
         */
        this.uvMatrix = null;

        /**
         * This is the area of original texture, before it was put in atlas
         *
         * @member {PIXI.Rectangle}
         */
        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);

        this._rotate = Number(rotate || 0);

        if (rotate === true)
        {
            // this is old texturepacker legacy, some games/libraries are passing "true" for rotated textures
            this._rotate = 2;
        }
        else if (this._rotate % 2 !== 0)
        {
            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');
        }

        /**
         * Anchor point that is used as default if sprite is created with this texture.
         * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.
         * @member {PIXI.Point}
         * @default {0,0}
         */
        this.defaultAnchor = anchor ? new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Point"](anchor.x, anchor.y) : new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Point"](0, 0);

        /**
         * Update ID is observed by sprites and TextureMatrix instances.
         * Call updateUvs() to increment it.
         *
         * @member {number}
         * @protected
         */

        this._updateID = 0;

        /**
         * The ids under which this Texture has been added to the texture cache. This is
         * automatically set as long as Texture.addToCache is used, but may not be set if a
         * Texture is added directly to the TextureCache array.
         *
         * @member {string[]}
         */
        this.textureCacheIds = [];

        if (!baseTexture.valid)
        {
            baseTexture.once('loaded', this.onBaseTextureUpdated, this);
        }
        else if (this.noFrame)
        {
            // if there is no frame we should monitor for any base texture changes..
            if (baseTexture.valid)
            {
                this.onBaseTextureUpdated(baseTexture);
            }
        }
        else
        {
            this.frame = frame;
        }

        if (this.noFrame)
        {
            baseTexture.on('update', this.onBaseTextureUpdated, this);
        }
    }

    if ( EventEmitter ) Texture.__proto__ = EventEmitter;
    Texture.prototype = Object.create( EventEmitter && EventEmitter.prototype );
    Texture.prototype.constructor = Texture;

    var prototypeAccessors = { resolution: { configurable: true },frame: { configurable: true },rotate: { configurable: true },width: { configurable: true },height: { configurable: true } };

    /**
     * Updates this texture on the gpu.
     *
     * Calls the TextureResource update.
     *
     * If you adjusted `frame` manually, please call `updateUvs()` instead.
     *
     */
    Texture.prototype.update = function update ()
    {
        if (this.baseTexture.resource)
        {
            this.baseTexture.resource.update();
        }
    };

    /**
     * Called when the base texture is updated
     *
     * @protected
     * @param {PIXI.BaseTexture} baseTexture - The base texture.
     */
    Texture.prototype.onBaseTextureUpdated = function onBaseTextureUpdated (baseTexture)
    {
        if (this.noFrame)
        {
            if (!this.baseTexture.valid)
            {
                return;
            }

            this._frame.width = baseTexture.width;
            this._frame.height = baseTexture.height;
            this.valid = true;
            this.updateUvs();
        }
        else
        {
            // TODO this code looks confusing.. boo to abusing getters and setters!
            // if user gave us frame that has bigger size than resized texture it can be a problem
            this.frame = this._frame;
        }

        this.emit('update', this);
    };

    /**
     * Destroys this texture
     *
     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well
     */
    Texture.prototype.destroy = function destroy (destroyBase)
    {
        if (this.baseTexture)
        {
            if (destroyBase)
            {
                var ref = this.baseTexture;
                var resource = ref.resource;

                // delete the texture if it exists in the texture cache..
                // this only needs to be removed if the base texture is actually destroyed too..
                if (resource && _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][resource.url])
                {
                    Texture.removeFromCache(resource.url);
                }

                this.baseTexture.destroy();
            }

            this.baseTexture.off('update', this.onBaseTextureUpdated, this);

            this.baseTexture = null;
        }

        this._frame = null;
        this._uvs = null;
        this.trim = null;
        this.orig = null;

        this.valid = false;

        Texture.removeFromCache(this);
        this.textureCacheIds = null;
    };

    /**
     * Creates a new texture object that acts the same as this one.
     *
     * @return {PIXI.Texture} The new texture
     */
    Texture.prototype.clone = function clone ()
    {
        return new Texture(this.baseTexture, this.frame, this.orig, this.trim, this.rotate, this.defaultAnchor);
    };

    /**
     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.
     * Call it after changing the frame
     */
    Texture.prototype.updateUvs = function updateUvs ()
    {
        if (this._uvs === DEFAULT_UVS)
        {
            this._uvs = new TextureUvs();
        }

        this._uvs.set(this._frame, this.baseTexture, this.rotate);

        this._updateID++;
    };

    /**
     * Helper function that creates a new Texture based on the source you provide.
     * The source can be - frame id, image url, video url, canvas element, video element, base texture
     *
     * @static
     * @param {number|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source
     *        Source to create texture from
     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
     * @return {PIXI.Texture} The newly created texture
     */
    Texture.from = function from (source, options)
    {
        if ( options === void 0 ) options = {};

        var cacheId = null;

        if (typeof source === 'string')
        {
            cacheId = source;
        }
        else
        {
            if (!source._pixiId)
            {
                source._pixiId = "pixiid_" + (Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["uid"])());
            }

            cacheId = source._pixiId;
        }

        var texture = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][cacheId];

        if (!texture)
        {
            if (!options.resolution)
            {
                options.resolution = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["getResolutionOfUrl"])(source);
            }

            texture = new Texture(new BaseTexture(source, options));
            texture.baseTexture.cacheId = cacheId;

            BaseTexture.addToCache(texture.baseTexture, cacheId);
            Texture.addToCache(texture, cacheId);
        }

        // lets assume its a base texture!
        return texture;
    };

    /**
     * Create a new Texture with a BufferResource from a Float32Array.
     * RGBA values are floats from 0 to 1.
     * @static
     * @param {Float32Array|Uint8Array} buffer The optional array to use, if no data
     *        is provided, a new Float32Array is created.
     * @param {number} width - Width of the resource
     * @param {number} height - Height of the resource
     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.
     * @return {PIXI.Texture} The resulting new BaseTexture
     */
    Texture.fromBuffer = function fromBuffer (buffer, width, height, options)
    {
        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));
    };

    /**
     * Create a texture from a source and add to the cache.
     *
     * @static
     * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.
     * @param {String} imageUrl - File name of texture, for cache and resolving resolution.
     * @param {String} [name] - Human readable name for the texture cache. If no name is
     *        specified, only `imageUrl` will be used as the cache ID.
     * @return {PIXI.Texture} Output texture
     */
    Texture.fromLoader = function fromLoader (source, imageUrl, name)
    {
        var resource = new ImageResource(source);

        resource.url = imageUrl;

        var baseTexture = new BaseTexture(resource, {
            scaleMode: _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].SCALE_MODE,
            resolution: Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["getResolutionOfUrl"])(imageUrl),
        });

        var texture = new Texture(baseTexture);

        // No name, use imageUrl instead
        if (!name)
        {
            name = imageUrl;
        }

        // lets also add the frame to pixi's global cache for 'fromLoader' function
        BaseTexture.addToCache(texture.baseTexture, name);
        Texture.addToCache(texture, name);

        // also add references by url if they are different.
        if (name !== imageUrl)
        {
            BaseTexture.addToCache(texture.baseTexture, imageUrl);
            Texture.addToCache(texture, imageUrl);
        }

        return texture;
    };

    /**
     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.
     *
     * @static
     * @param {PIXI.Texture} texture - The Texture to add to the cache.
     * @param {string} id - The id that the Texture will be stored against.
     */
    Texture.addToCache = function addToCache (texture, id)
    {
        if (id)
        {
            if (texture.textureCacheIds.indexOf(id) === -1)
            {
                texture.textureCacheIds.push(id);
            }

            if (_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][id])
            {
                // eslint-disable-next-line no-console
                console.warn(("Texture added to the cache with an id [" + id + "] that already had an entry"));
            }

            _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][id] = texture;
        }
    };

    /**
     * Remove a Texture from the global TextureCache.
     *
     * @static
     * @param {string|PIXI.Texture} texture - id of a Texture to be removed, or a Texture instance itself
     * @return {PIXI.Texture|null} The Texture that was removed
     */
    Texture.removeFromCache = function removeFromCache (texture)
    {
        if (typeof texture === 'string')
        {
            var textureFromCache = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][texture];

            if (textureFromCache)
            {
                var index = textureFromCache.textureCacheIds.indexOf(texture);

                if (index > -1)
                {
                    textureFromCache.textureCacheIds.splice(index, 1);
                }

                delete _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][texture];

                return textureFromCache;
            }
        }
        else if (texture && texture.textureCacheIds)
        {
            for (var i = 0; i < texture.textureCacheIds.length; ++i)
            {
                // Check that texture matches the one being passed in before deleting it from the cache.
                if (_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][texture.textureCacheIds[i]] === texture)
                {
                    delete _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["TextureCache"][texture.textureCacheIds[i]];
                }
            }

            texture.textureCacheIds.length = 0;

            return texture;
        }

        return null;
    };

    /**
     * Returns resolution of baseTexture
     *
     * @member {number}
     * @readonly
     */
    prototypeAccessors.resolution.get = function ()
    {
        return this.baseTexture.resolution;
    };

    /**
     * The frame specifies the region of the base texture that this texture uses.
     * Please call `updateUvs()` after you change coordinates of `frame` manually.
     *
     * @member {PIXI.Rectangle}
     */
    prototypeAccessors.frame.get = function ()
    {
        return this._frame;
    };

    prototypeAccessors.frame.set = function (frame) // eslint-disable-line require-jsdoc
    {
        this._frame = frame;

        this.noFrame = false;

        var x = frame.x;
        var y = frame.y;
        var width = frame.width;
        var height = frame.height;
        var xNotFit = x + width > this.baseTexture.width;
        var yNotFit = y + height > this.baseTexture.height;

        if (xNotFit || yNotFit)
        {
            var relationship = xNotFit && yNotFit ? 'and' : 'or';
            var errorX = "X: " + x + " + " + width + " = " + (x + width) + " > " + (this.baseTexture.width);
            var errorY = "Y: " + y + " + " + height + " = " + (y + height) + " > " + (this.baseTexture.height);

            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '
                + errorX + " " + relationship + " " + errorY);
        }

        this.valid = width && height && this.baseTexture.valid;

        if (!this.trim && !this.rotate)
        {
            this.orig = frame;
        }

        if (this.valid)
        {
            this.updateUvs();
        }
    };

    /**
     * Indicates whether the texture is rotated inside the atlas
     * set to 2 to compensate for texture packer rotation
     * set to 6 to compensate for spine packer rotation
     * can be used to rotate or mirror sprites
     * See {@link PIXI.GroupD8} for explanation
     *
     * @member {number}
     */
    prototypeAccessors.rotate.get = function ()
    {
        return this._rotate;
    };

    prototypeAccessors.rotate.set = function (rotate) // eslint-disable-line require-jsdoc
    {
        this._rotate = rotate;
        if (this.valid)
        {
            this.updateUvs();
        }
    };

    /**
     * The width of the Texture in pixels.
     *
     * @member {number}
     */
    prototypeAccessors.width.get = function ()
    {
        return this.orig.width;
    };

    /**
     * The height of the Texture in pixels.
     *
     * @member {number}
     */
    prototypeAccessors.height.get = function ()
    {
        return this.orig.height;
    };

    Object.defineProperties( Texture.prototype, prototypeAccessors );

    return Texture;
}(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]));

function createWhiteTexture()
{
    var canvas = document.createElement('canvas');

    canvas.width = 16;
    canvas.height = 16;

    var context = canvas.getContext('2d');

    context.fillStyle = 'white';
    context.fillRect(0, 0, 16, 16);

    return new Texture(new BaseTexture(new CanvasResource(canvas)));
}

function removeAllHandlers(tex)
{
    tex.destroy = function _emptyDestroy() { /* empty */ };
    tex.on = function _emptyOn() { /* empty */ };
    tex.once = function _emptyOnce() { /* empty */ };
    tex.emit = function _emptyEmit() { /* empty */ };
}

/**
 * An empty texture, used often to not have to create multiple empty textures.
 * Can not be destroyed.
 *
 * @static
 * @constant
 * @member {PIXI.Texture}
 */
Texture.EMPTY = new Texture(new BaseTexture());
removeAllHandlers(Texture.EMPTY);
removeAllHandlers(Texture.EMPTY.baseTexture);

/**
 * A white texture of 16x16 size, used for graphics and other things
 * Can not be destroyed.
 *
 * @static
 * @constant
 * @member {PIXI.Texture}
 */
Texture.WHITE = createWhiteTexture();
removeAllHandlers(Texture.WHITE);
removeAllHandlers(Texture.WHITE.baseTexture);

/**
 * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.
 *
 * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded
 * otherwise black rectangles will be drawn instead.
 *
 * __Hint-2__: The actual memory allocation will happen on first render.
 * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.
 *
 * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:
 *
 * ```js
 * let renderer = PIXI.autoDetectRenderer();
 * let renderTexture = PIXI.RenderTexture.create(800, 600);
 * let sprite = PIXI.Sprite.from("spinObj_01.png");
 *
 * sprite.position.x = 800/2;
 * sprite.position.y = 600/2;
 * sprite.anchor.x = 0.5;
 * sprite.anchor.y = 0.5;
 *
 * renderer.render(sprite, renderTexture);
 * ```
 *
 * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0
 * you can clear the transform
 *
 * ```js
 *
 * sprite.setTransform()
 *
 * let renderTexture = new PIXI.RenderTexture.create(100, 100);
 *
 * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture
 * ```
 *
 * @class
 * @extends PIXI.Texture
 * @memberof PIXI
 */
var RenderTexture = /*@__PURE__*/(function (Texture) {
    function RenderTexture(baseRenderTexture, frame)
    {
        // support for legacy..
        var _legacyRenderer = null;

        if (!(baseRenderTexture instanceof BaseRenderTexture))
        {
            /* eslint-disable prefer-rest-params, no-console */
            var width = arguments[1];
            var height = arguments[2];
            var scaleMode = arguments[3];
            var resolution = arguments[4];

            // we have an old render texture..
            console.warn(("Please use RenderTexture.create(" + width + ", " + height + ") instead of the ctor directly."));
            _legacyRenderer = arguments[0];
            /* eslint-enable prefer-rest-params, no-console */

            frame = null;
            baseRenderTexture = new BaseRenderTexture({
                width: width,
                height: height,
                scaleMode: scaleMode,
                resolution: resolution,
            });
        }

        /**
         * The base texture object that this texture uses
         *
         * @member {PIXI.BaseTexture}
         */
        Texture.call(this, baseRenderTexture, frame);

        this.legacyRenderer = _legacyRenderer;

        /**
         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.
         *
         * @member {boolean}
         */
        this.valid = true;

        /**
         * Stores `sourceFrame` when this texture is inside current filter stack.
         * You can read it inside filters.
         *
         * @readonly
         * @member {PIXI.Rectangle}
         */
        this.filterFrame = null;

        /**
         * The key for pooled texture of FilterSystem
         * @protected
         * @member {string}
         */
        this.filterPoolKey = null;

        this.updateUvs();
    }

    if ( Texture ) RenderTexture.__proto__ = Texture;
    RenderTexture.prototype = Object.create( Texture && Texture.prototype );
    RenderTexture.prototype.constructor = RenderTexture;

    /**
     * Resizes the RenderTexture.
     *
     * @param {number} width - The width to resize to.
     * @param {number} height - The height to resize to.
     * @param {boolean} [resizeBaseTexture=true] - Should the baseTexture.width and height values be resized as well?
     */
    RenderTexture.prototype.resize = function resize (width, height, resizeBaseTexture)
    {
        if ( resizeBaseTexture === void 0 ) resizeBaseTexture = true;

        width = Math.ceil(width);
        height = Math.ceil(height);

        // TODO - could be not required..
        this.valid = (width > 0 && height > 0);

        this._frame.width = this.orig.width = width;
        this._frame.height = this.orig.height = height;

        if (resizeBaseTexture)
        {
            this.baseTexture.resize(width, height);
        }

        this.updateUvs();
    };

    /**
     * Changes the resolution of baseTexture, but does not change framebuffer size.
     *
     * @param {number} resolution - The new resolution to apply to RenderTexture
     */
    RenderTexture.prototype.setResolution = function setResolution (resolution)
    {
        var ref = this;
        var baseTexture = ref.baseTexture;

        if (baseTexture.resolution === resolution)
        {
            return;
        }

        baseTexture.setResolution(resolution);
        this.resize(baseTexture.width, baseTexture.height, false);
    };

    /**
     * A short hand way of creating a render texture.
     *
     * @param {object} [options] - Options
     * @param {number} [options.width=100] - The width of the render texture
     * @param {number} [options.height=100] - The height of the render texture
     * @param {number} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values
     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the texture being generated
     * @return {PIXI.RenderTexture} The new render texture
     */
    RenderTexture.create = function create (options)
    {
        // fallback, old-style: create(width, height, scaleMode, resolution)
        if (typeof options === 'number')
        {
            /* eslint-disable prefer-rest-params */
            options = {
                width: options,
                height: arguments[1],
                scaleMode: arguments[2],
                resolution: arguments[3],
            };
            /* eslint-enable prefer-rest-params */
        }

        return new RenderTexture(new BaseRenderTexture(options));
    };

    return RenderTexture;
}(Texture));

/**
 * Experimental!
 *
 * Texture pool, used by FilterSystem and plugins
 * Stores collection of temporary pow2 or screen-sized renderTextures
 *
 * If you use custom RenderTexturePool for your filters, you can use methods
 * `getFilterTexture` and `returnFilterTexture` same as in
 *
 * @class
 * @memberof PIXI
 */
var RenderTexturePool = function RenderTexturePool(textureOptions)
{
    this.texturePool = {};
    this.textureOptions = textureOptions || {};
    /**
     * Allow renderTextures of the same size as screen, not just pow2
     *
     * Automatically sets to true after `setScreenSize`
     *
     * @member {boolean}
     * @default false
     */
    this.enableFullScreen = false;

    this._pixelsWidth = 0;
    this._pixelsHeight = 0;
};

/**
 * creates of texture with params that were specified in pool constructor
 *
 * @param {number} realWidth width of texture in pixels
 * @param {number} realHeight height of texture in pixels
 * @returns {RenderTexture}
 */
RenderTexturePool.prototype.createTexture = function createTexture (realWidth, realHeight)
{
    var baseRenderTexture = new BaseRenderTexture(Object.assign({
        width: realWidth,
        height: realHeight,
        resolution: 1,
    }, this.textureOptions));

    return new RenderTexture(baseRenderTexture);
};

/**
 * Gets a Power-of-Two render texture or fullScreen texture
 *
 * @protected
 * @param {number} minWidth - The minimum width of the render texture in real pixels.
 * @param {number} minHeight - The minimum height of the render texture in real pixels.
 * @param {number} [resolution=1] - The resolution of the render texture.
 * @return {PIXI.RenderTexture} The new render texture.
 */
RenderTexturePool.prototype.getOptimalTexture = function getOptimalTexture (minWidth, minHeight, resolution)
{
        if ( resolution === void 0 ) resolution = 1;

    var key = RenderTexturePool.SCREEN_KEY;

    minWidth *= resolution;
    minHeight *= resolution;

    if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight)
    {
        minWidth = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["nextPow2"])(minWidth);
        minHeight = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["nextPow2"])(minHeight);
        key = ((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF);
    }

    if (!this.texturePool[key])
    {
        this.texturePool[key] = [];
    }

    var renderTexture = this.texturePool[key].pop();

    if (!renderTexture)
    {
        renderTexture = this.createTexture(minWidth, minHeight);
    }

    renderTexture.filterPoolKey = key;
    renderTexture.setResolution(resolution);

    return renderTexture;
};

/**
 * Gets extra texture of the same size as input renderTexture
 *
 * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`
 *
 * @param {PIXI.RenderTexture} input renderTexture from which size and resolution will be copied
 * @param {number} [resolution] override resolution of the renderTexture
 *  It overrides, it does not multiply
 * @returns {PIXI.RenderTexture}
 */
RenderTexturePool.prototype.getFilterTexture = function getFilterTexture (input, resolution)
{
    var filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution);

    filterTexture.filterFrame = input.filterFrame;

    return filterTexture;
};

/**
 * Place a render texture back into the pool.
 * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free
 */
RenderTexturePool.prototype.returnTexture = function returnTexture (renderTexture)
{
    var key = renderTexture.filterPoolKey;

    renderTexture.filterFrame = null;
    this.texturePool[key].push(renderTexture);
};

/**
 * Alias for returnTexture, to be compliant with FilterSystem interface
 * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free
 */
RenderTexturePool.prototype.returnFilterTexture = function returnFilterTexture (renderTexture)
{
    this.returnTexture(renderTexture);
};

/**
 * Clears the pool
 *
 * @param {boolean} [destroyTextures=true] destroy all stored textures
 */
RenderTexturePool.prototype.clear = function clear (destroyTextures)
{
    destroyTextures = destroyTextures !== false;
    if (destroyTextures)
    {
        for (var i in this.texturePool)
        {
            var textures = this.texturePool[i];

            if (textures)
            {
                for (var j = 0; j < textures.length; j++)
                {
                    textures[j].destroy(true);
                }
            }
        }
    }

    this.texturePool = {};
};

/**
 * If screen size was changed, drops all screen-sized textures,
 * sets new screen size, sets `enableFullScreen` to true
 *
 * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`
 *
 * @param {PIXI.ISize} size - Initial size of screen
 */
RenderTexturePool.prototype.setScreenSize = function setScreenSize (size)
{
    if (size.width === this._pixelsWidth
        && size.height === this._pixelsHeight)
    {
        return;
    }

    var screenKey = RenderTexturePool.SCREEN_KEY;
    var textures = this.texturePool[screenKey];

    this.enableFullScreen = size.width > 0 && size.height > 0;

    if (textures)
    {
        for (var j = 0; j < textures.length; j++)
        {
            textures[j].destroy(true);
        }
    }
    this.texturePool[screenKey] = [];

    this._pixelsWidth = size.width;
    this._pixelsHeight = size.height;
};

/**
 * Key that is used to store fullscreen renderTextures in a pool
 *
 * @static
 * @const {string}
 */
RenderTexturePool.SCREEN_KEY = 'screen';

/* eslint-disable max-len */

/**
 * Holds the information for a single attribute structure required to render geometry.
 *
 * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}
 * This can include anything from positions, uvs, normals, colors etc.
 *
 * @class
 * @memberof PIXI
 */
var Attribute = function Attribute(buffer, size, normalized, type, stride, start, instance)
{
    if ( normalized === void 0 ) normalized = false;
    if ( type === void 0 ) type = 5126;

    this.buffer = buffer;
    this.size = size;
    this.normalized = normalized;
    this.type = type;
    this.stride = stride;
    this.start = start;
    this.instance = instance;
};

/**
 * Destroys the Attribute.
 */
Attribute.prototype.destroy = function destroy ()
{
    this.buffer = null;
};

/**
 * Helper function that creates an Attribute based on the information provided
 *
 * @static
 * @param {string} buffer  the id of the buffer that this attribute will look for
 * @param {Number} [size=2] the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
 * @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)
 * @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)
 * @param {Boolean} [normalized=false] should the data be normalized.
 *
 * @returns {PIXI.Attribute} A new {@link PIXI.Attribute} based on the information provided
 */
Attribute.from = function from (buffer, size, normalized, type, stride)
{
    return new Attribute(buffer, size, normalized, type, stride);
};

var UID = 0;
/* eslint-disable max-len */

/**
 * A wrapper for data so that it can be used and uploaded by WebGL
 *
 * @class
 * @memberof PIXI
 */
var Buffer = function Buffer(data, _static, index)
{
    if ( _static === void 0 ) _static = true;
    if ( index === void 0 ) index = false;

    /**
     * The data in the buffer, as a typed array
     *
     * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}
     */
    this.data = data || new Float32Array(1);

    /**
     * A map of renderer IDs to webgl buffer
     *
     * @private
     * @member {object<number, GLBuffer>}
     */
    this._glBuffers = {};

    this._updateID = 0;

    this.index = index;

    this.static = _static;

    this.id = UID++;

    this.disposeRunner = new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('disposeBuffer', 2);
};

// TODO could explore flagging only a partial upload?
/**
 * flags this buffer as requiring an upload to the GPU
 * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView} [data] the data to update in the buffer.
 */
Buffer.prototype.update = function update (data)
{
    this.data = data || this.data;
    this._updateID++;
};

/**
 * disposes WebGL resources that are connected to this geometry
 */
Buffer.prototype.dispose = function dispose ()
{
    this.disposeRunner.run(this, false);
};

/**
 * Destroys the buffer
 */
Buffer.prototype.destroy = function destroy ()
{
    this.dispose();

    this.data = null;
};

/**
 * Helper function that creates a buffer based on an array or TypedArray
 *
 * @static
 * @param {ArrayBufferView | number[]} data the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.
 * @return {PIXI.Buffer} A new Buffer based on the data provided.
 */
Buffer.from = function from (data)
{
    if (data instanceof Array)
    {
        data = new Float32Array(data);
    }

    return new Buffer(data);
};

function getBufferType(array)
{
    if (array.BYTES_PER_ELEMENT === 4)
    {
        if (array instanceof Float32Array)
        {
            return 'Float32Array';
        }
        else if (array instanceof Uint32Array)
        {
            return 'Uint32Array';
        }

        return 'Int32Array';
    }
    else if (array.BYTES_PER_ELEMENT === 2)
    {
        if (array instanceof Uint16Array)
        {
            return 'Uint16Array';
        }
    }
    else if (array.BYTES_PER_ELEMENT === 1)
    {
        if (array instanceof Uint8Array)
        {
            return 'Uint8Array';
        }
    }

    // TODO map out the rest of the array elements!
    return null;
}

/* eslint-disable object-shorthand */
var map = {
    Float32Array: Float32Array,
    Uint32Array: Uint32Array,
    Int32Array: Int32Array,
    Uint8Array: Uint8Array,
};

function interleaveTypedArrays(arrays, sizes)
{
    var outSize = 0;
    var stride = 0;
    var views = {};

    for (var i = 0; i < arrays.length; i++)
    {
        stride += sizes[i];
        outSize += arrays[i].length;
    }

    var buffer = new ArrayBuffer(outSize * 4);

    var out = null;
    var littleOffset = 0;

    for (var i$1 = 0; i$1 < arrays.length; i$1++)
    {
        var size = sizes[i$1];
        var array = arrays[i$1];

        var type = getBufferType(array);

        if (!views[type])
        {
            views[type] = new map[type](buffer);
        }

        out = views[type];

        for (var j = 0; j < array.length; j++)
        {
            var indexStart = ((j / size | 0) * stride) + littleOffset;
            var index = j % size;

            out[indexStart + index] = array[j];
        }

        littleOffset += size;
    }

    return new Float32Array(buffer);
}

var byteSizeMap = { 5126: 4, 5123: 2, 5121: 1 };
var UID$1 = 0;

/* eslint-disable object-shorthand */
var map$1 = {
    Float32Array: Float32Array,
    Uint32Array: Uint32Array,
    Int32Array: Int32Array,
    Uint8Array: Uint8Array,
    Uint16Array: Uint16Array,
};

/* eslint-disable max-len */

/**
 * The Geometry represents a model. It consists of two components:
 * - GeometryStyle - The structure of the model such as the attributes layout
 * - GeometryData - the data of the model - this consists of buffers.
 * This can include anything from positions, uvs, normals, colors etc.
 *
 * Geometry can be defined without passing in a style or data if required (thats how I prefer!)
 *
 * ```js
 * let geometry = new PIXI.Geometry();
 *
 * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);
 * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)
 * geometry.addIndex([0,1,2,1,3,2])
 *
 * ```
 * @class
 * @memberof PIXI
 */
var Geometry = function Geometry(buffers, attributes)
{
    if ( buffers === void 0 ) buffers = [];
    if ( attributes === void 0 ) attributes = {};

    this.buffers = buffers;

    this.indexBuffer = null;

    this.attributes = attributes;

    /**
     * A map of renderer IDs to webgl VAOs
     *
     * @protected
     * @type {object}
     */
    this.glVertexArrayObjects = {};

    this.id = UID$1++;

    this.instanced = false;

    /**
     * Number of instances in this geometry, pass it to `GeometrySystem.draw()`
     * @member {number}
     * @default 1
     */
    this.instanceCount = 1;

    this.disposeRunner = new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('disposeGeometry', 2);

    /**
     * Count of existing (not destroyed) meshes that reference this geometry
     * @member {number}
     */
    this.refCount = 0;
};

/**
*
* Adds an attribute to the geometry
*
* @param {String} id - the name of the attribute (matching up to a shader)
* @param {PIXI.Buffer} [buffer] the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.
* @param {Number} [size=0] the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2
* @param {Boolean} [normalized=false] should the data be normalized.
* @param {Number} [type=PIXI.TYPES.FLOAT] what type of number is the attribute. Check {PIXI.TYPES} to see the ones available
* @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)
* @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)
*
* @return {PIXI.Geometry} returns self, useful for chaining.
*/
Geometry.prototype.addAttribute = function addAttribute (id, buffer, size, normalized, type, stride, start, instance)
{
        if ( normalized === void 0 ) normalized = false;
        if ( instance === void 0 ) instance = false;

    if (!buffer)
    {
        throw new Error('You must pass a buffer when creating an attribute');
    }

    // check if this is a buffer!
    if (!buffer.data)
    {
        // its an array!
        if (buffer instanceof Array)
        {
            buffer = new Float32Array(buffer);
        }

        buffer = new Buffer(buffer);
    }

    var ids = id.split('|');

    if (ids.length > 1)
    {
        for (var i = 0; i < ids.length; i++)
        {
            this.addAttribute(ids[i], buffer, size, normalized, type);
        }

        return this;
    }

    var bufferIndex = this.buffers.indexOf(buffer);

    if (bufferIndex === -1)
    {
        this.buffers.push(buffer);
        bufferIndex = this.buffers.length - 1;
    }

    this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);

    // assuming that if there is instanced data then this will be drawn with instancing!
    this.instanced = this.instanced || instance;

    return this;
};

/**
 * returns the requested attribute
 *
 * @param {String} id  the name of the attribute required
 * @return {PIXI.Attribute} the attribute requested.
 */
Geometry.prototype.getAttribute = function getAttribute (id)
{
    return this.attributes[id];
};

/**
 * returns the requested buffer
 *
 * @param {String} id  the name of the buffer required
 * @return {PIXI.Buffer} the buffer requested.
 */
Geometry.prototype.getBuffer = function getBuffer (id)
{
    return this.buffers[this.getAttribute(id).buffer];
};

/**
*
* Adds an index buffer to the geometry
* The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.
*
* @param {PIXI.Buffer} [buffer] the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.
* @return {PIXI.Geometry} returns self, useful for chaining.
*/
Geometry.prototype.addIndex = function addIndex (buffer)
{
    if (!buffer.data)
    {
        // its an array!
        if (buffer instanceof Array)
        {
            buffer = new Uint16Array(buffer);
        }

        buffer = new Buffer(buffer);
    }

    buffer.index = true;
    this.indexBuffer = buffer;

    if (this.buffers.indexOf(buffer) === -1)
    {
        this.buffers.push(buffer);
    }

    return this;
};

/**
 * returns the index buffer
 *
 * @return {PIXI.Buffer} the index buffer.
 */
Geometry.prototype.getIndex = function getIndex ()
{
    return this.indexBuffer;
};

/**
 * this function modifies the structure so that all current attributes become interleaved into a single buffer
 * This can be useful if your model remains static as it offers a little performance boost
 *
 * @return {PIXI.Geometry} returns self, useful for chaining.
 */
Geometry.prototype.interleave = function interleave ()
{
    // a simple check to see if buffers are already interleaved..
    if (this.buffers.length === 1 || (this.buffers.length === 2 && this.indexBuffer)) { return this; }

    // assume already that no buffers are interleaved
    var arrays = [];
    var sizes = [];
    var interleavedBuffer = new Buffer();
    var i;

    for (i in this.attributes)
    {
        var attribute = this.attributes[i];

        var buffer = this.buffers[attribute.buffer];

        arrays.push(buffer.data);

        sizes.push((attribute.size * byteSizeMap[attribute.type]) / 4);

        attribute.buffer = 0;
    }

    interleavedBuffer.data = interleaveTypedArrays(arrays, sizes);

    for (i = 0; i < this.buffers.length; i++)
    {
        if (this.buffers[i] !== this.indexBuffer)
        {
            this.buffers[i].destroy();
        }
    }

    this.buffers = [interleavedBuffer];

    if (this.indexBuffer)
    {
        this.buffers.push(this.indexBuffer);
    }

    return this;
};

Geometry.prototype.getSize = function getSize ()
{
    for (var i in this.attributes)
    {
        var attribute = this.attributes[i];
        var buffer = this.buffers[attribute.buffer];

        return buffer.data.length / ((attribute.stride / 4) || attribute.size);
    }

    return 0;
};

/**
 * disposes WebGL resources that are connected to this geometry
 */
Geometry.prototype.dispose = function dispose ()
{
    this.disposeRunner.run(this, false);
};

/**
 * Destroys the geometry.
 */
Geometry.prototype.destroy = function destroy ()
{
    this.dispose();

    this.buffers = null;
    this.indexBuffer.destroy();

    this.attributes = null;
};

/**
 * returns a clone of the geometry
 *
 * @returns {PIXI.Geometry} a new clone of this geometry
 */
Geometry.prototype.clone = function clone ()
{
    var geometry = new Geometry();

    for (var i = 0; i < this.buffers.length; i++)
    {
        geometry.buffers[i] = new Buffer(this.buffers[i].data.slice());
    }

    for (var i$1 in this.attributes)
    {
        var attrib = this.attributes[i$1];

        geometry.attributes[i$1] = new Attribute(
            attrib.buffer,
            attrib.size,
            attrib.normalized,
            attrib.type,
            attrib.stride,
            attrib.start,
            attrib.instance
        );
    }

    if (this.indexBuffer)
    {
        geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];
        geometry.indexBuffer.index = true;
    }

    return geometry;
};

/**
 * merges an array of geometries into a new single one
 * geometry attribute styles must match for this operation to work
 *
 * @param {PIXI.Geometry[]} geometries array of geometries to merge
 * @returns {PIXI.Geometry} shiny new geometry!
 */
Geometry.merge = function merge (geometries)
{
    // todo add a geometry check!
    // also a size check.. cant be too big!]

    var geometryOut = new Geometry();

    var arrays = [];
    var sizes = [];
    var offsets = [];

    var geometry;

    // pass one.. get sizes..
    for (var i = 0; i < geometries.length; i++)
    {
        geometry = geometries[i];

        for (var j = 0; j < geometry.buffers.length; j++)
        {
            sizes[j] = sizes[j] || 0;
            sizes[j] += geometry.buffers[j].data.length;
            offsets[j] = 0;
        }
    }

    // build the correct size arrays..
    for (var i$1 = 0; i$1 < geometry.buffers.length; i$1++)
    {
        // TODO types!
        arrays[i$1] = new map$1[getBufferType(geometry.buffers[i$1].data)](sizes[i$1]);
        geometryOut.buffers[i$1] = new Buffer(arrays[i$1]);
    }

    // pass to set data..
    for (var i$2 = 0; i$2 < geometries.length; i$2++)
    {
        geometry = geometries[i$2];

        for (var j$1 = 0; j$1 < geometry.buffers.length; j$1++)
        {
            arrays[j$1].set(geometry.buffers[j$1].data, offsets[j$1]);
            offsets[j$1] += geometry.buffers[j$1].data.length;
        }
    }

    geometryOut.attributes = geometry.attributes;

    if (geometry.indexBuffer)
    {
        geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];
        geometryOut.indexBuffer.index = true;

        var offset = 0;
        var stride = 0;
        var offset2 = 0;
        var bufferIndexToCount = 0;

        // get a buffer
        for (var i$3 = 0; i$3 < geometry.buffers.length; i$3++)
        {
            if (geometry.buffers[i$3] !== geometry.indexBuffer)
            {
                bufferIndexToCount = i$3;
                break;
            }
        }

        // figure out the stride of one buffer..
        for (var i$4 in geometry.attributes)
        {
            var attribute = geometry.attributes[i$4];

            if ((attribute.buffer | 0) === bufferIndexToCount)
            {
                stride += ((attribute.size * byteSizeMap[attribute.type]) / 4);
            }
        }

        // time to off set all indexes..
        for (var i$5 = 0; i$5 < geometries.length; i$5++)
        {
            var indexBufferData = geometries[i$5].indexBuffer.data;

            for (var j$2 = 0; j$2 < indexBufferData.length; j$2++)
            {
                geometryOut.indexBuffer.data[j$2 + offset2] += offset;
            }

            offset += geometry.buffers[bufferIndexToCount].data.length / (stride);
            offset2 += indexBufferData.length;
        }
    }

    return geometryOut;
};

/**
 * Helper class to create a quad
 *
 * @class
 * @memberof PIXI
 */
var Quad = /*@__PURE__*/(function (Geometry) {
    function Quad()
    {
        Geometry.call(this);

        this.addAttribute('aVertexPosition', [
            0, 0,
            1, 0,
            1, 1,
            0, 1 ])
            .addIndex([0, 1, 3, 2]);
    }

    if ( Geometry ) Quad.__proto__ = Geometry;
    Quad.prototype = Object.create( Geometry && Geometry.prototype );
    Quad.prototype.constructor = Quad;

    return Quad;
}(Geometry));

/**
 * Helper class to create a quad with uvs like in v4
 *
 * @class
 * @memberof PIXI
 * @extends PIXI.Geometry
 */
var QuadUv = /*@__PURE__*/(function (Geometry) {
    function QuadUv()
    {
        Geometry.call(this);

        /**
         * An array of vertices
         *
         * @member {Float32Array}
         */
        this.vertices = new Float32Array([
            -1, -1,
            1, -1,
            1, 1,
            -1, 1 ]);

        /**
         * The Uvs of the quad
         *
         * @member {Float32Array}
         */
        this.uvs = new Float32Array([
            0, 0,
            1, 0,
            1, 1,
            0, 1 ]);

        this.vertexBuffer = new Buffer(this.vertices);
        this.uvBuffer = new Buffer(this.uvs);

        this.addAttribute('aVertexPosition', this.vertexBuffer)
            .addAttribute('aTextureCoord', this.uvBuffer)
            .addIndex([0, 1, 2, 0, 2, 3]);
    }

    if ( Geometry ) QuadUv.__proto__ = Geometry;
    QuadUv.prototype = Object.create( Geometry && Geometry.prototype );
    QuadUv.prototype.constructor = QuadUv;

    /**
     * Maps two Rectangle to the quad.
     *
     * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle
     * @param {PIXI.Rectangle} destinationFrame - the second rectangle
     * @return {PIXI.Quad} Returns itself.
     */
    QuadUv.prototype.map = function map (targetTextureFrame, destinationFrame)
    {
        var x = 0; // destinationFrame.x / targetTextureFrame.width;
        var y = 0; // destinationFrame.y / targetTextureFrame.height;

        this.uvs[0] = x;
        this.uvs[1] = y;

        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);
        this.uvs[3] = y;

        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);
        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);

        this.uvs[6] = x;
        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);

        x = destinationFrame.x;
        y = destinationFrame.y;

        this.vertices[0] = x;
        this.vertices[1] = y;

        this.vertices[2] = x + destinationFrame.width;
        this.vertices[3] = y;

        this.vertices[4] = x + destinationFrame.width;
        this.vertices[5] = y + destinationFrame.height;

        this.vertices[6] = x;
        this.vertices[7] = y + destinationFrame.height;

        this.invalidate();

        return this;
    };

    /**
     * legacy upload method, just marks buffers dirty
     * @returns {PIXI.QuadUv} Returns itself.
     */
    QuadUv.prototype.invalidate = function invalidate ()
    {
        this.vertexBuffer._updateID++;
        this.uvBuffer._updateID++;

        return this;
    };

    return QuadUv;
}(Geometry));

var UID$2 = 0;

/**
 * Uniform group holds uniform map and some ID's for work
 *
 * @class
 * @memberof PIXI
 */
var UniformGroup = function UniformGroup(uniforms, _static)
{
    /**
     * uniform values
     * @member {object}
     * @readonly
     */
    this.uniforms = uniforms;

    /**
     * Its a group and not a single uniforms
     * @member {boolean}
     * @readonly
     * @default true
     */
    this.group = true;

    // lets generate this when the shader ?
    this.syncUniforms = {};

    /**
     * dirty version
     * @protected
     * @member {number}
     */
    this.dirtyId = 0;

    /**
     * unique id
     * @protected
     * @member {number}
     */
    this.id = UID$2++;

    /**
     * Uniforms wont be changed after creation
     * @member {boolean}
     */
    this.static = !!_static;
};

UniformGroup.prototype.update = function update ()
{
    this.dirtyId++;
};

UniformGroup.prototype.add = function add (name, uniforms, _static)
{
    this.uniforms[name] = new UniformGroup(uniforms, _static);
};

UniformGroup.from = function from (uniforms, _static)
{
    return new UniformGroup(uniforms, _static);
};

/**
 * System plugin to the renderer to manage filter states.
 *
 * @class
 * @private
 */
var FilterState = function FilterState()
{
    this.renderTexture = null;

    /**
     * Target of the filters
     * We store for case when custom filter wants to know the element it was applied on
     * @member {PIXI.DisplayObject}
     * @private
     */
    this.target = null;

    /**
     * Compatibility with PixiJS v4 filters
     * @member {boolean}
     * @default false
     * @private
     */
    this.legacy = false;

    /**
     * Resolution of filters
     * @member {number}
     * @default 1
     * @private
     */
    this.resolution = 1;

    // next three fields are created only for root
    // re-assigned for everything else

    /**
     * Source frame
     * @member {PIXI.Rectangle}
     * @private
     */
    this.sourceFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();

    /**
     * Destination frame
     * @member {PIXI.Rectangle}
     * @private
     */
    this.destinationFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();

    /**
     * Collection of filters
     * @member {PIXI.Filter[]}
     * @private
     */
    this.filters = [];
};

/**
 * clears the state
 * @private
 */
FilterState.prototype.clear = function clear ()
{
    this.target = null;
    this.filters = null;
    this.renderTexture = null;
};

/**
 * System plugin to the renderer to manage the filters.
 *
 * @class
 * @memberof PIXI.systems
 * @extends PIXI.System
 */
var FilterSystem = /*@__PURE__*/(function (System) {
    function FilterSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * List of filters for the FilterSystem
         * @member {Object[]}
         * @readonly
         */
        this.defaultFilterStack = [{}];

        /**
         * stores a bunch of PO2 textures used for filtering
         * @member {Object}
         */
        this.texturePool = new RenderTexturePool();

        this.texturePool.setScreenSize(renderer.view);

        /**
         * a pool for storing filter states, save us creating new ones each tick
         * @member {Object[]}
         */
        this.statePool = [];

        /**
         * A very simple geometry used when drawing a filter effect to the screen
         * @member {PIXI.Quad}
         */
        this.quad = new Quad();

        /**
         * Quad UVs
         * @member {PIXI.QuadUv}
         */
        this.quadUv = new QuadUv();

        /**
         * Temporary rect for maths
         * @type {PIXI.Rectangle}
         */
        this.tempRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();

        /**
         * Active state
         * @member {object}
         */
        this.activeState = {};

        /**
         * This uniform group is attached to filter uniforms when used
         * @member {PIXI.UniformGroup}
         * @property {PIXI.Rectangle} outputFrame
         * @property {Float32Array} inputSize
         * @property {Float32Array} inputPixel
         * @property {Float32Array} inputClamp
         * @property {Number} resolution
         * @property {Float32Array} filterArea
         * @property {Fload32Array} filterClamp
         */
        this.globalUniforms = new UniformGroup({
            outputFrame: this.tempRect,
            inputSize: new Float32Array(4),
            inputPixel: new Float32Array(4),
            inputClamp: new Float32Array(4),
            resolution: 1,

            // legacy variables
            filterArea: new Float32Array(4),
            filterClamp: new Float32Array(4),
        }, true);

        this._pixelsWidth = renderer.view.width;
        this._pixelsHeight = renderer.view.height;
    }

    if ( System ) FilterSystem.__proto__ = System;
    FilterSystem.prototype = Object.create( System && System.prototype );
    FilterSystem.prototype.constructor = FilterSystem;

    /**
     * Adds a new filter to the System.
     *
     * @param {PIXI.DisplayObject} target - The target of the filter to render.
     * @param {PIXI.Filter[]} filters - The filters to apply.
     */
    FilterSystem.prototype.push = function push (target, filters)
    {
        var renderer = this.renderer;
        var filterStack = this.defaultFilterStack;
        var state = this.statePool.pop() || new FilterState();

        var resolution = filters[0].resolution;
        var padding = filters[0].padding;
        var autoFit = filters[0].autoFit;
        var legacy = filters[0].legacy;

        for (var i = 1; i < filters.length; i++)
        {
            var filter =  filters[i];

            // lets use the lowest resolution..
            resolution = Math.min(resolution, filter.resolution);
            // and the largest amount of padding!
            padding = Math.max(padding, filter.padding);
            // only auto fit if all filters are autofit
            autoFit = autoFit || filter.autoFit;

            legacy = legacy || filter.legacy;
        }

        if (filterStack.length === 1)
        {
            this.defaultFilterStack[0].renderTexture = renderer.renderTexture.current;
        }

        filterStack.push(state);

        state.resolution = resolution;

        state.legacy = legacy;

        state.target = target;

        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));

        state.sourceFrame.pad(padding);
        if (autoFit)
        {
            state.sourceFrame.fit(this.renderer.renderTexture.sourceFrame);
        }

        // round to whole number based on resolution
        state.sourceFrame.ceil(resolution);

        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height, resolution);
        state.filters = filters;

        state.destinationFrame.width = state.renderTexture.width;
        state.destinationFrame.height = state.renderTexture.height;

        state.renderTexture.filterFrame = state.sourceFrame;

        renderer.renderTexture.bind(state.renderTexture, state.sourceFrame);// /, state.destinationFrame);
        renderer.renderTexture.clear();
    };

    /**
     * Pops off the filter and applies it.
     *
     */
    FilterSystem.prototype.pop = function pop ()
    {
        var filterStack = this.defaultFilterStack;
        var state = filterStack.pop();
        var filters = state.filters;

        this.activeState = state;

        var globalUniforms = this.globalUniforms.uniforms;

        globalUniforms.outputFrame = state.sourceFrame;
        globalUniforms.resolution = state.resolution;

        var inputSize = globalUniforms.inputSize;
        var inputPixel = globalUniforms.inputPixel;
        var inputClamp = globalUniforms.inputClamp;

        inputSize[0] = state.destinationFrame.width;
        inputSize[1] = state.destinationFrame.height;
        inputSize[2] = 1.0 / inputSize[0];
        inputSize[3] = 1.0 / inputSize[1];

        inputPixel[0] = inputSize[0] * state.resolution;
        inputPixel[1] = inputSize[1] * state.resolution;
        inputPixel[2] = 1.0 / inputPixel[0];
        inputPixel[3] = 1.0 / inputPixel[1];

        inputClamp[0] = 0.5 * inputPixel[2];
        inputClamp[1] = 0.5 * inputPixel[3];
        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);
        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);

        // only update the rect if its legacy..
        if (state.legacy)
        {
            var filterArea = globalUniforms.filterArea;

            filterArea[0] = state.destinationFrame.width;
            filterArea[1] = state.destinationFrame.height;
            filterArea[2] = state.sourceFrame.x;
            filterArea[3] = state.sourceFrame.y;

            globalUniforms.filterClamp = globalUniforms.inputClamp;
        }

        this.globalUniforms.update();

        var lastState = filterStack[filterStack.length - 1];

        if (filters.length === 1)
        {
            filters[0].apply(this, state.renderTexture, lastState.renderTexture, false, state);

            this.returnFilterTexture(state.renderTexture);
        }
        else
        {
            var flip = state.renderTexture;
            var flop = this.getOptimalFilterTexture(
                flip.width,
                flip.height,
                state.resolution
            );

            flop.filterFrame = flip.filterFrame;

            var i = 0;

            for (i = 0; i < filters.length - 1; ++i)
            {
                filters[i].apply(this, flip, flop, true, state);

                var t = flip;

                flip = flop;
                flop = t;
            }

            filters[i].apply(this, flip, lastState.renderTexture, false, state);

            this.returnFilterTexture(flip);
            this.returnFilterTexture(flop);
        }

        state.clear();
        this.statePool.push(state);
    };

    /**
     * Draws a filter.
     *
     * @param {PIXI.Filter} filter - The filter to draw.
     * @param {PIXI.RenderTexture} input - The input render target.
     * @param {PIXI.RenderTexture} output - The target to output to.
     * @param {boolean} clear - Should the output be cleared before rendering to it
     */
    FilterSystem.prototype.applyFilter = function applyFilter (filter, input, output, clear)
    {
        var renderer = this.renderer;

        renderer.renderTexture.bind(output, output ? output.filterFrame : null);

        if (clear)
        {
            // gl.disable(gl.SCISSOR_TEST);
            renderer.renderTexture.clear();
            // gl.enable(gl.SCISSOR_TEST);
        }

        // set the uniforms..
        filter.uniforms.uSampler = input;
        filter.uniforms.filterGlobals = this.globalUniforms;

        // TODO make it so that the order of this does not matter..
        // because it does at the moment cos of global uniforms.
        // they need to get resynced

        renderer.state.set(filter.state);
        renderer.shader.bind(filter);

        if (filter.legacy)
        {
            this.quadUv.map(input._frame, input.filterFrame);

            renderer.geometry.bind(this.quadUv);
            renderer.geometry.draw(_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["DRAW_MODES"].TRIANGLES);
        }
        else
        {
            renderer.geometry.bind(this.quad);
            renderer.geometry.draw(_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["DRAW_MODES"].TRIANGLE_STRIP);
        }
    };

    /**
     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.
     *
     * Use `outputMatrix * vTextureCoord` in the shader.
     *
     * @param {PIXI.Matrix} outputMatrix - The matrix to output to.
     * @param {PIXI.Sprite} sprite - The sprite to map to.
     * @return {PIXI.Matrix} The mapped matrix.
     */
    FilterSystem.prototype.calculateSpriteMatrix = function calculateSpriteMatrix (outputMatrix, sprite)
    {
        var ref = this.activeState;
        var sourceFrame = ref.sourceFrame;
        var destinationFrame = ref.destinationFrame;
        var ref$1 = sprite._texture;
        var orig = ref$1.orig;
        var mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0,
            destinationFrame.height, sourceFrame.x, sourceFrame.y);
        var worldTransform = sprite.worldTransform.copyTo(_pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"].TEMP_MATRIX);

        worldTransform.invert();
        mappedMatrix.prepend(worldTransform);
        mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);
        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);

        return mappedMatrix;
    };

    /**
     * Destroys this Filter System.
     */
    FilterSystem.prototype.destroy = function destroy ()
    {
        // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem
        this.texturePool.clear(false);
    };

    /**
     * Gets a Power-of-Two render texture or fullScreen texture
     *
     * @protected
     * @param {number} minWidth - The minimum width of the render texture in real pixels.
     * @param {number} minHeight - The minimum height of the render texture in real pixels.
     * @param {number} [resolution=1] - The resolution of the render texture.
     * @return {PIXI.RenderTexture} The new render texture.
     */
    FilterSystem.prototype.getOptimalFilterTexture = function getOptimalFilterTexture (minWidth, minHeight, resolution)
    {
        if ( resolution === void 0 ) resolution = 1;

        return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution);
    };

    /**
     * Gets extra render texture to use inside current filter
     * To be compliant with older filters, you can use params in any order
     *
     * @param {PIXI.RenderTexture} [input] renderTexture from which size and resolution will be copied
     * @param {number} [resolution] override resolution of the renderTexture
     * @returns {PIXI.RenderTexture}
     */
    FilterSystem.prototype.getFilterTexture = function getFilterTexture (input, resolution)
    {
        if (typeof input === 'number')
        {
            var swap = input;

            input = resolution;
            resolution = swap;
        }

        input = input || this.activeState.renderTexture;

        var filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution);

        filterTexture.filterFrame = input.filterFrame;

        return filterTexture;
    };

    /**
     * Frees a render texture back into the pool.
     *
     * @param {PIXI.RenderTexture} renderTexture - The renderTarget to free
     */
    FilterSystem.prototype.returnFilterTexture = function returnFilterTexture (renderTexture)
    {
        this.texturePool.returnTexture(renderTexture);
    };

    /**
     * Empties the texture pool.
     */
    FilterSystem.prototype.emptyPool = function emptyPool ()
    {
        this.texturePool.clear(true);
    };

    /**
     * calls `texturePool.resize()`, affects fullScreen renderTextures
     */
    FilterSystem.prototype.resize = function resize ()
    {
        this.texturePool.setScreenSize(this.renderer.view);
    };

    return FilterSystem;
}(System));

/**
 * Base for a common object renderer that can be used as a
 * system renderer plugin.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI
 */
var ObjectRenderer = function ObjectRenderer(renderer)
{
    /**
     * The renderer this manager works for.
     *
     * @member {PIXI.Renderer}
     */
    this.renderer = renderer;
};

/**
 * Stub method that should be used to empty the current
 * batch by rendering objects now.
 */
ObjectRenderer.prototype.flush = function flush ()
{
    // flush!
};

/**
 * Generic destruction method that frees all resources. This
 * should be called by subclasses.
 */
ObjectRenderer.prototype.destroy = function destroy ()
{
    this.renderer = null;
};

/**
 * Stub method that initializes any state required before
 * rendering starts. It is different from the `prerender`
 * signal, which occurs every frame, in that it is called
 * whenever an object requests _this_ renderer specifically.
 */
ObjectRenderer.prototype.start = function start ()
{
    // set the shader..
};

/**
 * Stops the renderer. It should free up any state and
 * become dormant.
 */
ObjectRenderer.prototype.stop = function stop ()
{
    this.flush();
};

/**
 * Keeps the object to render. It doesn't have to be
 * rendered immediately.
 *
 * @param {PIXI.DisplayObject} object - The object to render.
 */
ObjectRenderer.prototype.render = function render (object) // eslint-disable-line no-unused-vars
{
    // render the object
};

/**
 * System plugin to the renderer to manage batching.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var BatchSystem = /*@__PURE__*/(function (System) {
    function BatchSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * An empty renderer.
         *
         * @member {PIXI.ObjectRenderer}
         */
        this.emptyRenderer = new ObjectRenderer(renderer);

        /**
         * The currently active ObjectRenderer.
         *
         * @member {PIXI.ObjectRenderer}
         */
        this.currentRenderer = this.emptyRenderer;
    }

    if ( System ) BatchSystem.__proto__ = System;
    BatchSystem.prototype = Object.create( System && System.prototype );
    BatchSystem.prototype.constructor = BatchSystem;

    /**
     * Changes the current renderer to the one given in parameter
     *
     * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.
     */
    BatchSystem.prototype.setObjectRenderer = function setObjectRenderer (objectRenderer)
    {
        if (this.currentRenderer === objectRenderer)
        {
            return;
        }

        this.currentRenderer.stop();
        this.currentRenderer = objectRenderer;

        this.currentRenderer.start();
    };

    /**
     * This should be called if you wish to do some custom rendering
     * It will basically render anything that may be batched up such as sprites
     */
    BatchSystem.prototype.flush = function flush ()
    {
        this.setObjectRenderer(this.emptyRenderer);
    };

    /**
     * Reset the system to an empty renderer
     */
    BatchSystem.prototype.reset = function reset ()
    {
        this.setObjectRenderer(this.emptyRenderer);
    };

    return BatchSystem;
}(System));

/**
 * The maximum support for using WebGL. If a device does not
 * support WebGL version, for instance WebGL 2, it will still
 * attempt to fallback support to WebGL 1. If you want to
 * explicitly remove feature support to target a more stable
 * baseline, prefer a lower environment.
 *
 * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}
 * we disable webgl2 by default for all non-apple mobile devices.
 *
 * @static
 * @name PREFER_ENV
 * @memberof PIXI.settings
 * @type {number}
 * @default PIXI.ENV.WEBGL2
 */
_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PREFER_ENV = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["isMobile"].any ? _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL : _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL2;

var CONTEXT_UID = 0;

/**
 * System plugin to the renderer to manage the context.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var ContextSystem = /*@__PURE__*/(function (System) {
    function ContextSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * Either 1 or 2 to reflect the WebGL version being used
         * @member {number}
         * @readonly
         */
        this.webGLVersion = 1;

        /**
         * Extensions being used
         * @member {object}
         * @readonly
         * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension
         * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension
         * @property {OES_texture_float} floatTexture - WebGL v1 extension
         * @property {WEBGL_lose_context} loseContext - WebGL v1 extension
         * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension
         * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension
         */
        this.extensions = {};

        // Bind functions
        this.handleContextLost = this.handleContextLost.bind(this);
        this.handleContextRestored = this.handleContextRestored.bind(this);

        renderer.view.addEventListener('webglcontextlost', this.handleContextLost, false);
        renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);
    }

    if ( System ) ContextSystem.__proto__ = System;
    ContextSystem.prototype = Object.create( System && System.prototype );
    ContextSystem.prototype.constructor = ContextSystem;

    var prototypeAccessors = { isLost: { configurable: true } };

    /**
     * `true` if the context is lost
     * @member {boolean}
     * @readonly
     */
    prototypeAccessors.isLost.get = function ()
    {
        return (!this.gl || this.gl.isContextLost());
    };

    /**
     * Handle the context change event
     * @param {WebGLRenderingContext} gl new webgl context
     */
    ContextSystem.prototype.contextChange = function contextChange (gl)
    {
        this.gl = gl;
        this.renderer.gl = gl;
        this.renderer.CONTEXT_UID = CONTEXT_UID++;

        // restore a context if it was previously lost
        if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context'))
        {
            gl.getExtension('WEBGL_lose_context').restoreContext();
        }
    };

    /**
     * Initialize the context
     *
     * @protected
     * @param {WebGLRenderingContext} gl - WebGL context
     */
    ContextSystem.prototype.initFromContext = function initFromContext (gl)
    {
        this.gl = gl;
        this.validateContext(gl);
        this.renderer.gl = gl;
        this.renderer.CONTEXT_UID = CONTEXT_UID++;
        this.renderer.runners.contextChange.run(gl);
    };

    /**
     * Initialize from context options
     *
     * @protected
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
     * @param {object} options - context attributes
     */
    ContextSystem.prototype.initFromOptions = function initFromOptions (options)
    {
        var gl = this.createContext(this.renderer.view, options);

        this.initFromContext(gl);
    };

    /**
     * Helper class to create a WebGL Context
     *
     * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from
     * @param options {object} An options object that gets passed in to the canvas element containing the context attributes
     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext
     * @return {WebGLRenderingContext} the WebGL context
     */
    ContextSystem.prototype.createContext = function createContext (canvas, options)
    {
        var gl;

        if (_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PREFER_ENV >= _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL2)
        {
            gl = canvas.getContext('webgl2', options);
        }

        if (gl)
        {
            this.webGLVersion = 2;
        }
        else
        {
            this.webGLVersion = 1;

            gl = canvas.getContext('webgl', options)
            || canvas.getContext('experimental-webgl', options);

            if (!gl)
            {
                // fail, not able to get a context
                throw new Error('This browser does not support WebGL. Try using the canvas renderer');
            }
        }

        this.gl = gl;

        this.getExtensions();

        return gl;
    };

    /**
     * Auto-populate the extensions
     *
     * @protected
     */
    ContextSystem.prototype.getExtensions = function getExtensions ()
    {
        // time to set up default extensions that Pixi uses.
        var ref = this;
        var gl = ref.gl;

        if (this.webGLVersion === 1)
        {
            Object.assign(this.extensions, {
                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),
                depthTexture: gl.getExtension('WEBKIT_WEBGL_depth_texture'),
                loseContext: gl.getExtension('WEBGL_lose_context'),
                vertexArrayObject: gl.getExtension('OES_vertex_array_object')
                    || gl.getExtension('MOZ_OES_vertex_array_object')
                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),
                anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),
                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),
                // Floats and half-floats
                floatTexture: gl.getExtension('OES_texture_float'),
                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),
                textureHalfFloat: gl.getExtension('OES_texture_half_float'),
                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),
            });
        }
        else if (this.webGLVersion === 2)
        {
            Object.assign(this.extensions, {
                anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),
                // Floats and half-floats
                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),
                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),
            });
        }
    };

    /**
     * Handles a lost webgl context
     *
     * @protected
     * @param {WebGLContextEvent} event - The context lost event.
     */
    ContextSystem.prototype.handleContextLost = function handleContextLost (event)
    {
        event.preventDefault();
    };

    /**
     * Handles a restored webgl context
     *
     * @protected
     */
    ContextSystem.prototype.handleContextRestored = function handleContextRestored ()
    {
        this.renderer.runners.contextChange.run(this.gl);
    };

    ContextSystem.prototype.destroy = function destroy ()
    {
        var view = this.renderer.view;

        // remove listeners
        view.removeEventListener('webglcontextlost', this.handleContextLost);
        view.removeEventListener('webglcontextrestored', this.handleContextRestored);

        this.gl.useProgram(null);

        if (this.extensions.loseContext)
        {
            this.extensions.loseContext.loseContext();
        }
    };

    /**
     * Handle the post-render runner event
     *
     * @protected
     */
    ContextSystem.prototype.postrender = function postrender ()
    {
        this.gl.flush();
    };

    /**
     * Validate context
     *
     * @protected
     * @param {WebGLRenderingContext} gl - Render context
     */
    ContextSystem.prototype.validateContext = function validateContext (gl)
    {
        var attributes = gl.getContextAttributes();

        // this is going to be fairly simple for now.. but at least we have room to grow!
        if (!attributes.stencil)
        {
            /* eslint-disable max-len */

            /* eslint-disable no-console */
            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');
            /* eslint-enable no-console */

            /* eslint-enable max-len */
        }
    };

    Object.defineProperties( ContextSystem.prototype, prototypeAccessors );

    return ContextSystem;
}(System));

/**
 * System plugin to the renderer to manage framebuffers.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var FramebufferSystem = /*@__PURE__*/(function (System) {
    function FramebufferSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * A list of managed framebuffers
         * @member {PIXI.Framebuffer[]}
         * @readonly
         */
        this.managedFramebuffers = [];

        /**
         * Framebuffer value that shows that we don't know what is bound
         * @member {Framebuffer}
         * @readonly
         */
        this.unknownFramebuffer = new Framebuffer(10, 10);
    }

    if ( System ) FramebufferSystem.__proto__ = System;
    FramebufferSystem.prototype = Object.create( System && System.prototype );
    FramebufferSystem.prototype.constructor = FramebufferSystem;

    var prototypeAccessors = { size: { configurable: true } };

    /**
     * Sets up the renderer context and necessary buffers.
     */
    FramebufferSystem.prototype.contextChange = function contextChange ()
    {
        var gl = this.gl = this.renderer.gl;

        this.CONTEXT_UID = this.renderer.CONTEXT_UID;
        this.current = this.unknownFramebuffer;
        this.viewport = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();
        this.hasMRT = true;
        this.writeDepthTexture = true;

        this.disposeAll(true);

        // webgl2
        if (this.renderer.context.webGLVersion === 1)
        {
            // webgl 1!
            var nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;
            var nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;

            if (_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PREFER_ENV === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL_LEGACY)
            {
                nativeDrawBuffersExtension = null;
                nativeDepthTextureExtension = null;
            }

            if (nativeDrawBuffersExtension)
            {
                gl.drawBuffers = function (activeTextures) { return nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures); };
            }
            else
            {
                this.hasMRT = false;
                gl.drawBuffers = function () {
                    // empty
                };
            }

            if (!nativeDepthTextureExtension)
            {
                this.writeDepthTexture = false;
            }
        }
    };

    /**
     * Bind a framebuffer
     *
     * @param {PIXI.Framebuffer} framebuffer
     * @param {PIXI.Rectangle} [frame] frame, default is framebuffer size
     */
    FramebufferSystem.prototype.bind = function bind (framebuffer, frame)
    {
        var ref = this;
        var gl = ref.gl;

        if (framebuffer)
        {
            // TODO caching layer!

            var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);

            if (this.current !== framebuffer)
            {
                this.current = framebuffer;
                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);
            }
            // make sure all textures are unbound..

            // now check for updates...
            if (fbo.dirtyId !== framebuffer.dirtyId)
            {
                fbo.dirtyId = framebuffer.dirtyId;

                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)
                {
                    fbo.dirtyFormat = framebuffer.dirtyFormat;
                    this.updateFramebuffer(framebuffer);
                }
                else if (fbo.dirtySize !== framebuffer.dirtySize)
                {
                    fbo.dirtySize = framebuffer.dirtySize;
                    this.resizeFramebuffer(framebuffer);
                }
            }

            for (var i = 0; i < framebuffer.colorTextures.length; i++)
            {
                if (framebuffer.colorTextures[i].texturePart)
                {
                    this.renderer.texture.unbind(framebuffer.colorTextures[i].texture);
                }
                else
                {
                    this.renderer.texture.unbind(framebuffer.colorTextures[i]);
                }
            }

            if (framebuffer.depthTexture)
            {
                this.renderer.texture.unbind(framebuffer.depthTexture);
            }

            if (frame)
            {
                this.setViewport(frame.x, frame.y, frame.width, frame.height);
            }
            else
            {
                this.setViewport(0, 0, framebuffer.width, framebuffer.height);
            }
        }
        else
        {
            if (this.current)
            {
                this.current = null;
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            }

            if (frame)
            {
                this.setViewport(frame.x, frame.y, frame.width, frame.height);
            }
            else
            {
                this.setViewport(0, 0, this.renderer.width, this.renderer.height);
            }
        }
    };

    /**
     * Set the WebGLRenderingContext's viewport.
     *
     * @param {Number} x - X position of viewport
     * @param {Number} y - Y position of viewport
     * @param {Number} width - Width of viewport
     * @param {Number} height - Height of viewport
     */
    FramebufferSystem.prototype.setViewport = function setViewport (x, y, width, height)
    {
        var v = this.viewport;

        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)
        {
            v.x = x;
            v.y = y;
            v.width = width;
            v.height = height;

            this.gl.viewport(x, y, width, height);
        }
    };

    /**
     * Get the size of the current width and height. Returns object with `width` and `height` values.
     *
     * @member {object}
     * @readonly
     */
    prototypeAccessors.size.get = function ()
    {
        if (this.current)
        {
            // TODO store temp
            return { x: 0, y: 0, width: this.current.width, height: this.current.height };
        }

        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };
    };

    /**
     * Clear the color of the context
     *
     * @param {Number} r - Red value from 0 to 1
     * @param {Number} g - Green value from 0 to 1
     * @param {Number} b - Blue value from 0 to 1
     * @param {Number} a - Alpha value from 0 to 1
     */
    FramebufferSystem.prototype.clear = function clear (r, g, b, a)
    {
        var ref = this;
        var gl = ref.gl;

        // TODO clear color can be set only one right?
        gl.clearColor(r, g, b, a);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    };

    /**
     * Initialize framebuffer
     *
     * @protected
     * @param {PIXI.Framebuffer} framebuffer
     */
    FramebufferSystem.prototype.initFramebuffer = function initFramebuffer (framebuffer)
    {
        var ref = this;
        var gl = ref.gl;

        // TODO - make this a class?
        var fbo = {
            framebuffer: gl.createFramebuffer(),
            stencil: null,
            dirtyId: 0,
            dirtyFormat: 0,
            dirtySize: 0,
        };

        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;

        this.managedFramebuffers.push(framebuffer);
        framebuffer.disposeRunner.add(this);

        return fbo;
    };

    /**
     * Resize the framebuffer
     *
     * @protected
     * @param {PIXI.Framebuffer} framebuffer
     */
    FramebufferSystem.prototype.resizeFramebuffer = function resizeFramebuffer (framebuffer)
    {
        var ref = this;
        var gl = ref.gl;

        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];

        if (fbo.stencil)
        {
            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);
        }

        var colorTextures = framebuffer.colorTextures;

        for (var i = 0; i < colorTextures.length; i++)
        {
            this.renderer.texture.bind(colorTextures[i], 0);
        }

        if (framebuffer.depthTexture)
        {
            this.renderer.texture.bind(framebuffer.depthTexture, 0);
        }
    };

    /**
     * Update the framebuffer
     *
     * @protected
     * @param {PIXI.Framebuffer} framebuffer
     */
    FramebufferSystem.prototype.updateFramebuffer = function updateFramebuffer (framebuffer)
    {
        var ref = this;
        var gl = ref.gl;

        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];

        // bind the color texture
        var colorTextures = framebuffer.colorTextures;

        var count = colorTextures.length;

        if (!gl.drawBuffers)
        {
            count = Math.min(count, 1);
        }

        var activeTextures = [];

        for (var i = 0; i < count; i++)
        {
            var texture = framebuffer.colorTextures[i];

            if (texture.texturePart)
            {
                this.renderer.texture.bind(texture.texture, 0);

                gl.framebufferTexture2D(gl.FRAMEBUFFER,
                    gl.COLOR_ATTACHMENT0 + i,
                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X + texture.side,
                    texture.texture._glTextures[this.CONTEXT_UID].texture,
                    0);
            }
            else
            {
                this.renderer.texture.bind(texture, 0);

                gl.framebufferTexture2D(gl.FRAMEBUFFER,
                    gl.COLOR_ATTACHMENT0 + i,
                    gl.TEXTURE_2D,
                    texture._glTextures[this.CONTEXT_UID].texture,
                    0);
            }

            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);
        }

        if (activeTextures.length > 1)
        {
            gl.drawBuffers(activeTextures);
        }

        if (framebuffer.depthTexture)
        {
            var writeDepthTexture = this.writeDepthTexture;

            if (writeDepthTexture)
            {
                var depthTexture = framebuffer.depthTexture;

                this.renderer.texture.bind(depthTexture, 0);

                gl.framebufferTexture2D(gl.FRAMEBUFFER,
                    gl.DEPTH_ATTACHMENT,
                    gl.TEXTURE_2D,
                    depthTexture._glTextures[this.CONTEXT_UID].texture,
                    0);
            }
        }

        if (!fbo.stencil && (framebuffer.stencil || framebuffer.depth))
        {
            fbo.stencil = gl.createRenderbuffer();

            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);

            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);
            // TODO.. this is depth AND stencil?
            if (!framebuffer.depthTexture)
            { // you can't have both, so one should take priority if enabled
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);
            }
            // fbo.enableStencil();
        }
    };

    /**
     * Disposes framebuffer
     * @param {PIXI.Framebuffer} framebuffer framebuffer that has to be disposed of
     * @param {boolean} [contextLost=false] If context was lost, we suppress all delete function calls
     */
    FramebufferSystem.prototype.disposeFramebuffer = function disposeFramebuffer (framebuffer, contextLost)
    {
        var fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];
        var gl = this.gl;

        if (!fbo)
        {
            return;
        }

        delete framebuffer.glFramebuffers[this.CONTEXT_UID];

        var index = this.managedFramebuffers.indexOf(framebuffer);

        if (index >= 0)
        {
            this.managedFramebuffers.splice(index, 1);
        }

        framebuffer.disposeRunner.remove(this);

        if (!contextLost)
        {
            gl.deleteFramebuffer(fbo.framebuffer);
            if (fbo.stencil)
            {
                gl.deleteRenderbuffer(fbo.stencil);
            }
        }
    };

    /**
     * Disposes all framebuffers, but not textures bound to them
     * @param {boolean} [contextLost=false] If context was lost, we suppress all delete function calls
     */
    FramebufferSystem.prototype.disposeAll = function disposeAll (contextLost)
    {
        var list = this.managedFramebuffers;

        this.managedFramebuffers = [];

        for (var i = 0; i < list.length; i++)
        {
            this.disposeFramebuffer(list[i], contextLost);
        }
    };

    /**
     * resets framebuffer stored state, binds screen framebuffer
     *
     * should be called before renderTexture reset()
     */
    FramebufferSystem.prototype.reset = function reset ()
    {
        this.current = this.unknownFramebuffer;
        this.viewport = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();
    };

    Object.defineProperties( FramebufferSystem.prototype, prototypeAccessors );

    return FramebufferSystem;
}(System));

var GLBuffer = function GLBuffer(buffer)
{
    this.buffer = buffer;
    this.updateID = -1;
    this.byteLength = -1;
    this.refCount = 0;
};

var byteSizeMap$1 = { 5126: 4, 5123: 2, 5121: 1 };

/**
 * System plugin to the renderer to manage geometry.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var GeometrySystem = /*@__PURE__*/(function (System) {
    function GeometrySystem(renderer)
    {
        System.call(this, renderer);

        this._activeGeometry = null;
        this._activeVao = null;

        /**
         * `true` if we has `*_vertex_array_object` extension
         * @member {boolean}
         * @readonly
         */
        this.hasVao = true;

        /**
         * `true` if has `ANGLE_instanced_arrays` extension
         * @member {boolean}
         * @readonly
         */
        this.hasInstance = true;

        /**
         * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`
         * @member {boolean}
         * @readonly
         */
        this.canUseUInt32ElementIndex = false;

        /**
         * A cache of currently bound buffer,
         * contains only two members with keys ARRAY_BUFFER and ELEMENT_ARRAY_BUFFER
         * @member {Object.<number, PIXI.Buffer>}
         * @readonly
         */
        this.boundBuffers = {};

        /**
         * Cache for all geometries by id, used in case renderer gets destroyed or for profiling
         * @member {object}
         * @readonly
         */
        this.managedGeometries = {};

        /**
         * Cache for all buffers by id, used in case renderer gets destroyed or for profiling
         * @member {object}
         * @readonly
         */
        this.managedBuffers = {};
    }

    if ( System ) GeometrySystem.__proto__ = System;
    GeometrySystem.prototype = Object.create( System && System.prototype );
    GeometrySystem.prototype.constructor = GeometrySystem;

    /**
     * Sets up the renderer context and necessary buffers.
     */
    GeometrySystem.prototype.contextChange = function contextChange ()
    {
        this.disposeAll(true);

        var gl = this.gl = this.renderer.gl;
        var context = this.renderer.context;

        this.CONTEXT_UID = this.renderer.CONTEXT_UID;

        // webgl2
        if (!gl.createVertexArray)
        {
            // webgl 1!
            var nativeVaoExtension = this.renderer.context.extensions.vertexArrayObject;

            if (_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PREFER_ENV === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL_LEGACY)
            {
                nativeVaoExtension = null;
            }

            if (nativeVaoExtension)
            {
                gl.createVertexArray = function () { return nativeVaoExtension.createVertexArrayOES(); };

                gl.bindVertexArray = function (vao) { return nativeVaoExtension.bindVertexArrayOES(vao); };

                gl.deleteVertexArray = function (vao) { return nativeVaoExtension.deleteVertexArrayOES(vao); };
            }
            else
            {
                this.hasVao = false;
                gl.createVertexArray = function () {
                    // empty
                };

                gl.bindVertexArray = function () {
                    // empty
                };

                gl.deleteVertexArray = function () {
                    // empty
                };
            }
        }

        if (!gl.vertexAttribDivisor)
        {
            var instanceExt = gl.getExtension('ANGLE_instanced_arrays');

            if (instanceExt)
            {
                gl.vertexAttribDivisor = function (a, b) { return instanceExt.vertexAttribDivisorANGLE(a, b); };

                gl.drawElementsInstanced = function (a, b, c, d, e) { return instanceExt.drawElementsInstancedANGLE(a, b, c, d, e); };

                gl.drawArraysInstanced = function (a, b, c, d) { return instanceExt.drawArraysInstancedANGLE(a, b, c, d); };
            }
            else
            {
                this.hasInstance = false;
            }
        }

        this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;
    };

    /**
     * Binds geometry so that is can be drawn. Creating a Vao if required
     *
     * @param {PIXI.Geometry} geometry instance of geometry to bind
     * @param {PIXI.Shader} [shader] instance of shader to use vao for
     */
    GeometrySystem.prototype.bind = function bind (geometry, shader)
    {
        shader = shader || this.renderer.shader.shader;

        var ref = this;
        var gl = ref.gl;

        // not sure the best way to address this..
        // currently different shaders require different VAOs for the same geometry
        // Still mulling over the best way to solve this one..
        // will likely need to modify the shader attribute locations at run time!
        var vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];

        if (!vaos)
        {
            this.managedGeometries[geometry.id] = geometry;
            geometry.disposeRunner.add(this);
            geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {};
        }

        var vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader.program);

        this._activeGeometry = geometry;

        if (this._activeVao !== vao)
        {
            this._activeVao = vao;

            if (this.hasVao)
            {
                gl.bindVertexArray(vao);
            }
            else
            {
                this.activateVao(geometry, shader.program);
            }
        }

        // TODO - optimise later!
        // don't need to loop through if nothing changed!
        // maybe look to add an 'autoupdate' to geometry?
        this.updateBuffers();
    };

    /**
     * Reset and unbind any active VAO and geometry
     */
    GeometrySystem.prototype.reset = function reset ()
    {
        this.unbind();
    };

    /**
     * Update buffers
     * @protected
     */
    GeometrySystem.prototype.updateBuffers = function updateBuffers ()
    {
        var geometry = this._activeGeometry;
        var ref = this;
        var gl = ref.gl;

        for (var i = 0; i < geometry.buffers.length; i++)
        {
            var buffer = geometry.buffers[i];

            var glBuffer = buffer._glBuffers[this.CONTEXT_UID];

            if (buffer._updateID !== glBuffer.updateID)
            {
                glBuffer.updateID = buffer._updateID;

                // TODO can cache this on buffer! maybe added a getter / setter?
                var type = buffer.index ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;

                // TODO this could change if the VAO changes...
                // need to come up with a better way to cache..
                // if (this.boundBuffers[type] !== glBuffer)
                // {
                // this.boundBuffers[type] = glBuffer;
                gl.bindBuffer(type, glBuffer.buffer);
                // }

                this._boundBuffer = glBuffer;

                if (glBuffer.byteLength >= buffer.data.byteLength)
                {
                    // offset is always zero for now!
                    gl.bufferSubData(type, 0, buffer.data);
                }
                else
                {
                    var drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;

                    glBuffer.byteLength = buffer.data.byteLength;
                    gl.bufferData(type, buffer.data, drawType);
                }
            }
        }
    };

    /**
     * Check compability between a geometry and a program
     * @protected
     * @param {PIXI.Geometry} geometry - Geometry instance
     * @param {PIXI.Program} program - Program instance
     */
    GeometrySystem.prototype.checkCompatibility = function checkCompatibility (geometry, program)
    {
        // geometry must have at least all the attributes that the shader requires.
        var geometryAttributes = geometry.attributes;
        var shaderAttributes = program.attributeData;

        for (var j in shaderAttributes)
        {
            if (!geometryAttributes[j])
            {
                throw new Error(("shader and geometry incompatible, geometry missing the \"" + j + "\" attribute"));
            }
        }
    };

    /**
     * Takes a geometry and program and generates a unique signature for them.
     *
     * @param {PIXI.Geometry} geometry to get signature from
     * @param {PIXI.Program} program to test geometry against
     * @returns {String} Unique signature of the geometry and program
     * @protected
     */
    GeometrySystem.prototype.getSignature = function getSignature (geometry, program)
    {
        var attribs = geometry.attributes;
        var shaderAttributes = program.attributeData;

        var strings = ['g', geometry.id];

        for (var i in attribs)
        {
            if (shaderAttributes[i])
            {
                strings.push(i);
            }
        }

        return strings.join('-');
    };

    /**
     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.
     * If vao is created, it is bound automatically.
     *
     * @protected
     * @param {PIXI.Geometry} geometry - Instance of geometry to to generate Vao for
     * @param {PIXI.Program} program - Instance of program
     */
    GeometrySystem.prototype.initGeometryVao = function initGeometryVao (geometry, program)
    {
        this.checkCompatibility(geometry, program);

        var gl = this.gl;
        var CONTEXT_UID = this.CONTEXT_UID;

        var signature = this.getSignature(geometry, program);

        var vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];

        var vao = vaoObjectHash[signature];

        if (vao)
        {
            // this will give us easy access to the vao
            vaoObjectHash[program.id] = vao;

            return vao;
        }

        var buffers = geometry.buffers;
        var attributes = geometry.attributes;
        var tempStride = {};
        var tempStart = {};

        for (var j in buffers)
        {
            tempStride[j] = 0;
            tempStart[j] = 0;
        }

        for (var j$1 in attributes)
        {
            if (!attributes[j$1].size && program.attributeData[j$1])
            {
                attributes[j$1].size = program.attributeData[j$1].size;
            }
            else if (!attributes[j$1].size)
            {
                console.warn(("PIXI Geometry attribute '" + j$1 + "' size cannot be determined (likely the bound shader does not have the attribute)"));  // eslint-disable-line
            }

            tempStride[attributes[j$1].buffer] += attributes[j$1].size * byteSizeMap$1[attributes[j$1].type];
        }

        for (var j$2 in attributes)
        {
            var attribute = attributes[j$2];
            var attribSize = attribute.size;

            if (attribute.stride === undefined)
            {
                if (tempStride[attribute.buffer] === attribSize * byteSizeMap$1[attribute.type])
                {
                    attribute.stride = 0;
                }
                else
                {
                    attribute.stride = tempStride[attribute.buffer];
                }
            }

            if (attribute.start === undefined)
            {
                attribute.start = tempStart[attribute.buffer];

                tempStart[attribute.buffer] += attribSize * byteSizeMap$1[attribute.type];
            }
        }

        vao = gl.createVertexArray();

        gl.bindVertexArray(vao);

        // first update - and create the buffers!
        // only create a gl buffer if it actually gets
        for (var i = 0; i < buffers.length; i++)
        {
            var buffer = buffers[i];

            if (!buffer._glBuffers[CONTEXT_UID])
            {
                buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());
                this.managedBuffers[buffer.id] = buffer;
                buffer.disposeRunner.add(this);
            }

            buffer._glBuffers[CONTEXT_UID].refCount++;
        }

        // TODO - maybe make this a data object?
        // lets wait to see if we need to first!

        this.activateVao(geometry, program);

        this._activeVao = vao;

        // add it to the cache!
        vaoObjectHash[program.id] = vao;
        vaoObjectHash[signature] = vao;

        return vao;
    };

    /**
     * Disposes buffer
     * @param {PIXI.Buffer} buffer buffer with data
     * @param {boolean} [contextLost=false] If context was lost, we suppress deleteVertexArray
     */
    GeometrySystem.prototype.disposeBuffer = function disposeBuffer (buffer, contextLost)
    {
        if (!this.managedBuffers[buffer.id])
        {
            return;
        }

        delete this.managedBuffers[buffer.id];

        var glBuffer = buffer._glBuffers[this.CONTEXT_UID];
        var gl = this.gl;

        buffer.disposeRunner.remove(this);

        if (!glBuffer)
        {
            return;
        }

        if (!contextLost)
        {
            gl.deleteBuffer(glBuffer.buffer);
        }

        delete buffer._glBuffers[this.CONTEXT_UID];
    };

    /**
     * Disposes geometry
     * @param {PIXI.Geometry} geometry Geometry with buffers. Only VAO will be disposed
     * @param {boolean} [contextLost=false] If context was lost, we suppress deleteVertexArray
     */
    GeometrySystem.prototype.disposeGeometry = function disposeGeometry (geometry, contextLost)
    {
        if (!this.managedGeometries[geometry.id])
        {
            return;
        }

        delete this.managedGeometries[geometry.id];

        var vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];
        var gl = this.gl;
        var buffers = geometry.buffers;

        geometry.disposeRunner.remove(this);

        if (!vaos)
        {
            return;
        }

        for (var i = 0; i < buffers.length; i++)
        {
            var buf = buffers[i]._glBuffers[this.CONTEXT_UID];

            buf.refCount--;
            if (buf.refCount === 0 && !contextLost)
            {
                this.disposeBuffer(buffers[i], contextLost);
            }
        }

        if (!contextLost)
        {
            for (var vaoId in vaos)
            {
                // delete only signatures, everything else are copies
                if (vaoId[0] === 'g')
                {
                    var vao = vaos[vaoId];

                    if (this._activeVao === vao)
                    {
                        this.unbind();
                    }
                    gl.deleteVertexArray(vao);
                }
            }
        }

        delete geometry.glVertexArrayObjects[this.CONTEXT_UID];
    };

    /**
     * dispose all WebGL resources of all managed geometries and buffers
     * @param {boolean} [contextLost=false] If context was lost, we suppress `gl.delete` calls
     */
    GeometrySystem.prototype.disposeAll = function disposeAll (contextLost)
    {
        var all = Object.keys(this.managedGeometries);

        for (var i = 0; i < all.length; i++)
        {
            this.disposeGeometry(this.managedGeometries[all[i]], contextLost);
        }
        all = Object.keys(this.managedBuffers);
        for (var i$1 = 0; i$1 < all.length; i$1++)
        {
            this.disposeBuffer(this.managedBuffers[all[i$1]], contextLost);
        }
    };

    /**
     * Activate vertex array object
     *
     * @protected
     * @param {PIXI.Geometry} geometry - Geometry instance
     * @param {PIXI.Program} program - Shader program instance
     */
    GeometrySystem.prototype.activateVao = function activateVao (geometry, program)
    {
        var gl = this.gl;
        var CONTEXT_UID = this.CONTEXT_UID;
        var buffers = geometry.buffers;
        var attributes = geometry.attributes;

        if (geometry.indexBuffer)
        {
            // first update the index buffer if we have one..
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, geometry.indexBuffer._glBuffers[CONTEXT_UID].buffer);
        }

        var lastBuffer = null;

        // add a new one!
        for (var j in attributes)
        {
            var attribute = attributes[j];
            var buffer = buffers[attribute.buffer];
            var glBuffer = buffer._glBuffers[CONTEXT_UID];

            if (program.attributeData[j])
            {
                if (lastBuffer !== glBuffer)
                {
                    gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer.buffer);

                    lastBuffer = glBuffer;
                }

                var location = program.attributeData[j].location;

                // TODO introduce state again
                // we can optimise this for older devices that have no VAOs
                gl.enableVertexAttribArray(location);

                gl.vertexAttribPointer(location,
                    attribute.size,
                    attribute.type || gl.FLOAT,
                    attribute.normalized,
                    attribute.stride,
                    attribute.start);

                if (attribute.instance)
                {
                    // TODO calculate instance count based of this...
                    if (this.hasInstance)
                    {
                        gl.vertexAttribDivisor(location, 1);
                    }
                    else
                    {
                        throw new Error('geometry error, GPU Instancing is not supported on this device');
                    }
                }
            }
        }
    };

    /**
     * Draw the geometry
     *
     * @param {Number} type - the type primitive to render
     * @param {Number} [size] - the number of elements to be rendered
     * @param {Number} [start] - Starting index
     * @param {Number} [instanceCount] - the number of instances of the set of elements to execute
     */
    GeometrySystem.prototype.draw = function draw (type, size, start, instanceCount)
    {
        var ref = this;
        var gl = ref.gl;
        var geometry = this._activeGeometry;

        // TODO.. this should not change so maybe cache the function?

        if (geometry.indexBuffer)
        {
            var byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;
            var glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;

            if (byteSize === 2 || (byteSize === 4 && this.canUseUInt32ElementIndex))
            {
                if (geometry.instanced)
                {
                    /* eslint-disable max-len */
                    gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1);
                    /* eslint-enable max-len */
                }
                else
                {
                    /* eslint-disable max-len */
                    gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);
                    /* eslint-enable max-len */
                }
            }
            else
            {
                console.warn('unsupported index buffer type: uint32');
            }
        }
        else if (geometry.instanced)
        {
            // TODO need a better way to calculate size..
            gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1);
        }
        else
        {
            gl.drawArrays(type, start, size || geometry.getSize());
        }

        return this;
    };

    /**
     * Unbind/reset everything
     * @protected
     */
    GeometrySystem.prototype.unbind = function unbind ()
    {
        this.gl.bindVertexArray(null);
        this._activeVao = null;
        this._activeGeometry = null;
    };

    return GeometrySystem;
}(System));

/**
 * @method compileProgram
 * @private
 * @memberof PIXI.glCore.shader
 * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}
 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
 * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.
 * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations
 * @return {WebGLProgram} the shader program
 */
function compileProgram(gl, vertexSrc, fragmentSrc, attributeLocations)
{
    var glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);
    var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);

    var program = gl.createProgram();

    gl.attachShader(program, glVertShader);
    gl.attachShader(program, glFragShader);

    // optionally, set the attributes manually for the program rather than letting WebGL decide..
    if (attributeLocations)
    {
        for (var i in attributeLocations)
        {
            gl.bindAttribLocation(program, attributeLocations[i], i);
        }
    }

    gl.linkProgram(program);

    // if linking fails, then log and cleanup
    if (!gl.getProgramParameter(program, gl.LINK_STATUS))
    {
        console.error('Pixi.js Error: Could not initialize shader.');
        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));
        console.error('gl.getError()', gl.getError());

        // if there is a program info log, log it
        if (gl.getProgramInfoLog(program) !== '')
        {
            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));
        }

        gl.deleteProgram(program);
        program = null;
    }

    // clean up some shaders
    gl.deleteShader(glVertShader);
    gl.deleteShader(glFragShader);

    return program;
}

/**
 * @private
 * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}
 * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER
 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
 * @return {WebGLShader} the shader
 */
function compileShader(gl, type, src)
{
    var shader = gl.createShader(type);

    gl.shaderSource(shader, src);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
    {
        console.warn(src);
        console.error(gl.getShaderInfoLog(shader));

        return null;
    }

    return shader;
}

/**
 * @method defaultValue
 * @memberof PIXI.glCore.shader
 * @param type {String} Type of value
 * @param size {Number}
 * @private
 */
function defaultValue(type, size)
{
    switch (type)
    {
        case 'float':
            return 0;

        case 'vec2':
            return new Float32Array(2 * size);

        case 'vec3':
            return new Float32Array(3 * size);

        case 'vec4':
            return new Float32Array(4 * size);

        case 'int':
        case 'sampler2D':
        case 'sampler2DArray':
            return 0;

        case 'ivec2':
            return new Int32Array(2 * size);

        case 'ivec3':
            return new Int32Array(3 * size);

        case 'ivec4':
            return new Int32Array(4 * size);

        case 'bool':
            return false;

        case 'bvec2':

            return booleanArray(2 * size);

        case 'bvec3':
            return booleanArray(3 * size);

        case 'bvec4':
            return booleanArray(4 * size);

        case 'mat2':
            return new Float32Array([1, 0,
                0, 1]);

        case 'mat3':
            return new Float32Array([1, 0, 0,
                0, 1, 0,
                0, 0, 1]);

        case 'mat4':
            return new Float32Array([1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1]);
    }

    return null;
}

function booleanArray(size)
{
    var array = new Array(size);

    for (var i = 0; i < array.length; i++)
    {
        array[i] = false;
    }

    return array;
}

var unknownContext = {};
var context = unknownContext;

/**
 * returns a little WebGL context to use for program inspection.
 *
 * @static
 * @private
 * @returns {webGL-context} a gl context to test with
 */
function getTestContext()
{
    if (context === unknownContext)
    {
        var canvas = document.createElement('canvas');

        var gl;

        if (_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PREFER_ENV >= _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL2)
        {
            gl = canvas.getContext('webgl2', {});
        }

        if (!gl)
        {
            gl = canvas.getContext('webgl', {})
            || canvas.getContext('experimental-webgl', {});

            if (!gl)
            {
                // fail, not able to get a context
                gl = null;
            }
            else
            {
                // for shader testing..
                gl.getExtension('WEBGL_draw_buffers');
            }
        }

        context = gl;
    }

    return context;
}

var maxFragmentPrecision;

function getMaxFragmentPrecision()
{
    if (!maxFragmentPrecision)
    {
        maxFragmentPrecision = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].MEDIUM;
        var gl = getTestContext();

        if (gl)
        {
            if (gl.getShaderPrecisionFormat)
            {
                var shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);

                maxFragmentPrecision = shaderFragment.precision ? _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].HIGH : _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].MEDIUM;
            }
        }
    }

    return maxFragmentPrecision;
}

/**
 * Sets the float precision on the shader, ensuring the device supports the request precision.
 * If the precision is already present, it just ensures that the device is able to handle it.
 *
 * @private
 * @param {string} src - The shader source
 * @param {string} requestedPrecision - The request float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.
 * @param {string} maxSupportedPrecision - The maximum precision the shader supports.
 *
 * @return {string} modified shader source
 */
function setPrecision(src, requestedPrecision, maxSupportedPrecision)
{
    if (src.substring(0, 9) !== 'precision')
    {
        // no precision supplied, so PixiJS will add the requested level.
        var precision = requestedPrecision;

        // If highp is requested but not supported, downgrade precision to a level all devices support.
        if (requestedPrecision === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].HIGH && maxSupportedPrecision !== _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].HIGH)
        {
            precision = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].MEDIUM;
        }

        return ("precision " + precision + " float;\n" + src);
    }
    else if (maxSupportedPrecision !== _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].HIGH && src.substring(0, 15) === 'precision highp')
    {
        // precision was supplied, but at a level this device does not support, so downgrading to mediump.
        return src.replace('precision highp', 'precision mediump');
    }

    return src;
}

var GLSL_TO_SIZE = {
    float:    1,
    vec2:     2,
    vec3:     3,
    vec4:     4,

    int:      1,
    ivec2:    2,
    ivec3:    3,
    ivec4:    4,

    bool:     1,
    bvec2:    2,
    bvec3:    3,
    bvec4:    4,

    mat2:     4,
    mat3:     9,
    mat4:     16,

    sampler2D:  1,
};

/**
 * @private
 * @method mapSize
 * @memberof PIXI.glCore.shader
 * @param type {String}
 * @return {Number}
 */
function mapSize(type)
{
    return GLSL_TO_SIZE[type];
}

var GL_TABLE = null;

var GL_TO_GLSL_TYPES = {
    FLOAT:       'float',
    FLOAT_VEC2:  'vec2',
    FLOAT_VEC3:  'vec3',
    FLOAT_VEC4:  'vec4',

    INT:         'int',
    INT_VEC2:    'ivec2',
    INT_VEC3:    'ivec3',
    INT_VEC4:    'ivec4',

    BOOL:        'bool',
    BOOL_VEC2:   'bvec2',
    BOOL_VEC3:   'bvec3',
    BOOL_VEC4:   'bvec4',

    FLOAT_MAT2:  'mat2',
    FLOAT_MAT3:  'mat3',
    FLOAT_MAT4:  'mat4',

    SAMPLER_2D:  'sampler2D',
    SAMPLER_CUBE:  'samplerCube',
    SAMPLER_2D_ARRAY:  'sampler2DArray',
};

function mapType(gl, type)
{
    if (!GL_TABLE)
    {
        var typeNames = Object.keys(GL_TO_GLSL_TYPES);

        GL_TABLE = {};

        for (var i = 0; i < typeNames.length; ++i)
        {
            var tn = typeNames[i];

            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];
        }
    }

    return GL_TABLE[type];
}

// cv = CachedValue
// v = value
// ud = uniformData
// uv = uniformValue
// l = location
var GLSL_TO_SINGLE_SETTERS_CACHED = {

    float: "\n    if(cv !== v)\n    {\n        cv.v = v;\n        gl.uniform1f(location, v)\n    }",

    vec2: "\n    if(cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        gl.uniform2f(location, v[0], v[1])\n    }",

    vec3: "\n    if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }",

    vec4:     'gl.uniform4f(location, v[0], v[1], v[2], v[3])',

    int:      'gl.uniform1i(location, v)',
    ivec2:    'gl.uniform2i(location, v[0], v[1])',
    ivec3:    'gl.uniform3i(location, v[0], v[1], v[2])',
    ivec4:    'gl.uniform4i(location, v[0], v[1], v[2], v[3])',

    bool:     'gl.uniform1i(location, v)',
    bvec2:    'gl.uniform2i(location, v[0], v[1])',
    bvec3:    'gl.uniform3i(location, v[0], v[1], v[2])',
    bvec4:    'gl.uniform4i(location, v[0], v[1], v[2], v[3])',

    mat2:     'gl.uniformMatrix2fv(location, false, v)',
    mat3:     'gl.uniformMatrix3fv(location, false, v)',
    mat4:     'gl.uniformMatrix4fv(location, false, v)',

    sampler2D:      'gl.uniform1i(location, v)',
    samplerCube:    'gl.uniform1i(location, v)',
    sampler2DArray: 'gl.uniform1i(location, v)',
};

var GLSL_TO_ARRAY_SETTERS = {

    float:    "gl.uniform1fv(location, v)",

    vec2:     "gl.uniform2fv(location, v)",
    vec3:     "gl.uniform3fv(location, v)",
    vec4:     'gl.uniform4fv(location, v)',

    mat4:     'gl.uniformMatrix4fv(location, false, v)',
    mat3:     'gl.uniformMatrix3fv(location, false, v)',
    mat2:     'gl.uniformMatrix2fv(location, false, v)',

    int:      'gl.uniform1iv(location, v)',
    ivec2:    'gl.uniform2iv(location, v)',
    ivec3:    'gl.uniform3iv(location, v)',
    ivec4:    'gl.uniform4iv(location, v)',

    bool:     'gl.uniform1iv(location, v)',
    bvec2:    'gl.uniform2iv(location, v)',
    bvec3:    'gl.uniform3iv(location, v)',
    bvec4:    'gl.uniform4iv(location, v)',

    sampler2D:      'gl.uniform1iv(location, v)',
    samplerCube:    'gl.uniform1iv(location, v)',
    sampler2DArray: 'gl.uniform1iv(location, v)',
};

function generateUniformsSync(group, uniformData)
{
    var textureCount = 0;
    var func = "var v = null;\n    var cv = null\n    var gl = renderer.gl";

    for (var i in group.uniforms)
    {
        var data = uniformData[i];

        if (!data)
        {
            if (group.uniforms[i].group)
            {
                func += "\n                    renderer.shader.syncUniformGroup(uv." + i + ");\n                ";
            }

            continue;
        }

        // TODO && uniformData[i].value !== 0 <-- do we still need this?
        if (data.type === 'float' && data.size === 1)
        {
            func += "\n            if(uv." + i + " !== ud." + i + ".value)\n            {\n                ud." + i + ".value = uv." + i + "\n                gl.uniform1f(ud." + i + ".location, uv." + i + ")\n            }\n";
        }
        /* eslint-disable max-len */
        else if ((data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray)
        /* eslint-disable max-len */
        {
            func += "\n            renderer.texture.bind(uv." + i + ", " + textureCount + ");\n\n            if(ud." + i + ".value !== " + textureCount + ")\n            {\n                ud." + i + ".value = " + textureCount + ";\n                gl.uniform1i(ud." + i + ".location, " + textureCount + ");\n; // eslint-disable-line max-len\n            }\n";

            textureCount++;
        }
        else if (data.type === 'mat3' && data.size === 1)
        {
            if (group.uniforms[i].a !== undefined)
            {
                // TODO and some smart caching dirty ids here!
                func += "\n                gl.uniformMatrix3fv(ud." + i + ".location, false, uv." + i + ".toArray(true));\n                \n";
            }
            else
            {
                func += "\n                gl.uniformMatrix3fv(ud." + i + ".location, false, uv." + i + ");\n                \n";
            }
        }
        else if (data.type === 'vec2' && data.size === 1)
        {
            // TODO - do we need both here?
            // maybe we can get away with only using points?
            if (group.uniforms[i].x !== undefined)
            {
                func += "\n                cv = ud." + i + ".value;\n                v = uv." + i + ";\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud." + i + ".location, v.x, v.y);\n                }\n";
            }
            else
            {
                func += "\n                cv = ud." + i + ".value;\n                v = uv." + i + ";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud." + i + ".location, v[0], v[1]);\n                }\n                \n";
            }
        }
        else if (data.type === 'vec4' && data.size === 1)
        {
            // TODO - do we need both here?
            // maybe we can get away with only using points?
            if (group.uniforms[i].width !== undefined)
            {
                func += "\n                cv = ud." + i + ".value;\n                v = uv." + i + ";\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud." + i + ".location, v.x, v.y, v.width, v.height)\n                }\n";
            }
            else
            {
                func += "\n                cv = ud." + i + ".value;\n                v = uv." + i + ";\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud." + i + ".location, v[0], v[1], v[2], v[3])\n                }\n                \n";
            }
        }
        else
        {
            var templateType = (data.size === 1) ? GLSL_TO_SINGLE_SETTERS_CACHED : GLSL_TO_ARRAY_SETTERS;

            var template =  templateType[data.type].replace('location', ("ud." + i + ".location"));

            func += "\n            cv = ud." + i + ".value;\n            v = uv." + i + ";\n            " + template + ";\n";
        }
    }

    return new Function('ud', 'uv', 'renderer', func); // eslint-disable-line no-new-func
}

var fragTemplate = [
    'precision mediump float;',
    'void main(void){',
    'float test = 0.1;',
    '%forloop%',
    'gl_FragColor = vec4(0.0);',
    '}' ].join('\n');

function checkMaxIfStatementsInShader(maxIfs, gl)
{
    if (maxIfs === 0)
    {
        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');
    }

    var shader = gl.createShader(gl.FRAGMENT_SHADER);

    while (true) // eslint-disable-line no-constant-condition
    {
        var fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));

        gl.shaderSource(shader, fragmentSrc);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
        {
            maxIfs = (maxIfs / 2) | 0;
        }
        else
        {
            // valid!
            break;
        }
    }

    return maxIfs;
}

function generateIfTestSrc(maxIfs)
{
    var src = '';

    for (var i = 0; i < maxIfs; ++i)
    {
        if (i > 0)
        {
            src += '\nelse ';
        }

        if (i < maxIfs - 1)
        {
            src += "if(test == " + i + ".0){}";
        }
    }

    return src;
}

// Cache the result to prevent running this over and over
var unsafeEval;

/**
 * Not all platforms allow to generate function code (e.g., `new Function`).
 * this provides the platform-level detection.
 *
 * @private
 * @returns {boolean}
 */
function unsafeEvalSupported()
{
    if (typeof unsafeEval === 'boolean')
    {
        return unsafeEval;
    }

    try
    {
        /* eslint-disable no-new-func */
        var func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');
        /* eslint-enable no-new-func */

        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;
    }
    catch (e)
    {
        unsafeEval = false;
    }

    return unsafeEval;
}

var defaultFragment = "varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor *= texture2D(uSampler, vTextureCoord);\n}";

var defaultVertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n}\n";

// import * as from '../systems/shader/shader';

var UID$3 = 0;

var nameCache = {};

/**
 * Helper class to create a shader program.
 *
 * @class
 * @memberof PIXI
 */
var Program = function Program(vertexSrc, fragmentSrc, name)
{
    if ( name === void 0 ) name = 'pixi-shader';

    this.id = UID$3++;

    /**
     * The vertex shader.
     *
     * @member {string}
     */
    this.vertexSrc = vertexSrc || Program.defaultVertexSrc;

    /**
     * The fragment shader.
     *
     * @member {string}
     */
    this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;

    this.vertexSrc = this.vertexSrc.trim();
    this.fragmentSrc = this.fragmentSrc.trim();

    if (this.vertexSrc.substring(0, 8) !== '#version')
    {
        name = name.replace(/\s+/g, '-');

        if (nameCache[name])
        {
            nameCache[name]++;
            name += "-" + (nameCache[name]);
        }
        else
        {
            nameCache[name] = 1;
        }

        this.vertexSrc = "#define SHADER_NAME " + name + "\n" + (this.vertexSrc);
        this.fragmentSrc = "#define SHADER_NAME " + name + "\n" + (this.fragmentSrc);

        this.vertexSrc = setPrecision(this.vertexSrc, _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PRECISION_VERTEX, _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["PRECISION"].HIGH);
        this.fragmentSrc = setPrecision(this.fragmentSrc, _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PRECISION_FRAGMENT, getMaxFragmentPrecision());
    }

    // currently this does not extract structs only default types
    this.extractData(this.vertexSrc, this.fragmentSrc);

    // this is where we store shader references..
    this.glPrograms = {};

    this.syncUniforms = null;
};

var staticAccessors = { defaultVertexSrc: { configurable: true },defaultFragmentSrc: { configurable: true } };

/**
 * Extracts the data for a buy creating a small test program
 * or reading the src directly.
 * @protected
 *
 * @param {string} [vertexSrc] - The source of the vertex shader.
 * @param {string} [fragmentSrc] - The source of the fragment shader.
 */
Program.prototype.extractData = function extractData (vertexSrc, fragmentSrc)
{
    var gl = getTestContext();

    if (gl)
    {
        var program = compileProgram(gl, vertexSrc, fragmentSrc);

        this.attributeData = this.getAttributeData(program, gl);
        this.uniformData = this.getUniformData(program, gl);

        gl.deleteProgram(program);
    }
    else
    {
        this.uniformData = {};
        this.attributeData = {};
    }
};

/**
 * returns the attribute data from the program
 * @private
 *
 * @param {WebGLProgram} [program] - the WebGL program
 * @param {WebGLRenderingContext} [gl] - the WebGL context
 *
 * @returns {object} the attribute data for this program
 */
Program.prototype.getAttributeData = function getAttributeData (program, gl)
{
    var attributes = {};
    var attributesArray = [];

    var totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

    for (var i = 0; i < totalAttributes; i++)
    {
        var attribData = gl.getActiveAttrib(program, i);
        var type = mapType(gl, attribData.type);

        /*eslint-disable */
        var data = {
            type: type,
            name: attribData.name,
            size: mapSize(type),
            location: 0,
        };
        /* eslint-enable */

        attributes[attribData.name] = data;
        attributesArray.push(data);
    }

    attributesArray.sort(function (a, b) { return (a.name > b.name) ? 1 : -1; }); // eslint-disable-line no-confusing-arrow

    for (var i$1 = 0; i$1 < attributesArray.length; i$1++)
    {
        attributesArray[i$1].location = i$1;
    }

    return attributes;
};

/**
 * returns the uniform data from the program
 * @private
 *
 * @param {webGL-program} [program] - the webgl program
 * @param {context} [gl] - the WebGL context
 *
 * @returns {object} the uniform data for this program
 */
Program.prototype.getUniformData = function getUniformData (program, gl)
{
    var uniforms = {};

    var totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

    // TODO expose this as a prop?
    // const maskRegex = new RegExp('^(projectionMatrix|uSampler|translationMatrix)$');
    // const maskRegex = new RegExp('^(projectionMatrix|uSampler|translationMatrix)$');

    for (var i = 0; i < totalUniforms; i++)
    {
        var uniformData = gl.getActiveUniform(program, i);
        var name = uniformData.name.replace(/\[.*?\]/, '');

        var isArray = uniformData.name.match(/\[.*?\]/, '');
        var type = mapType(gl, uniformData.type);

        /*eslint-disable */
        uniforms[name] = {
            type: type,
            size: uniformData.size,
            isArray:isArray,
            value: defaultValue(type, uniformData.size),
        };
        /* eslint-enable */
    }

    return uniforms;
};

/**
 * The default vertex shader source
 *
 * @static
 * @constant
 * @member {string}
 */
staticAccessors.defaultVertexSrc.get = function ()
{
    return defaultVertex;
};

/**
 * The default fragment shader source
 *
 * @static
 * @constant
 * @member {string}
 */
staticAccessors.defaultFragmentSrc.get = function ()
{
    return defaultFragment;
};

/**
 * A short hand function to create a program based of a vertex and fragment shader
 * this method will also check to see if there is a cached program.
 *
 * @param {string} [vertexSrc] - The source of the vertex shader.
 * @param {string} [fragmentSrc] - The source of the fragment shader.
 * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.
 *
 * @returns {PIXI.Program} an shiny new Pixi shader!
 */
Program.from = function from (vertexSrc, fragmentSrc, name)
{
    var key = vertexSrc + fragmentSrc;

    var program = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["ProgramCache"][key];

    if (!program)
    {
        _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["ProgramCache"][key] = program = new Program(vertexSrc, fragmentSrc, name);
    }

    return program;
};

Object.defineProperties( Program, staticAccessors );

/**
 * A helper class for shaders
 *
 * @class
 * @memberof PIXI
 */
var Shader = function Shader(program, uniforms)
{
    /**
     * Program that the shader uses
     *
     * @member {PIXI.Program}
     */
    this.program = program;

    // lets see whats been passed in
    // uniforms should be converted to a uniform group
    if (uniforms)
    {
        if (uniforms instanceof UniformGroup)
        {
            this.uniformGroup = uniforms;
        }
        else
        {
            this.uniformGroup = new UniformGroup(uniforms);
        }
    }
    else
    {
        this.uniformGroup = new UniformGroup({});
    }

    // time to build some getters and setters!
    // I guess down the line this could sort of generate an instruction list rather than use dirty ids?
    // does the trick for now though!
    for (var i in program.uniformData)
    {
        if (this.uniformGroup.uniforms[i] instanceof Array)
        {
            this.uniformGroup.uniforms[i] = new Float32Array(this.uniformGroup.uniforms[i]);
        }
    }
};

var prototypeAccessors$2 = { uniforms: { configurable: true } };

// TODO move to shader system..
Shader.prototype.checkUniformExists = function checkUniformExists (name, group)
{
    if (group.uniforms[name])
    {
        return true;
    }

    for (var i in group.uniforms)
    {
        var uniform = group.uniforms[i];

        if (uniform.group)
        {
            if (this.checkUniformExists(name, uniform))
            {
                return true;
            }
        }
    }

    return false;
};

Shader.prototype.destroy = function destroy ()
{
    // usage count on programs?
    // remove if not used!
    this.uniformGroup = null;
};

/**
 * Shader uniform values, shortcut for `uniformGroup.uniforms`
 * @readonly
 * @member {object}
 */
prototypeAccessors$2.uniforms.get = function ()
{
    return this.uniformGroup.uniforms;
};

/**
 * A short hand function to create a shader based of a vertex and fragment shader
 *
 * @param {string} [vertexSrc] - The source of the vertex shader.
 * @param {string} [fragmentSrc] - The source of the fragment shader.
 * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.
 *
 * @returns {PIXI.Shader} an shiny new Pixi shader!
 */
Shader.from = function from (vertexSrc, fragmentSrc, uniforms)
{
    var program = Program.from(vertexSrc, fragmentSrc);

    return new Shader(program, uniforms);
};

Object.defineProperties( Shader.prototype, prototypeAccessors$2 );

/* eslint-disable max-len */

var BLEND = 0;
var OFFSET = 1;
var CULLING = 2;
var DEPTH_TEST = 3;
var WINDING = 4;

/**
 * This is a WebGL state, and is is passed The WebGL StateManager.
 *
 * Each mesh rendered may require WebGL to be in a different state.
 * For example you may want different blend mode or to enable polygon offsets
 *
 * @class
 * @memberof PIXI
 */
var State = function State()
{
    this.data = 0;

    this.blendMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].NORMAL;
    this.polygonOffset = 0;

    this.blend = true;
    //  this.depthTest = true;
};

var prototypeAccessors$3 = { blend: { configurable: true },offsets: { configurable: true },culling: { configurable: true },depthTest: { configurable: true },clockwiseFrontFace: { configurable: true },blendMode: { configurable: true },polygonOffset: { configurable: true } };

/**
 * Activates blending of the computed fragment color values
 *
 * @member {boolean}
 */
prototypeAccessors$3.blend.get = function ()
{
    return !!(this.data & (1 << BLEND));
};

prototypeAccessors$3.blend.set = function (value) // eslint-disable-line require-jsdoc
{
    if (!!(this.data & (1 << BLEND)) !== value)
    {
        this.data ^= (1 << BLEND);
    }
};

/**
 * Activates adding an offset to depth values of polygon's fragments
 *
 * @member {boolean}
 * @default false
 */
prototypeAccessors$3.offsets.get = function ()
{
    return !!(this.data & (1 << OFFSET));
};

prototypeAccessors$3.offsets.set = function (value) // eslint-disable-line require-jsdoc
{
    if (!!(this.data & (1 << OFFSET)) !== value)
    {
        this.data ^= (1 << OFFSET);
    }
};

/**
 * Activates culling of polygons.
 *
 * @member {boolean}
 * @default false
 */
prototypeAccessors$3.culling.get = function ()
{
    return !!(this.data & (1 << CULLING));
};

prototypeAccessors$3.culling.set = function (value) // eslint-disable-line require-jsdoc
{
    if (!!(this.data & (1 << CULLING)) !== value)
    {
        this.data ^= (1 << CULLING);
    }
};

/**
 * Activates depth comparisons and updates to the depth buffer.
 *
 * @member {boolean}
 * @default false
 */
prototypeAccessors$3.depthTest.get = function ()
{
    return !!(this.data & (1 << DEPTH_TEST));
};

prototypeAccessors$3.depthTest.set = function (value) // eslint-disable-line require-jsdoc
{
    if (!!(this.data & (1 << DEPTH_TEST)) !== value)
    {
        this.data ^= (1 << DEPTH_TEST);
    }
};

/**
 * Specifies whether or not front or back-facing polygons can be culled.
 * @member {boolean}
 * @default false
 */
prototypeAccessors$3.clockwiseFrontFace.get = function ()
{
    return !!(this.data & (1 << WINDING));
};

prototypeAccessors$3.clockwiseFrontFace.set = function (value) // eslint-disable-line require-jsdoc
{
    if (!!(this.data & (1 << WINDING)) !== value)
    {
        this.data ^= (1 << WINDING);
    }
};

/**
 * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.
 * Setting this mode to anything other than NO_BLEND will automatically switch blending on.
 *
 * @member {number}
 * @default PIXI.BLEND_MODES.NORMAL
 * @see PIXI.BLEND_MODES
 */
prototypeAccessors$3.blendMode.get = function ()
{
    return this._blendMode;
};

prototypeAccessors$3.blendMode.set = function (value) // eslint-disable-line require-jsdoc
{
    this.blend = (value !== _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].NONE);
    this._blendMode = value;
};

/**
 * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.
 *
 * @member {number}
 * @default 0
 */
prototypeAccessors$3.polygonOffset.get = function ()
{
    return this._polygonOffset;
};

prototypeAccessors$3.polygonOffset.set = function (value) // eslint-disable-line require-jsdoc
{
    this.offsets = !!value;
    this._polygonOffset = value;
};

State.for2d = function for2d ()
{
    var state = new State();

    state.depthTest = false;
    state.blend = true;

    return state;
};

Object.defineProperties( State.prototype, prototypeAccessors$3 );

var defaultVertex$1 = "attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n";

var defaultFragment$1 = "varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n";

/**
 * Filter is a special type of WebGL shader that is applied to the screen.
 *
 * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the
 * {@link PIXI.filters.BlurFilter BlurFilter}.
 *
 * ### Usage
 * Filters can be applied to any DisplayObject or Container.
 * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,
 * then filter renders it to the screen.
 * Multiple filters can be added to the `filters` array property and stacked on each other.
 *
 * ```
 * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });
 * const container = new PIXI.Container();
 * container.filters = [filter];
 * ```
 *
 * ### Previous Version Differences
 *
 * In PixiJS **v3**, a filter was always applied to _whole screen_.
 *
 * In PixiJS **v4**, a filter can be applied _only part of the screen_.
 * Developers had to create a set of uniforms to deal with coordinates.
 *
 * In PixiJS **v5** combines _both approaches_.
 * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,
 * bringing those extra uniforms into account.
 *
 * Also be aware that we have changed default vertex shader, please consult
 * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
 *
 * ### Built-in Uniforms
 *
 * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,
 * and `projectionMatrix` uniform maps it to the gl viewport.
 *
 * **uSampler**
 *
 * The most important uniform is the input texture that container was rendered into.
 * _Important note: as with all Framebuffers in PixiJS, both input and output are
 * premultiplied by alpha._
 *
 * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.
 * Use it to sample the input.
 *
 * ```
 * const fragment = `
 * varying vec2 vTextureCoord;
 * uniform sampler2D uSampler;
 * void main(void)
 * {
 *    gl_FragColor = texture2D(uSampler, vTextureCoord);
 * }
 * `;
 *
 * const myFilter = new PIXI.Filter(null, fragment);
 * ```
 *
 * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.
 *
 * **outputFrame**
 *
 * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.
 * It's the same as `renderer.screen` for a fullscreen filter.
 * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,
 * `(0, 0, outputFrame.width, outputFrame.height)`,
 *
 * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.
 * To calculate vertex position in screen space using normalized (0-1) space:
 *
 * ```
 * vec4 filterVertexPosition( void )
 * {
 *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;
 *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);
 * }
 * ```
 *
 * **inputSize**
 *
 * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.
 * The `inputSize.xy` are size of temporary framebuffer that holds input.
 * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.
 *
 * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.
 *
 * To calculate input normalized coordinate, you have to map it to filter normalized space.
 * Multiply by `outputFrame.zw` to get input coordinate.
 * Divide by `inputSize.xy` to get input normalized coordinate.
 *
 * ```
 * vec2 filterTextureCoord( void )
 * {
 *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy
 * }
 * ```
 * **resolution**
 *
 * The `resolution` is the ratio of screen (CSS) pixels to real pixels.
 *
 * **inputPixel**
 *
 * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`
 * `inputPixel.zw` is inverted `inputPixel.xy`.
 *
 * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.
 *
 * **inputClamp**
 *
 * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.
 * For displacements, coordinates has to be clamped.
 *
 * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer
 * `inputClamp.zw` is bottom-right pixel center.
 *
 * ```
 * vec4 color = texture2D(uSampler, clamp(modifigedTextureCoord, inputClamp.xy, inputClamp.zw))
 * ```
 * OR
 * ```
 * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))
 * ```
 *
 * ### Additional Information
 *
 * Complete documentation on Filter usage is located in the
 * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.
 *
 * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded
 * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.
 *
 * @class
 * @memberof PIXI
 * @extends PIXI.Shader
 */
var Filter = /*@__PURE__*/(function (Shader) {
    function Filter(vertexSrc, fragmentSrc, uniforms)
    {
        var program = Program.from(vertexSrc || Filter.defaultVertexSrc,
            fragmentSrc || Filter.defaultFragmentSrc);

        Shader.call(this, program, uniforms);

        /**
         * The padding of the filter. Some filters require extra space to breath such as a blur.
         * Increasing this will add extra width and height to the bounds of the object that the
         * filter is applied to.
         *
         * @member {number}
         */
        this.padding = 0;

        /**
         * The resolution of the filter. Setting this to be lower will lower the quality but
         * increase the performance of the filter.
         *
         * @member {number}
         */
        this.resolution = _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].FILTER_RESOLUTION;

        /**
         * If enabled is true the filter is applied, if false it will not.
         *
         * @member {boolean}
         */
        this.enabled = true;

        /**
         * If enabled, PixiJS will fit the filter area into boundaries for better performance.
         * Switch it off if it does not work for specific shader.
         *
         * @member {boolean}
         */
        this.autoFit = true;

        /**
         * Legacy filters use position and uvs from attributes
         * @member {boolean}
         * @readonly
         */
        this.legacy = !!this.program.attributeData.aTextureCoord;

        /**
         * The WebGL state the filter requires to render
         * @member {PIXI.State}
         */
        this.state = new State();
    }

    if ( Shader ) Filter.__proto__ = Shader;
    Filter.prototype = Object.create( Shader && Shader.prototype );
    Filter.prototype.constructor = Filter;

    var prototypeAccessors = { blendMode: { configurable: true } };
    var staticAccessors = { defaultVertexSrc: { configurable: true },defaultFragmentSrc: { configurable: true } };

    /**
     * Applies the filter
     *
     * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
     * @param {PIXI.RenderTexture} input - The input render target.
     * @param {PIXI.RenderTexture} output - The target to output to.
     * @param {boolean} clear - Should the output be cleared before rendering to it
     * @param {object} [currentState] - It's current state of filter.
     *        There are some useful properties in the currentState :
     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution
     */
    Filter.prototype.apply = function apply (filterManager, input, output, clear, currentState)
    {
        // do as you please!

        filterManager.applyFilter(this, input, output, clear, currentState);

        // or just do a regular render..
    };

    /**
     * Sets the blendmode of the filter
     *
     * @member {number}
     * @default PIXI.BLEND_MODES.NORMAL
     */
    prototypeAccessors.blendMode.get = function ()
    {
        return this.state.blendMode;
    };

    prototypeAccessors.blendMode.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.state.blendMode = value;
    };

    /**
     * The default vertex shader source
     *
     * @static
     * @type {string}
     * @constant
     */
    staticAccessors.defaultVertexSrc.get = function ()
    {
        return defaultVertex$1;
    };

    /**
     * The default fragment shader source
     *
     * @static
     * @type {string}
     * @constant
     */
    staticAccessors.defaultFragmentSrc.get = function ()
    {
        return defaultFragment$1;
    };

    Object.defineProperties( Filter.prototype, prototypeAccessors );
    Object.defineProperties( Filter, staticAccessors );

    return Filter;
}(Shader));

/**
 * Used for caching shader IDs
 *
 * @static
 * @type {object}
 * @protected
 */
Filter.SOURCE_KEY_MAP = {};

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n}\n";

var fragment = "varying vec2 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform float npmAlpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(maskClamp.x, vMaskCoord.x) +\n        step(maskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, maskClamp.z) +\n        step(vMaskCoord.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * alpha * clip);\n\n    gl_FragColor = original;\n}\n";

var tempMat = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"]();

/**
 * Class controls uv mapping from Texture normal space to BaseTexture normal space.
 *
 * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.
 *
 * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.
 * If you want to add support for texture region of certain feature or filter, that's what you're looking for.
 *
 * Takes track of Texture changes through `_lastTextureID` private field.
 * Use `update()` method call to track it from outside.
 *
 * @see PIXI.Texture
 * @see PIXI.Mesh
 * @see PIXI.TilingSprite
 * @class
 * @memberof PIXI
 */
var TextureMatrix = function TextureMatrix(texture, clampMargin)
{
    this._texture = texture;

    /**
     * Matrix operation that converts texture region coords to texture coords
     * @member {PIXI.Matrix}
     * @readonly
     */
    this.mapCoord = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"]();

    /**
     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.
     * Calculated based on clampOffset.
     * @member {Float32Array}
     * @readonly
     */
    this.uClampFrame = new Float32Array(4);

    /**
     * Normalized clamp offset.
     * Calculated based on clampOffset.
     * @member {Float32Array}
     * @readonly
     */
    this.uClampOffset = new Float32Array(2);

    /**
     * Tracks Texture frame changes
     * @member {number}
     * @protected
     */
    this._updateID = -1;

    /**
     * Changes frame clamping
     * Works with TilingSprite and Mesh
     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders
     *
     * @default 0
     * @member {number}
     */
    this.clampOffset = 0;

    /**
     * Changes frame clamping
     * Works with TilingSprite and Mesh
     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas
     *
     * @default 0.5
     * @member {number}
     */
    this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;

    /**
     * If texture size is the same as baseTexture
     * @member {boolean}
     * @default false
     * @readonly
     */
    this.isSimple = false;
};

var prototypeAccessors$4 = { texture: { configurable: true } };

/**
 * texture property
 * @member {PIXI.Texture}
 */
prototypeAccessors$4.texture.get = function ()
{
    return this._texture;
};

prototypeAccessors$4.texture.set = function (value) // eslint-disable-line require-jsdoc
{
    this._texture = value;
    this._updateID = -1;
};

/**
 * Multiplies uvs array to transform
 * @param {Float32Array} uvs mesh uvs
 * @param {Float32Array} [out=uvs] output
 * @returns {Float32Array} output
 */
TextureMatrix.prototype.multiplyUvs = function multiplyUvs (uvs, out)
{
    if (out === undefined)
    {
        out = uvs;
    }

    var mat = this.mapCoord;

    for (var i = 0; i < uvs.length; i += 2)
    {
        var x = uvs[i];
        var y = uvs[i + 1];

        out[i] = (x * mat.a) + (y * mat.c) + mat.tx;
        out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;
    }

    return out;
};

/**
 * updates matrices if texture was changed
 * @param {boolean} [forceUpdate=false] if true, matrices will be updated any case
 * @returns {boolean} whether or not it was updated
 */
TextureMatrix.prototype.update = function update (forceUpdate)
{
    var tex = this._texture;

    if (!tex || !tex.valid)
    {
        return false;
    }

    if (!forceUpdate
        && this._updateID === tex._updateID)
    {
        return false;
    }

    this._updateID = tex._updateID;

    var uvs = tex._uvs;

    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);

    var orig = tex.orig;
    var trim = tex.trim;

    if (trim)
    {
        tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,
            -trim.x / trim.width, -trim.y / trim.height);
        this.mapCoord.append(tempMat);
    }

    var texBase = tex.baseTexture;
    var frame = this.uClampFrame;
    var margin = this.clampMargin / texBase.resolution;
    var offset = this.clampOffset;

    frame[0] = (tex._frame.x + margin + offset) / texBase.width;
    frame[1] = (tex._frame.y + margin + offset) / texBase.height;
    frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;
    frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;
    this.uClampOffset[0] = offset / texBase.realWidth;
    this.uClampOffset[1] = offset / texBase.realHeight;

    this.isSimple = tex._frame.width === texBase.width
        && tex._frame.height === texBase.height
        && tex.rotate === 0;

    return true;
};

Object.defineProperties( TextureMatrix.prototype, prototypeAccessors$4 );

/**
 * This handles a Sprite acting as a mask, as opposed to a Graphic.
 *
 * WebGL only.
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI
 */
var SpriteMaskFilter = /*@__PURE__*/(function (Filter) {
    function SpriteMaskFilter(sprite)
    {
        var maskMatrix = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"]();

        Filter.call(this, vertex, fragment);

        sprite.renderable = false;

        /**
         * Sprite mask
         * @member {PIXI.Sprite}
         */
        this.maskSprite = sprite;

        /**
         * Mask matrix
         * @member {PIXI.Matrix}
         */
        this.maskMatrix = maskMatrix;
    }

    if ( Filter ) SpriteMaskFilter.__proto__ = Filter;
    SpriteMaskFilter.prototype = Object.create( Filter && Filter.prototype );
    SpriteMaskFilter.prototype.constructor = SpriteMaskFilter;

    /**
     * Applies the filter
     *
     * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from
     * @param {PIXI.RenderTexture} input - The input render target.
     * @param {PIXI.RenderTexture} output - The target to output to.
     * @param {boolean} clear - Should the output be cleared before rendering to it.
     */
    SpriteMaskFilter.prototype.apply = function apply (filterManager, input, output, clear)
    {
        var maskSprite = this.maskSprite;
        var tex = this.maskSprite.texture;

        if (!tex.valid)
        {
            return;
        }
        if (!tex.transform)
        {
            // margin = 0.0, let it bleed a bit, shader code becomes easier
            // assuming that atlas textures were made with 1-pixel padding
            tex.transform = new TextureMatrix(tex, 0.0);
        }
        tex.transform.update();

        this.uniforms.npmAlpha = tex.baseTexture.premultiplyAlpha ? 0.0 : 1.0;
        this.uniforms.mask = tex;
        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`
        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)
            .prepend(tex.transform.mapCoord);
        this.uniforms.alpha = maskSprite.worldAlpha;
        this.uniforms.maskClamp = tex.transform.uClampFrame;

        filterManager.applyFilter(this, input, output, clear);
    };

    return SpriteMaskFilter;
}(Filter));

/**
 * System plugin to the renderer to manage masks.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var MaskSystem = /*@__PURE__*/(function (System) {
    function MaskSystem(renderer)
    {
        System.call(this, renderer);

        // TODO - we don't need both!
        /**
         * `true` if current pushed masked is scissor
         * @member {boolean}
         * @readonly
         */
        this.scissor = false;

        /**
         * Mask data
         * @member {PIXI.Graphics}
         * @readonly
         */
        this.scissorData = null;

        /**
         * Target to mask
         * @member {PIXI.DisplayObject}
         * @readonly
         */
        this.scissorRenderTarget = null;

        /**
         * Enable scissor
         * @member {boolean}
         * @readonly
         */
        this.enableScissor = false;

        /**
         * Pool of used sprite mask filters
         * @member {PIXI.SpriteMaskFilter[]}
         * @readonly
         */
        this.alphaMaskPool = [];

        /**
         * Current index of alpha mask pool
         * @member {number}
         * @default 0
         * @readonly
         */
        this.alphaMaskIndex = 0;
    }

    if ( System ) MaskSystem.__proto__ = System;
    MaskSystem.prototype = Object.create( System && System.prototype );
    MaskSystem.prototype.constructor = MaskSystem;

    /**
     * Applies the Mask and adds it to the current filter stack.
     *
     * @param {PIXI.DisplayObject} target - Display Object to push the mask to
     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.
     */
    MaskSystem.prototype.push = function push (target, maskData)
    {
        // TODO the root check means scissor rect will not
        // be used on render textures more info here:
        // https://github.com/pixijs/pixi.js/pull/3545

        if (maskData.isSprite)
        {
            this.pushSpriteMask(target, maskData);
        }
        else if (this.enableScissor
            && !this.scissor
            && this.renderer._activeRenderTarget.root
            && !this.renderer.stencil.stencilMaskStack.length
            && maskData.isFastRect())
        {
            var matrix = maskData.worldTransform;

            var rot = Math.atan2(matrix.b, matrix.a);

            // use the nearest degree!
            rot = Math.round(rot * (180 / Math.PI));

            if (rot % 90)
            {
                this.pushStencilMask(maskData);
            }
            else
            {
                this.pushScissorMask(target, maskData);
            }
        }
        else
        {
            this.pushStencilMask(maskData);
        }
    };

    /**
     * Removes the last mask from the mask stack and doesn't return it.
     *
     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from
     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.
     */
    MaskSystem.prototype.pop = function pop (target, maskData)
    {
        if (maskData.isSprite)
        {
            this.popSpriteMask(target, maskData);
        }
        else if (this.enableScissor && !this.renderer.stencil.stencilMaskStack.length)
        {
            this.popScissorMask(target, maskData);
        }
        else
        {
            this.popStencilMask(target, maskData);
        }
    };

    /**
     * Applies the Mask and adds it to the current filter stack.
     *
     * @param {PIXI.RenderTexture} target - Display Object to push the sprite mask to
     * @param {PIXI.Sprite} maskData - Sprite to be used as the mask
     */
    MaskSystem.prototype.pushSpriteMask = function pushSpriteMask (target, maskData)
    {
        var alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];

        if (!alphaMaskFilter)
        {
            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter(maskData)];
        }

        alphaMaskFilter[0].resolution = this.renderer.resolution;
        alphaMaskFilter[0].maskSprite = maskData;

        var stashFilterArea = target.filterArea;

        target.filterArea = maskData.getBounds(true);
        this.renderer.filter.push(target, alphaMaskFilter);
        target.filterArea = stashFilterArea;

        this.alphaMaskIndex++;
    };

    /**
     * Removes the last filter from the filter stack and doesn't return it.
     *
     */
    MaskSystem.prototype.popSpriteMask = function popSpriteMask ()
    {
        this.renderer.filter.pop();
        this.alphaMaskIndex--;
    };

    /**
     * Applies the Mask and adds it to the current filter stack.
     *
     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.
     */
    MaskSystem.prototype.pushStencilMask = function pushStencilMask (maskData)
    {
        this.renderer.batch.flush();
        this.renderer.stencil.pushStencil(maskData);
    };

    /**
     * Removes the last filter from the filter stack and doesn't return it.
     *
     */
    MaskSystem.prototype.popStencilMask = function popStencilMask ()
    {
        // this.renderer.currentRenderer.stop();
        this.renderer.stencil.popStencil();
    };

    /**
     *
     * @param {PIXI.DisplayObject} target - Display Object to push the mask to
     * @param {PIXI.Graphics} maskData - The masking data.
     */
    MaskSystem.prototype.pushScissorMask = function pushScissorMask (target, maskData)
    {
        maskData.renderable = true;

        var renderTarget = this.renderer._activeRenderTarget;

        var bounds = maskData.getBounds();

        bounds.fit(renderTarget.size);
        maskData.renderable = false;

        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);

        var resolution = this.renderer.resolution;

        this.renderer.gl.scissor(
            bounds.x * resolution,
            (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution,
            bounds.width * resolution,
            bounds.height * resolution
        );

        this.scissorRenderTarget = renderTarget;
        this.scissorData = maskData;
        this.scissor = true;
    };

    /**
     * Pop scissor mask
     *
     */
    MaskSystem.prototype.popScissorMask = function popScissorMask ()
    {
        this.scissorRenderTarget = null;
        this.scissorData = null;
        this.scissor = false;

        // must be scissor!
        var ref = this.renderer;
        var gl = ref.gl;

        gl.disable(gl.SCISSOR_TEST);
    };

    return MaskSystem;
}(System));

/**
 * System plugin to the renderer to manage stencils (used for masks).
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var StencilSystem = /*@__PURE__*/(function (System) {
    function StencilSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * The mask stack
         * @member {PIXI.Graphics[]}
         */
        this.stencilMaskStack = [];
    }

    if ( System ) StencilSystem.__proto__ = System;
    StencilSystem.prototype = Object.create( System && System.prototype );
    StencilSystem.prototype.constructor = StencilSystem;

    /**
     * Changes the mask stack that is used by this System.
     *
     * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack
     */
    StencilSystem.prototype.setMaskStack = function setMaskStack (stencilMaskStack)
    {
        var gl = this.renderer.gl;
        var curStackLen = this.stencilMaskStack.length;

        this.stencilMaskStack = stencilMaskStack;
        if (stencilMaskStack.length !== curStackLen)
        {
            if (stencilMaskStack.length === 0)
            {
                gl.disable(gl.STENCIL_TEST);
            }
            else
            {
                gl.enable(gl.STENCIL_TEST);
                this._useCurrent();
            }
        }
    };

    /**
     * Applies the Mask and adds it to the current stencil stack. @alvin
     *
     * @param {PIXI.Graphics} graphics - The mask
     */
    StencilSystem.prototype.pushStencil = function pushStencil (graphics)
    {
        var gl = this.renderer.gl;
        var prevMaskCount = this.stencilMaskStack.length;

        if (prevMaskCount === 0)
        {
            gl.enable(gl.STENCIL_TEST);
        }

        this.stencilMaskStack.push(graphics);

        // Increment the reference stencil value where the new mask overlaps with the old ones.
        gl.colorMask(false, false, false, false);
        gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);

        graphics.renderable = true;
        graphics.render(this.renderer);
        this.renderer.batch.flush();
        graphics.renderable = false;

        this._useCurrent();
    };

    /**
     * Removes the last mask from the stencil stack. @alvin
     */
    StencilSystem.prototype.popStencil = function popStencil ()
    {
        var gl = this.renderer.gl;
        var graphics = this.stencilMaskStack.pop();

        if (this.stencilMaskStack.length === 0)
        {
            // the stack is empty!
            gl.disable(gl.STENCIL_TEST);
            gl.clear(gl.STENCIL_BUFFER_BIT);
            gl.clearStencil(0);
        }
        else
        {
            // Decrement the reference stencil value where the popped mask overlaps with the other ones
            gl.colorMask(false, false, false, false);
            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);

            graphics.renderable = true;
            graphics.render(this.renderer);
            this.renderer.batch.flush();
            graphics.renderable = false;

            this._useCurrent();
        }
    };

    /**
     * Setup renderer to use the current stencil data.
     * @private
     */
    StencilSystem.prototype._useCurrent = function _useCurrent ()
    {
        var gl = this.renderer.gl;

        gl.colorMask(true, true, true, true);
        gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    };

    /**
     * Fill 1s equal to the number of acitve stencil masks.
     * @private
     * @return {number} The bitwise mask.
     */
    StencilSystem.prototype._getBitwiseMask = function _getBitwiseMask ()
    {
        return (1 << this.stencilMaskStack.length) - 1;
    };

    /**
     * Destroys the mask stack.
     *
     */
    StencilSystem.prototype.destroy = function destroy ()
    {
        System.prototype.destroy.call(this, this);

        this.stencilMaskStack = null;
    };

    return StencilSystem;
}(System));

/**
 * System plugin to the renderer to manage the projection matrix.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */

var ProjectionSystem = /*@__PURE__*/(function (System) {
    function ProjectionSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * Destination frame
         * @member {PIXI.Rectangle}
         * @readonly
         */
        this.destinationFrame = null;

        /**
         * Source frame
         * @member {PIXI.Rectangle}
         * @readonly
         */
        this.sourceFrame = null;

        /**
         * Default destination frame
         * @member {PIXI.Rectangle}
         * @readonly
         */
        this.defaultFrame = null;

        /**
         * Project matrix
         * @member {PIXI.Matrix}
         * @readonly
         */
        this.projectionMatrix = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"]();

        /**
         * A transform that will be appended to the projection matrix
         * if null, nothing will be applied
         * @member {PIXI.Matrix}
         */
        this.transform = null;
    }

    if ( System ) ProjectionSystem.__proto__ = System;
    ProjectionSystem.prototype = Object.create( System && System.prototype );
    ProjectionSystem.prototype.constructor = ProjectionSystem;

    /**
     * Updates the projection matrix based on a projection frame (which is a rectangle)
     *
     * @param {PIXI.Rectangle} destinationFrame - The destination frame.
     * @param {PIXI.Rectangle} sourceFrame - The source frame.
     * @param {Number} resolution - Resolution
     * @param {boolean} root - If is root
     */
    ProjectionSystem.prototype.update = function update (destinationFrame, sourceFrame, resolution, root)
    {
        this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;
        this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;

        this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);

        if (this.transform)
        {
            this.projectionMatrix.append(this.transform);
        }

        var renderer =  this.renderer;

        renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;
        renderer.globalUniforms.update();

        // this will work for now
        // but would be sweet to stick and even on the global uniforms..
        if (renderer.shader.shader)
        {
            renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);
        }
    };

    /**
     * Updates the projection matrix based on a projection frame (which is a rectangle)
     *
     * @param {PIXI.Rectangle} destinationFrame - The destination frame.
     * @param {PIXI.Rectangle} sourceFrame - The source frame.
     * @param {Number} resolution - Resolution
     * @param {boolean} root - If is root
     */
    ProjectionSystem.prototype.calculateProjection = function calculateProjection (destinationFrame, sourceFrame, resolution, root)
    {
        var pm = this.projectionMatrix;

        // I don't think we will need this line..
        // pm.identity();

        if (!root)
        {
            pm.a = (1 / destinationFrame.width * 2) * resolution;
            pm.d = (1 / destinationFrame.height * 2) * resolution;

            pm.tx = -1 - (sourceFrame.x * pm.a);
            pm.ty = -1 - (sourceFrame.y * pm.d);
        }
        else
        {
            pm.a = (1 / destinationFrame.width * 2) * resolution;
            pm.d = (-1 / destinationFrame.height * 2) * resolution;

            pm.tx = -1 - (sourceFrame.x * pm.a);
            pm.ty = 1 - (sourceFrame.y * pm.d);
        }
    };

    /**
     * Sets the transform of the active render target to the given matrix
     *
     * @param {PIXI.Matrix} matrix - The transformation matrix
     */
    ProjectionSystem.prototype.setTransform = function setTransform ()// matrix)
    {
        // this._activeRenderTarget.transform = matrix;
    };

    return ProjectionSystem;
}(System));

var tempRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();

/**
 * System plugin to the renderer to manage render textures.
 *
 * Should be added after FramebufferSystem
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */

var RenderTextureSystem = /*@__PURE__*/(function (System) {
    function RenderTextureSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * The clear background color as rgba
         * @member {number[]}
         */
        this.clearColor = renderer._backgroundColorRgba;

        // TODO move this property somewhere else!
        /**
         * List of masks for the StencilSystem
         * @member {PIXI.Graphics[]}
         * @readonly
         */
        this.defaultMaskStack = [];

        // empty render texture?
        /**
         * Render texture
         * @member {PIXI.RenderTexture}
         * @readonly
         */
        this.current = null;

        /**
         * Source frame
         * @member {PIXI.Rectangle}
         * @readonly
         */
        this.sourceFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();

        /**
         * Destination frame
         * @member {PIXI.Rectangle}
         * @readonly
         */
        this.destinationFrame = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"]();
    }

    if ( System ) RenderTextureSystem.__proto__ = System;
    RenderTextureSystem.prototype = Object.create( System && System.prototype );
    RenderTextureSystem.prototype.constructor = RenderTextureSystem;

    /**
     * Bind the current render texture
     * @param {PIXI.RenderTexture} [renderTexture] - RenderTexture to bind, by default its `null`, the screen
     * @param {PIXI.Rectangle} [sourceFrame] - part of screen that is mapped to the renderTexture
     * @param {PIXI.Rectangle} [destinationFrame] - part of renderTexture, by default it has the same size as sourceFrame
     */
    RenderTextureSystem.prototype.bind = function bind (renderTexture, sourceFrame, destinationFrame)
    {
        if ( renderTexture === void 0 ) renderTexture = null;

        this.current = renderTexture;

        var renderer = this.renderer;

        var resolution;

        if (renderTexture)
        {
            var baseTexture = renderTexture.baseTexture;

            resolution = baseTexture.resolution;

            if (!destinationFrame)
            {
                tempRect.width = baseTexture.realWidth;
                tempRect.height = baseTexture.realHeight;

                destinationFrame = tempRect;
            }

            if (!sourceFrame)
            {
                sourceFrame = destinationFrame;
            }

            this.renderer.framebuffer.bind(baseTexture.framebuffer, destinationFrame);

            this.renderer.projection.update(destinationFrame, sourceFrame, resolution, false);
            this.renderer.stencil.setMaskStack(baseTexture.stencilMaskStack);
        }
        else
        {
            resolution = this.renderer.resolution;

            // TODO these validation checks happen deeper down..
            // thing they can be avoided..
            if (!destinationFrame)
            {
                tempRect.width = renderer.width;
                tempRect.height = renderer.height;

                destinationFrame = tempRect;
            }

            if (!sourceFrame)
            {
                sourceFrame = destinationFrame;
            }

            renderer.framebuffer.bind(null, destinationFrame);

            // TODO store this..
            this.renderer.projection.update(destinationFrame, sourceFrame, resolution, true);
            this.renderer.stencil.setMaskStack(this.defaultMaskStack);
        }

        this.sourceFrame.copyFrom(sourceFrame);

        this.destinationFrame.x = destinationFrame.x / resolution;
        this.destinationFrame.y = destinationFrame.y / resolution;

        this.destinationFrame.width = destinationFrame.width / resolution;
        this.destinationFrame.height = destinationFrame.height / resolution;

        if (sourceFrame === destinationFrame)
        {
            this.sourceFrame.copyFrom(this.destinationFrame);
        }
    };

    /**
     * Erases the render texture and fills the drawing area with a colour
     *
     * @param {number[]} [clearColor] - The color as rgba, default to use the renderer backgroundColor
     * @return {PIXI.Renderer} Returns itself.
     */
    RenderTextureSystem.prototype.clear = function clear (clearColor)
    {
        if (this.current)
        {
            clearColor = clearColor || this.current.baseTexture.clearColor;
        }
        else
        {
            clearColor = clearColor || this.clearColor;
        }

        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
    };

    RenderTextureSystem.prototype.resize = function resize ()// screenWidth, screenHeight)
    {
        // resize the root only!
        this.bind(null);
    };

    /**
     * Resets renderTexture state
     */
    RenderTextureSystem.prototype.reset = function reset ()
    {
        this.bind(null);
    };

    return RenderTextureSystem;
}(System));

/**
 * Helper class to create a WebGL Program
 *
 * @class
 * @memberof PIXI
 */
var GLProgram = function GLProgram(program, uniformData)
{
    /**
     * The shader program
     *
     * @member {WebGLProgram}
     */
    this.program = program;

    /**
     * holds the uniform data which contains uniform locations
     * and current uniform values used for caching and preventing unneeded GPU commands
     * @member {Object}
     */
    this.uniformData = uniformData;

    /**
     * uniformGroups holds the various upload functions for the shader. Each uniform group
     * and program have a unique upload function generated.
     * @member {Object}
     */
    this.uniformGroups = {};
};

/**
 * Destroys this program
 */
GLProgram.prototype.destroy = function destroy ()
{
    this.uniformData = null;
    this.uniformGroups = null;
    this.program = null;
};

var UID$4 = 0;

/**
 * System plugin to the renderer to manage shaders.
 *
 * @class
 * @memberof PIXI.systems
 * @extends PIXI.System
 */
var ShaderSystem = /*@__PURE__*/(function (System) {
    function ShaderSystem(renderer)
    {
        System.call(this, renderer);

        // Validation check that this environment support `new Function`
        this.systemCheck();

        /**
         * The current WebGL rendering context
         *
         * @member {WebGLRenderingContext}
         */
        this.gl = null;

        this.shader = null;
        this.program = null;

        /**
         * Cache to holds the generated functions. Stored against UniformObjects unique signature
         * @type {Object}
         * @private
         */
        this.cache = {};

        this.id = UID$4++;
    }

    if ( System ) ShaderSystem.__proto__ = System;
    ShaderSystem.prototype = Object.create( System && System.prototype );
    ShaderSystem.prototype.constructor = ShaderSystem;

    /**
     * Overrideable function by `@pixi/unsafe-eval` to silence
     * throwing an error if platform doesn't support unsafe-evals.
     *
     * @private
     */
    ShaderSystem.prototype.systemCheck = function systemCheck ()
    {
        if (!unsafeEvalSupported())
        {
            throw new Error('Current environment does not allow unsafe-eval, '
                + 'please use @pixi/unsafe-eval module to enable support.');
        }
    };

    ShaderSystem.prototype.contextChange = function contextChange (gl)
    {
        this.gl = gl;
        this.reset();
    };

    /**
     * Changes the current shader to the one given in parameter
     *
     * @param {PIXI.Shader} shader - the new shader
     * @param {boolean} dontSync - false if the shader should automatically sync its uniforms.
     * @returns {PIXI.GLProgram} the glProgram that belongs to the shader.
     */
    ShaderSystem.prototype.bind = function bind (shader, dontSync)
    {
        shader.uniforms.globals = this.renderer.globalUniforms;

        var program = shader.program;
        var glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateShader(shader);

        this.shader = shader;

        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..
        if (this.program !== program)
        {
            this.program = program;
            this.gl.useProgram(glProgram.program);
        }

        if (!dontSync)
        {
            this.syncUniformGroup(shader.uniformGroup);
        }

        return glProgram;
    };

    /**
     * Uploads the uniforms values to the currently bound shader.
     *
     * @param {object} uniforms - the uniforms values that be applied to the current shader
     */
    ShaderSystem.prototype.setUniforms = function setUniforms (uniforms)
    {
        var shader = this.shader.program;
        var glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];

        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);
    };

    ShaderSystem.prototype.syncUniformGroup = function syncUniformGroup (group)
    {
        var glProgram = this.getglProgram();

        if (!group.static || group.dirtyId !== glProgram.uniformGroups[group.id])
        {
            glProgram.uniformGroups[group.id] = group.dirtyId;

            this.syncUniforms(group, glProgram);
        }
    };

    /**
     * Overrideable by the @pixi/unsafe-eval package to use static
     * syncUnforms instead.
     *
     * @private
     */
    ShaderSystem.prototype.syncUniforms = function syncUniforms (group, glProgram)
    {
        var syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);

        syncFunc(glProgram.uniformData, group.uniforms, this.renderer);
    };

    ShaderSystem.prototype.createSyncGroups = function createSyncGroups (group)
    {
        var id = this.getSignature(group, this.shader.program.uniformData);

        if (!this.cache[id])
        {
            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);
        }

        group.syncUniforms[this.shader.program.id] = this.cache[id];

        return group.syncUniforms[this.shader.program.id];
    };

    /**
     * Takes a uniform group and data and generates a unique signature for them.
     *
     * @param {PIXI.UniformGroup} group the uniform group to get signature of
     * @param {Object} uniformData uniform information generated by the shader
     * @returns {String} Unique signature of the uniform group
     * @private
     */
    ShaderSystem.prototype.getSignature = function getSignature (group, uniformData)
    {
        var uniforms = group.uniforms;

        var strings = [];

        for (var i in uniforms)
        {
            strings.push(i);

            if (uniformData[i])
            {
                strings.push(uniformData[i].type);
            }
        }

        return strings.join('-');
    };

    /**
     * Returns the underlying GLShade rof the currently bound shader.
     * This can be handy for when you to have a little more control over the setting of your uniforms.
     *
     * @return {PIXI.GLProgram} the glProgram for the currently bound Shader for this context
     */
    ShaderSystem.prototype.getglProgram = function getglProgram ()
    {
        if (this.shader)
        {
            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];
        }

        return null;
    };

    /**
     * Generates a glProgram version of the Shader provided.
     *
     * @private
     * @param {PIXI.Shader} shader the shader that the glProgram will be based on.
     * @return {PIXI.GLProgram} A shiny new glProgram!
     */
    ShaderSystem.prototype.generateShader = function generateShader (shader)
    {
        var gl = this.gl;

        var program = shader.program;

        var attribMap = {};

        for (var i in program.attributeData)
        {
            attribMap[i] = program.attributeData[i].location;
        }

        var shaderProgram = compileProgram(gl, program.vertexSrc, program.fragmentSrc, attribMap);
        var uniformData = {};

        for (var i$1 in program.uniformData)
        {
            var data = program.uniformData[i$1];

            uniformData[i$1] = {
                location: gl.getUniformLocation(shaderProgram, i$1),
                value: defaultValue(data.type, data.size),
            };
        }

        var glProgram = new GLProgram(shaderProgram, uniformData);

        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;

        return glProgram;
    };

    /**
     * Resets ShaderSystem state, does not affect WebGL state
     */
    ShaderSystem.prototype.reset = function reset ()
    {
        this.program = null;
        this.shader = null;
    };

    /**
     * Destroys this System and removes all its textures
     */
    ShaderSystem.prototype.destroy = function destroy ()
    {
        // TODO implement destroy method for ShaderSystem
        this.destroyed = true;
    };

    return ShaderSystem;
}(System));

/**
 * Maps gl blend combinations to WebGL.
 *
 * @memberof PIXI
 * @function mapWebGLBlendModesToPixi
 * @private
 * @param {WebGLRenderingContext} gl - The rendering context.
 * @param {number[][]} [array=[]] - The array to output into.
 * @return {number[][]} Mapped modes.
 */
function mapWebGLBlendModesToPixi(gl, array)
{
    if ( array === void 0 ) array = [];

    // TODO - premultiply alpha would be different.
    // add a boolean for that!
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].ADD] = [gl.ONE, gl.ONE];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].NONE] = [0, 0];

    // not-premultiplied blend modes
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].NORMAL_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].ADD_NPM] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SCREEN_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];

    // composite operations
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SRC_IN] = [gl.DST_ALPHA, gl.ZERO];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].DST_IN] = [gl.ZERO, gl.SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];

    // SUBTRACT from flash
    array[_pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];

    return array;
}

var BLEND$1 = 0;
var OFFSET$1 = 1;
var CULLING$1 = 2;
var DEPTH_TEST$1 = 3;
var WINDING$1 = 4;

/**
 * System plugin to the renderer to manage WebGL state machines.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var StateSystem = /*@__PURE__*/(function (System) {
    function StateSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * GL context
         * @member {WebGLRenderingContext}
         * @readonly
         */
        this.gl = null;

        /**
         * State ID
         * @member {number}
         * @readonly
         */
        this.stateId = 0;

        /**
         * Polygon offset
         * @member {number}
         * @readonly
         */
        this.polygonOffset = 0;

        /**
         * Blend mode
         * @member {number}
         * @default PIXI.BLEND_MODES.NONE
         * @readonly
         */
        this.blendMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["BLEND_MODES"].NONE;

        /**
         * Whether current blend equation is different
         * @member {boolean}
         * @protected
         */
        this._blendEq = false;

        /**
         * Collection of calls
         * @member {function[]}
         * @readonly
         */
        this.map = [];

        // map functions for when we set state..
        this.map[BLEND$1] = this.setBlend;
        this.map[OFFSET$1] = this.setOffset;
        this.map[CULLING$1] = this.setCullFace;
        this.map[DEPTH_TEST$1] = this.setDepthTest;
        this.map[WINDING$1] = this.setFrontFace;

        /**
         * Collection of check calls
         * @member {function[]}
         * @readonly
         */
        this.checks = [];

        /**
         * Default WebGL State
         * @member {PIXI.State}
         * @readonly
         */
        this.defaultState = new State();
        this.defaultState.blend = true;
        this.defaultState.depth = true;
    }

    if ( System ) StateSystem.__proto__ = System;
    StateSystem.prototype = Object.create( System && System.prototype );
    StateSystem.prototype.constructor = StateSystem;

    StateSystem.prototype.contextChange = function contextChange (gl)
    {
        this.gl = gl;

        this.blendModes = mapWebGLBlendModesToPixi(gl);

        this.set(this.defaultState);

        this.reset();
    };

    /**
     * Sets the current state
     *
     * @param {*} state - The state to set.
     */
    StateSystem.prototype.set = function set (state)
    {
        state = state || this.defaultState;

        // TODO maybe to an object check? ( this.state === state )?
        if (this.stateId !== state.data)
        {
            var diff = this.stateId ^ state.data;
            var i = 0;

            // order from least to most common
            while (diff)
            {
                if (diff & 1)
                {
                    // state change!
                    this.map[i].call(this, !!(state.data & (1 << i)));
                }

                diff = diff >> 1;
                i++;
            }

            this.stateId = state.data;
        }

        // based on the above settings we check for specific modes..
        // for example if blend is active we check and set the blend modes
        // or of polygon offset is active we check the poly depth.
        for (var i$1 = 0; i$1 < this.checks.length; i$1++)
        {
            this.checks[i$1](this, state);
        }
    };

    /**
     * Sets the state, when previous state is unknown
     *
     * @param {*} state - The state to set
     */
    StateSystem.prototype.forceState = function forceState (state)
    {
        state = state || this.defaultState;
        for (var i = 0; i < this.map.length; i++)
        {
            this.map[i].call(this, !!(state.data & (1 << i)));
        }
        for (var i$1 = 0; i$1 < this.checks.length; i$1++)
        {
            this.checks[i$1](this, state);
        }

        this.stateId = state.data;
    };

    /**
     * Enables or disabled blending.
     *
     * @param {boolean} value - Turn on or off webgl blending.
     */
    StateSystem.prototype.setBlend = function setBlend (value)
    {
        this.updateCheck(StateSystem.checkBlendMode, value);

        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);
    };

    /**
     * Enables or disable polygon offset fill
     *
     * @param {boolean} value - Turn on or off webgl polygon offset testing.
     */
    StateSystem.prototype.setOffset = function setOffset (value)
    {
        this.updateCheck(StateSystem.checkPolygonOffset, value);

        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);
    };

    /**
     * Sets whether to enable or disable depth test.
     *
     * @param {boolean} value - Turn on or off webgl depth testing.
     */
    StateSystem.prototype.setDepthTest = function setDepthTest (value)
    {
        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);
    };

    /**
     * Sets whether to enable or disable cull face.
     *
     * @param {boolean} value - Turn on or off webgl cull face.
     */
    StateSystem.prototype.setCullFace = function setCullFace (value)
    {
        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);
    };

    /**
     * Sets the gl front face.
     *
     * @param {boolean} value - true is clockwise and false is counter-clockwise
     */
    StateSystem.prototype.setFrontFace = function setFrontFace (value)
    {
        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);
    };

    /**
     * Sets the blend mode.
     *
     * @param {number} value - The blend mode to set to.
     */
    StateSystem.prototype.setBlendMode = function setBlendMode (value)
    {
        if (value === this.blendMode)
        {
            return;
        }

        this.blendMode = value;

        var mode = this.blendModes[value];
        var gl = this.gl;

        if (mode.length === 2)
        {
            gl.blendFunc(mode[0], mode[1]);
        }
        else
        {
            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);
        }
        if (mode.length === 6)
        {
            this._blendEq = true;
            gl.blendEquationSeparate(mode[4], mode[5]);
        }
        else if (this._blendEq)
        {
            this._blendEq = false;
            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
        }
    };

    /**
     * Sets the polygon offset.
     *
     * @param {number} value - the polygon offset
     * @param {number} scale - the polygon offset scale
     */
    StateSystem.prototype.setPolygonOffset = function setPolygonOffset (value, scale)
    {
        this.gl.polygonOffset(value, scale);
    };

    // used
    /**
     * Resets all the logic and disables the vaos
     */
    StateSystem.prototype.reset = function reset ()
    {
        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);

        this.forceState(0);

        this._blendEq = true;
        this.blendMode = -1;
        this.setBlendMode(0);
    };

    /**
     * checks to see which updates should be checked based on which settings have been activated.
     * For example, if blend is enabled then we should check the blend modes each time the state is changed
     * or if polygon fill is activated then we need to check if the polygon offset changes.
     * The idea is that we only check what we have too.
     *
     * @param {Function} func  the checking function to add or remove
     * @param {boolean} value  should the check function be added or removed.
     */
    StateSystem.prototype.updateCheck = function updateCheck (func, value)
    {
        var index = this.checks.indexOf(func);

        if (value && index === -1)
        {
            this.checks.push(func);
        }
        else if (!value && index !== -1)
        {
            this.checks.splice(index, 1);
        }
    };

    /**
     * A private little wrapper function that we call to check the blend mode.
     *
     * @static
     * @private
     * @param {PIXI.StateSystem} System  the System to perform the state check on
     * @param {PIXI.State} state  the state that the blendMode will pulled from
     */
    StateSystem.checkBlendMode = function checkBlendMode (system, state)
    {
        system.setBlendMode(state.blendMode);
    };

    /**
     * A private little wrapper function that we call to check the polygon offset.
     *
     * @static
     * @private
     * @param {PIXI.StateSystem} System  the System to perform the state check on
     * @param {PIXI.State} state  the state that the blendMode will pulled from
     */
    StateSystem.checkPolygonOffset = function checkPolygonOffset (system, state)
    {
        system.setPolygonOffset(state.polygonOffset, 0);
    };

    return StateSystem;
}(System));

/**
 * System plugin to the renderer to manage texture garbage collection on the GPU,
 * ensuring that it does not get clogged up with textures that are no longer being used.
 *
 * @class
 * @memberof PIXI.systems
 * @extends PIXI.System
 */
var TextureGCSystem = /*@__PURE__*/(function (System) {
    function TextureGCSystem(renderer)
    {
        System.call(this, renderer);

        /**
         * Count
         * @member {number}
         * @readonly
         */
        this.count = 0;

        /**
         * Check count
         * @member {number}
         * @readonly
         */
        this.checkCount = 0;

        /**
         * Maximum idle time, in seconds
         * @member {number}
         * @see PIXI.settings.GC_MAX_IDLE
         */
        this.maxIdle = _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].GC_MAX_IDLE;

        /**
         * Maximum number of item to check
         * @member {number}
         * @see PIXI.settings.GC_MAX_CHECK_COUNT
         */
        this.checkCountMax = _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].GC_MAX_CHECK_COUNT;

        /**
         * Current garabage collection mode
         * @member {PIXI.GC_MODES}
         * @see PIXI.settings.GC_MODE
         */
        this.mode = _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].GC_MODE;
    }

    if ( System ) TextureGCSystem.__proto__ = System;
    TextureGCSystem.prototype = Object.create( System && System.prototype );
    TextureGCSystem.prototype.constructor = TextureGCSystem;

    /**
     * Checks to see when the last time a texture was used
     * if the texture has not been used for a specified amount of time it will be removed from the GPU
     */
    TextureGCSystem.prototype.postrender = function postrender ()
    {
        this.count++;

        if (this.mode === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["GC_MODES"].MANUAL)
        {
            return;
        }

        this.checkCount++;

        if (this.checkCount > this.checkCountMax)
        {
            this.checkCount = 0;

            this.run();
        }
    };

    /**
     * Checks to see when the last time a texture was used
     * if the texture has not been used for a specified amount of time it will be removed from the GPU
     */
    TextureGCSystem.prototype.run = function run ()
    {
        var tm = this.renderer.texture;
        var managedTextures =  tm.managedTextures;
        var wasRemoved = false;

        for (var i = 0; i < managedTextures.length; i++)
        {
            var texture = managedTextures[i];

            // only supports non generated textures at the moment!
            if (!texture.framebuffer && this.count - texture.touched > this.maxIdle)
            {
                tm.destroyTexture(texture, true);
                managedTextures[i] = null;
                wasRemoved = true;
            }
        }

        if (wasRemoved)
        {
            var j = 0;

            for (var i$1 = 0; i$1 < managedTextures.length; i$1++)
            {
                if (managedTextures[i$1] !== null)
                {
                    managedTextures[j++] = managedTextures[i$1];
                }
            }

            managedTextures.length = j;
        }
    };

    /**
     * Removes all the textures within the specified displayObject and its children from the GPU
     *
     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.
     */
    TextureGCSystem.prototype.unload = function unload (displayObject)
    {
        var tm = this.renderer.textureSystem;

        // only destroy non generated textures
        if (displayObject._texture && displayObject._texture._glRenderTargets)
        {
            tm.destroyTexture(displayObject._texture);
        }

        for (var i = displayObject.children.length - 1; i >= 0; i--)
        {
            this.unload(displayObject.children[i]);
        }
    };

    return TextureGCSystem;
}(System));

/**
 * Internal texture for WebGL context
 * @class
 * @memberof PIXI
 */
var GLTexture = function GLTexture(texture)
{
    /**
     * The WebGL texture
     * @member {WebGLTexture}
     */
    this.texture = texture;

    /**
     * Width of texture that was used in texImage2D
     * @member {number}
     */
    this.width = -1;

    /**
     * Height of texture that was used in texImage2D
     * @member {number}
     */
    this.height = -1;

    /**
     * Texture contents dirty flag
     * @member {number}
     */
    this.dirtyId = -1;

    /**
     * Texture style dirty flag
     * @member {number}
     */
    this.dirtyStyleId = -1;

    /**
     * Whether mip levels has to be generated
     * @member {boolean}
     */
    this.mipmap = false;

    /**
     * WrapMode copied from baseTexture
     * @member {number}
     */
    this.wrapMode = 33071;

    /**
     * Type copied from baseTexture
     * @member {number}
     */
    this.type = 6408;

    /**
     * Type copied from baseTexture
     * @member {number}
     */
    this.internalFormat = 5121;
};

/**
 * System plugin to the renderer to manage textures.
 *
 * @class
 * @extends PIXI.System
 * @memberof PIXI.systems
 */
var TextureSystem = /*@__PURE__*/(function (System) {
    function TextureSystem(renderer)
    {
        System.call(this, renderer);

        // TODO set to max textures...
        /**
         * Bound textures
         * @member {PIXI.BaseTexture[]}
         * @readonly
         */
        this.boundTextures = [];
        /**
         * Current location
         * @member {number}
         * @readonly
         */
        this.currentLocation = -1;

        /**
         * List of managed textures
         * @member {PIXI.BaseTexture[]}
         * @readonly
         */
        this.managedTextures = [];

        /**
         * Did someone temper with textures state? We'll overwrite them when we need to unbind something.
         * @member {boolean}
         * @private
         */
        this._unknownBoundTextures = false;

        /**
         * BaseTexture value that shows that we don't know what is bound
         * @member {PIXI.BaseTexture}
         * @readonly
         */
        this.unknownTexture = new BaseTexture();
    }

    if ( System ) TextureSystem.__proto__ = System;
    TextureSystem.prototype = Object.create( System && System.prototype );
    TextureSystem.prototype.constructor = TextureSystem;

    /**
     * Sets up the renderer context and necessary buffers.
     */
    TextureSystem.prototype.contextChange = function contextChange ()
    {
        var gl = this.gl = this.renderer.gl;

        this.CONTEXT_UID = this.renderer.CONTEXT_UID;

        this.webGLVersion = this.renderer.context.webGLVersion;

        var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);

        this.boundTextures.length = maxTextures;

        for (var i = 0; i < maxTextures; i++)
        {
            this.boundTextures[i] = null;
        }

        // TODO move this.. to a nice make empty textures class..
        this.emptyTextures = {};

        var emptyTexture2D = new GLTexture(gl.createTexture());

        gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));

        this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D;
        this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(gl.createTexture());

        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);

        for (var i$1 = 0; i$1 < 6; i$1++)
        {
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i$1, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        }

        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

        for (var i$2 = 0; i$2 < this.boundTextures.length; i$2++)
        {
            this.bind(null, i$2);
        }
    };

    /**
     * Bind a texture to a specific location
     *
     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`
     *
     * @param {PIXI.Texture|PIXI.BaseTexture} texture - Texture to bind
     * @param {number} [location=0] - Location to bind at
     */
    TextureSystem.prototype.bind = function bind (texture, location)
    {
        if ( location === void 0 ) location = 0;

        var ref = this;
        var gl = ref.gl;

        if (texture)
        {
            texture = texture.baseTexture || texture;

            if (texture.valid)
            {
                texture.touched = this.renderer.textureGC.count;

                var glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);

                if (this.currentLocation !== location)
                {
                    this.currentLocation = location;
                    gl.activeTexture(gl.TEXTURE0 + location);
                }

                if (this.boundTextures[location] !== texture)
                {
                    gl.bindTexture(texture.target, glTexture.texture);
                }

                if (glTexture.dirtyId !== texture.dirtyId)
                {
                    this.updateTexture(texture);
                }

                this.boundTextures[location] = texture;
            }
        }
        else
        {
            if (this.currentLocation !== location)
            {
                this.currentLocation = location;
                gl.activeTexture(gl.TEXTURE0 + location);
            }

            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);
            this.boundTextures[location] = null;
        }
    };

    /**
     * Resets texture location and bound textures
     *
     * Actual `bind(null, i)` calls will be performed at next `unbind()` call
     */
    TextureSystem.prototype.reset = function reset ()
    {
        this._unknownBoundTextures = true;
        this.currentLocation = -1;

        for (var i = 0; i < this.boundTextures.length; i++)
        {
            this.boundTextures[i] = this.unknownTexture;
        }
    };

    /**
     * Unbind a texture
     * @param {PIXI.Texture|PIXI.BaseTexture} texture - Texture to bind
     */
    TextureSystem.prototype.unbind = function unbind (texture)
    {
        var ref = this;
        var gl = ref.gl;
        var boundTextures = ref.boundTextures;

        if (this._unknownBoundTextures)
        {
            this._unknownBoundTextures = false;
            // someone changed webGL state,
            // we have to be sure that our texture does not appear in multi-texture renderer samplers
            for (var i = 0; i < boundTextures.length; i++)
            {
                if (boundTextures[i] === this.unknownTexture)
                {
                    this.bind(null, i);
                }
            }
        }

        for (var i$1 = 0; i$1 < boundTextures.length; i$1++)
        {
            if (boundTextures[i$1] === texture)
            {
                if (this.currentLocation !== i$1)
                {
                    gl.activeTexture(gl.TEXTURE0 + i$1);
                    this.currentLocation = i$1;
                }

                gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[texture.target].texture);
                boundTextures[i$1] = null;
            }
        }
    };

    /**
     * Initialize a texture
     *
     * @private
     * @param {PIXI.BaseTexture} texture - Texture to initialize
     */
    TextureSystem.prototype.initTexture = function initTexture (texture)
    {
        var glTexture = new GLTexture(this.gl.createTexture());

        // guarantee an update..
        glTexture.dirtyId = -1;

        texture._glTextures[this.CONTEXT_UID] = glTexture;

        this.managedTextures.push(texture);
        texture.on('dispose', this.destroyTexture, this);

        return glTexture;
    };

    TextureSystem.prototype.initTextureType = function initTextureType (texture, glTexture)
    {
        glTexture.internalFormat = texture.format;
        glTexture.type = texture.type;
        if (this.webGLVersion !== 2)
        {
            return;
        }
        var gl = this.renderer.gl;

        if (texture.type === gl.FLOAT
            && texture.format === gl.RGBA)
        {
            glTexture.internalFormat = gl.RGBA32F;
        }
        // that's WebGL1 HALF_FLOAT_OES
        // we have to convert it to WebGL HALF_FLOAT
        if (texture.type === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].HALF_FLOAT)
        {
            glTexture.type = gl.HALF_FLOAT;
        }
        if (glTexture.type === gl.HALF_FLOAT
            && texture.format === gl.RGBA)
        {
            glTexture.internalFormat = gl.RGBA16F;
        }
    };

    /**
     * Update a texture
     *
     * @private
     * @param {PIXI.BaseTexture} texture - Texture to initialize
     */
    TextureSystem.prototype.updateTexture = function updateTexture (texture)
    {
        var glTexture = texture._glTextures[this.CONTEXT_UID];

        if (!glTexture)
        {
            return;
        }

        var renderer = this.renderer;

        this.initTextureType(texture, glTexture);

        if (texture.resource && texture.resource.upload(renderer, texture, glTexture))
        ;
        else
        {
            // default, renderTexture-like logic
            var width = texture.realWidth;
            var height = texture.realHeight;
            var gl = renderer.gl;

            if (glTexture.width !== width
                || glTexture.height !== height
                || glTexture.dirtyId < 0)
            {
                glTexture.width = width;
                glTexture.height = height;

                gl.texImage2D(texture.target, 0,
                    glTexture.internalFormat,
                    width,
                    height,
                    0,
                    texture.format,
                    glTexture.type,
                    null);
            }
        }

        // lets only update what changes..
        if (texture.dirtyStyleId !== glTexture.dirtyStyleId)
        {
            this.updateTextureStyle(texture);
        }
        glTexture.dirtyId = texture.dirtyId;
    };

    /**
     * Deletes the texture from WebGL
     *
     * @private
     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to destroy
     * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.
     */
    TextureSystem.prototype.destroyTexture = function destroyTexture (texture, skipRemove)
    {
        var ref = this;
        var gl = ref.gl;

        texture = texture.baseTexture || texture;

        if (texture._glTextures[this.CONTEXT_UID])
        {
            this.unbind(texture);

            gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);
            texture.off('dispose', this.destroyTexture, this);

            delete texture._glTextures[this.CONTEXT_UID];

            if (!skipRemove)
            {
                var i = this.managedTextures.indexOf(texture);

                if (i !== -1)
                {
                    Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["removeItems"])(this.managedTextures, i, 1);
                }
            }
        }
    };

    /**
     * Update texture style such as mipmap flag
     *
     * @private
     * @param {PIXI.BaseTexture} texture - Texture to update
     */
    TextureSystem.prototype.updateTextureStyle = function updateTextureStyle (texture)
    {
        var glTexture = texture._glTextures[this.CONTEXT_UID];

        if (!glTexture)
        {
            return;
        }

        if ((texture.mipmap === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["MIPMAP_MODES"].POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo)
        {
            glTexture.mipmap = 0;
            glTexture.wrapMode = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["WRAP_MODES"].CLAMP;
        }
        else
        {
            glTexture.mipmap = texture.mipmap >= 1;
            glTexture.wrapMode = texture.wrapMode;
        }

        if (texture.resource && texture.resource.style(this.renderer, texture, glTexture))
        ;
        else
        {
            this.setStyle(texture, glTexture);
        }

        glTexture.dirtyStyleId = texture.dirtyStyleId;
    };

    /**
     * Set style for texture
     *
     * @private
     * @param {PIXI.BaseTexture} texture - Texture to update
     * @param {PIXI.GLTexture} glTexture
     */
    TextureSystem.prototype.setStyle = function setStyle (texture, glTexture)
    {
        var gl = this.gl;

        if (glTexture.mipmap)
        {
            gl.generateMipmap(texture.target);
        }

        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode);
        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode);

        if (glTexture.mipmap)
        {
            /* eslint-disable max-len */
            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);
            /* eslint-disable max-len */

            var anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;

            if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["SCALE_MODES"].LINEAR)
            {
                var level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));

                gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);
            }
        }
        else
        {
            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode ? gl.LINEAR : gl.NEAREST);
        }

        gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode ? gl.LINEAR : gl.NEAREST);
    };

    return TextureSystem;
}(System));

/**
 * Systems are individual components to the Renderer pipeline.
 * @namespace PIXI.systems
 */

var systems = ({
    FilterSystem: FilterSystem,
    BatchSystem: BatchSystem,
    ContextSystem: ContextSystem,
    FramebufferSystem: FramebufferSystem,
    GeometrySystem: GeometrySystem,
    MaskSystem: MaskSystem,
    StencilSystem: StencilSystem,
    ProjectionSystem: ProjectionSystem,
    RenderTextureSystem: RenderTextureSystem,
    ShaderSystem: ShaderSystem,
    StateSystem: StateSystem,
    TextureGCSystem: TextureGCSystem,
    TextureSystem: TextureSystem
});

var tempMatrix = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"]();

/**
 * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}
 * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.
 *
 * @abstract
 * @class
 * @extends PIXI.utils.EventEmitter
 * @memberof PIXI
 */
var AbstractRenderer = /*@__PURE__*/(function (EventEmitter) {
    function AbstractRenderer(system, options)
    {
        EventEmitter.call(this);

        // Add the default render options
        options = Object.assign({}, _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].RENDER_OPTIONS, options);

        // Deprecation notice for renderer roundPixels option
        if (options.roundPixels)
        {
            _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].ROUND_PIXELS = options.roundPixels;
            Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["deprecation"])('5.0.0', 'Renderer roundPixels option is deprecated, please use PIXI.settings.ROUND_PIXELS', 2);
        }

        /**
         * The supplied constructor options.
         *
         * @member {Object}
         * @readOnly
         */
        this.options = options;

        /**
         * The type of the renderer.
         *
         * @member {number}
         * @default PIXI.RENDERER_TYPE.UNKNOWN
         * @see PIXI.RENDERER_TYPE
         */
        this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["RENDERER_TYPE"].UNKNOWN;

        /**
         * Measurements of the screen. (0, 0, screenWidth, screenHeight).
         *
         * Its safe to use as filterArea or hitArea for the whole stage.
         *
         * @member {PIXI.Rectangle}
         */
        this.screen = new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Rectangle"](0, 0, options.width, options.height);

        /**
         * The canvas element that everything is drawn to.
         *
         * @member {HTMLCanvasElement}
         */
        this.view = options.view || document.createElement('canvas');

        /**
         * The resolution / device pixel ratio of the renderer.
         *
         * @member {number}
         * @default 1
         */
        this.resolution = options.resolution || _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].RESOLUTION;

        /**
         * Whether the render view is transparent.
         *
         * @member {boolean}
         */
        this.transparent = options.transparent;

        /**
         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.
         *
         * @member {boolean}
         */
        this.autoDensity = options.autoDensity || options.autoResize || false;
        // autoResize is deprecated, provides fallback support

        /**
         * The value of the preserveDrawingBuffer flag affects whether or not the contents of
         * the stencil buffer is retained after rendering.
         *
         * @member {boolean}
         */
        this.preserveDrawingBuffer = options.preserveDrawingBuffer;

        /**
         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.
         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every
         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect
         * to clear the canvas every frame. Disable this by setting this to false. For example, if
         * your game has a canvas filling background image you often don't need this set.
         *
         * @member {boolean}
         * @default
         */
        this.clearBeforeRender = options.clearBeforeRender;

        /**
         * The background color as a number.
         *
         * @member {number}
         * @protected
         */
        this._backgroundColor = 0x000000;

        /**
         * The background color as an [R, G, B] array.
         *
         * @member {number[]}
         * @protected
         */
        this._backgroundColorRgba = [0, 0, 0, 0];

        /**
         * The background color as a string.
         *
         * @member {string}
         * @protected
         */
        this._backgroundColorString = '#000000';

        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter

        /**
         * This temporary display object used as the parent of the currently being rendered item.
         *
         * @member {PIXI.DisplayObject}
         * @protected
         */
        this._tempDisplayObjectParent = new _pixi_display__WEBPACK_IMPORTED_MODULE_6__["Container"]();

        /**
         * The last root object that the renderer tried to render.
         *
         * @member {PIXI.DisplayObject}
         * @protected
         */
        this._lastObjectRendered = this._tempDisplayObjectParent;

        /**
         * Collection of plugins.
         * @readonly
         * @member {object}
         */
        this.plugins = {};
    }

    if ( EventEmitter ) AbstractRenderer.__proto__ = EventEmitter;
    AbstractRenderer.prototype = Object.create( EventEmitter && EventEmitter.prototype );
    AbstractRenderer.prototype.constructor = AbstractRenderer;

    var prototypeAccessors = { width: { configurable: true },height: { configurable: true },backgroundColor: { configurable: true } };

    /**
     * Initialize the plugins.
     *
     * @protected
     * @param {object} staticMap - The dictionary of statically saved plugins.
     */
    AbstractRenderer.prototype.initPlugins = function initPlugins (staticMap)
    {
        for (var o in staticMap)
        {
            this.plugins[o] = new (staticMap[o])(this);
        }
    };

    /**
     * Same as view.width, actual number of pixels in the canvas by horizontal.
     *
     * @member {number}
     * @readonly
     * @default 800
     */
    prototypeAccessors.width.get = function ()
    {
        return this.view.width;
    };

    /**
     * Same as view.height, actual number of pixels in the canvas by vertical.
     *
     * @member {number}
     * @readonly
     * @default 600
     */
    prototypeAccessors.height.get = function ()
    {
        return this.view.height;
    };

    /**
     * Resizes the screen and canvas to the specified width and height.
     * Canvas dimensions are multiplied by resolution.
     *
     * @param {number} screenWidth - The new width of the screen.
     * @param {number} screenHeight - The new height of the screen.
     */
    AbstractRenderer.prototype.resize = function resize (screenWidth, screenHeight)
    {
        this.screen.width = screenWidth;
        this.screen.height = screenHeight;

        this.view.width = screenWidth * this.resolution;
        this.view.height = screenHeight * this.resolution;

        if (this.autoDensity)
        {
            this.view.style.width = screenWidth + "px";
            this.view.style.height = screenHeight + "px";
        }
    };

    /**
     * Useful function that returns a texture of the display object that can then be used to create sprites
     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.
     *
     * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from.
     * @param {number} scaleMode - Should be one of the scaleMode consts.
     * @param {number} resolution - The resolution / device pixel ratio of the texture being generated.
     * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,
     *        if no region is specified, defaults to the local bounds of the displayObject.
     * @return {PIXI.RenderTexture} A texture of the graphics object.
     */
    AbstractRenderer.prototype.generateTexture = function generateTexture (displayObject, scaleMode, resolution, region)
    {
        region = region || displayObject.getLocalBounds();

        // minimum texture size is 1x1, 0x0 will throw an error
        if (region.width === 0) { region.width = 1; }
        if (region.height === 0) { region.height = 1; }

        var renderTexture = RenderTexture.create(region.width | 0, region.height | 0, scaleMode, resolution);

        tempMatrix.tx = -region.x;
        tempMatrix.ty = -region.y;

        this.render(displayObject, renderTexture, false, tempMatrix, !!displayObject.parent);

        return renderTexture;
    };

    /**
     * Removes everything from the renderer and optionally removes the Canvas DOM element.
     *
     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
     */
    AbstractRenderer.prototype.destroy = function destroy (removeView)
    {
        for (var o in this.plugins)
        {
            this.plugins[o].destroy();
            this.plugins[o] = null;
        }

        if (removeView && this.view.parentNode)
        {
            this.view.parentNode.removeChild(this.view);
        }

        this.plugins = null;

        this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["RENDERER_TYPE"].UNKNOWN;

        this.view = null;

        this.screen = null;

        this.resolution = 0;

        this.transparent = false;

        this.autoDensity = false;

        this.blendModes = null;

        this.options = null;

        this.preserveDrawingBuffer = false;
        this.clearBeforeRender = false;

        this._backgroundColor = 0;
        this._backgroundColorRgba = null;
        this._backgroundColorString = null;

        this._tempDisplayObjectParent = null;
        this._lastObjectRendered = null;
    };

    /**
     * The background color to fill if not transparent
     *
     * @member {number}
     */
    prototypeAccessors.backgroundColor.get = function ()
    {
        return this._backgroundColor;
    };

    prototypeAccessors.backgroundColor.set = function (value) // eslint-disable-line require-jsdoc
    {
        this._backgroundColor = value;
        this._backgroundColorString = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["hex2string"])(value);
        Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["hex2rgb"])(value, this._backgroundColorRgba);
    };

    Object.defineProperties( AbstractRenderer.prototype, prototypeAccessors );

    return AbstractRenderer;
}(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]));

/**
 * The Renderer draws the scene and all its content onto a WebGL enabled canvas.
 *
 * This renderer should be used for browsers that support WebGL.
 *
 * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.
 * Don't forget to add the view to your DOM or you will not see anything!
 *
 * @class
 * @memberof PIXI
 * @extends PIXI.AbstractRenderer
 */
var Renderer = /*@__PURE__*/(function (AbstractRenderer) {
    function Renderer(options)
    {
        if ( options === void 0 ) options = {};

        AbstractRenderer.call(this, 'WebGL', options);

        // the options will have been modified here in the super constructor with pixi's default settings..
        options = this.options;

        /**
         * The type of this renderer as a standardized const
         *
         * @member {number}
         * @see PIXI.RENDERER_TYPE
         */
        this.type = _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["RENDERER_TYPE"].WEBGL;

        /**
         * WebGL context, set by the contextSystem (this.context)
         *
         * @readonly
         * @member {WebGLRenderingContext}
         */
        this.gl = null;

        this.CONTEXT_UID = 0;

        // TODO legacy!

        /**
         * Internal signal instances of **runner**, these
         * are assigned to each system created.
         * @see PIXI.Runner
         * @name PIXI.Renderer#runners
         * @private
         * @type {object}
         * @readonly
         * @property {PIXI.Runner} destroy - Destroy runner
         * @property {PIXI.Runner} contextChange - Context change runner
         * @property {PIXI.Runner} reset - Reset runner
         * @property {PIXI.Runner} update - Update runner
         * @property {PIXI.Runner} postrender - Post-render runner
         * @property {PIXI.Runner} prerender - Pre-render runner
         * @property {PIXI.Runner} resize - Resize runner
         */
        this.runners = {
            destroy: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('destroy'),
            contextChange: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('contextChange', 1),
            reset: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('reset'),
            update: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('update'),
            postrender: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('postrender'),
            prerender: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('prerender'),
            resize: new _pixi_runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]('resize', 2),
        };

        /**
         * Global uniforms
         * @member {PIXI.UniformGroup}
         */
        this.globalUniforms = new UniformGroup({
            projectionMatrix: new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"](),
        }, true);

        /**
         * Mask system instance
         * @member {PIXI.systems.MaskSystem} mask
         * @memberof PIXI.Renderer#
         * @readonly
         */
        this.addSystem(MaskSystem, 'mask')
            /**
             * Context system instance
             * @member {PIXI.systems.ContextSystem} context
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(ContextSystem, 'context')
            /**
             * State system instance
             * @member {PIXI.systems.StateSystem} state
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(StateSystem, 'state')
            /**
             * Shader system instance
             * @member {PIXI.systems.ShaderSystem} shader
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(ShaderSystem, 'shader')
            /**
             * Texture system instance
             * @member {PIXI.systems.TextureSystem} texture
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(TextureSystem, 'texture')
            /**
             * Geometry system instance
             * @member {PIXI.systems.GeometrySystem} geometry
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(GeometrySystem, 'geometry')
            /**
             * Framebuffer system instance
             * @member {PIXI.systems.FramebufferSystem} framebuffer
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(FramebufferSystem, 'framebuffer')
            /**
             * Stencil system instance
             * @member {PIXI.systems.StencilSystem} stencil
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(StencilSystem, 'stencil')
            /**
             * Projection system instance
             * @member {PIXI.systems.ProjectionSystem} projection
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(ProjectionSystem, 'projection')
            /**
             * Texture garbage collector system instance
             * @member {PIXI.systems.TextureGCSystem} textureGC
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(TextureGCSystem, 'textureGC')
            /**
             * Filter system instance
             * @member {PIXI.systems.FilterSystem} filter
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(FilterSystem, 'filter')
            /**
             * RenderTexture system instance
             * @member {PIXI.systems.RenderTextureSystem} renderTexture
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(RenderTextureSystem, 'renderTexture')

            /**
             * Batch system instance
             * @member {PIXI.systems.BatchSystem} batch
             * @memberof PIXI.Renderer#
             * @readonly
             */
            .addSystem(BatchSystem, 'batch');

        this.initPlugins(Renderer.__plugins);

        /**
         * The options passed in to create a new WebGL context.
         */
        if (options.context)
        {
            this.context.initFromContext(options.context);
        }
        else
        {
            this.context.initFromOptions({
                alpha: this.transparent,
                antialias: options.antialias,
                premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',
                stencil: true,
                preserveDrawingBuffer: options.preserveDrawingBuffer,
                powerPreference: this.options.powerPreference,
            });
        }

        /**
         * Flag if we are rendering to the screen vs renderTexture
         * @member {boolean}
         * @readonly
         * @default true
         */
        this.renderingToScreen = true;

        Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["sayHello"])(this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');

        this.resize(this.options.width, this.options.height);
    }

    if ( AbstractRenderer ) Renderer.__proto__ = AbstractRenderer;
    Renderer.prototype = Object.create( AbstractRenderer && AbstractRenderer.prototype );
    Renderer.prototype.constructor = Renderer;

    /**
     * Add a new system to the renderer.
     * @param {Function} ClassRef - Class reference
     * @param {string} [name] - Property name for system, if not specified
     *        will use a static `name` property on the class itself. This
     *        name will be assigned as s property on the Renderer so make
     *        sure it doesn't collide with properties on Renderer.
     * @return {PIXI.Renderer} Return instance of renderer
     */
    Renderer.create = function create (options)
    {
        if (Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["isWebGLSupported"])())
        {
            return new Renderer(options);
        }

        throw new Error('WebGL unsupported in this browser, use "pixi.js-legacy" for fallback canvas2d support.');
    };

    Renderer.prototype.addSystem = function addSystem (ClassRef, name)
    {
        if (!name)
        {
            name = ClassRef.name;
        }

        var system = new ClassRef(this);

        if (this[name])
        {
            throw new Error(("Whoops! The name \"" + name + "\" is already in use"));
        }

        this[name] = system;

        for (var i in this.runners)
        {
            this.runners[i].add(system);
        }

        /**
         * Fired after rendering finishes.
         *
         * @event PIXI.Renderer#postrender
         */

        /**
         * Fired before rendering starts.
         *
         * @event PIXI.Renderer#prerender
         */

        /**
         * Fired when the WebGL context is set.
         *
         * @event PIXI.Renderer#context
         * @param {WebGLRenderingContext} gl - WebGL context.
         */

        return this;
    };

    /**
     * Renders the object to its WebGL view
     *
     * @param {PIXI.DisplayObject} displayObject - The object to be rendered.
     * @param {PIXI.RenderTexture} [renderTexture] - The render texture to render to.
     * @param {boolean} [clear=true] - Should the canvas be cleared before the new render.
     * @param {PIXI.Matrix} [transform] - A transform to apply to the render texture before rendering.
     * @param {boolean} [skipUpdateTransform=false] - Should we skip the update transform pass?
     */
    Renderer.prototype.render = function render (displayObject, renderTexture, clear, transform, skipUpdateTransform)
    {
        // can be handy to know!
        this.renderingToScreen = !renderTexture;

        this.runners.prerender.run();
        this.emit('prerender');

        // apply a transform at a GPU level
        this.projection.transform = transform;

        // no point rendering if our context has been blown up!
        if (this.context.isLost)
        {
            return;
        }

        if (!renderTexture)
        {
            this._lastObjectRendered = displayObject;
        }

        if (!skipUpdateTransform)
        {
            // update the scene graph
            var cacheParent = displayObject.parent;

            displayObject.parent = this._tempDisplayObjectParent;
            displayObject.updateTransform();
            displayObject.parent = cacheParent;
            // displayObject.hitArea = //TODO add a temp hit area
        }

        this.renderTexture.bind(renderTexture);
        this.batch.currentRenderer.start();

        if (clear !== undefined ? clear : this.clearBeforeRender)
        {
            this.renderTexture.clear();
        }

        displayObject.render(this);

        // apply transform..
        this.batch.currentRenderer.flush();

        if (renderTexture)
        {
            renderTexture.baseTexture.update();
        }

        this.runners.postrender.run();

        // reset transform after render
        this.projection.transform = null;

        this.emit('postrender');
    };

    /**
     * Resizes the WebGL view to the specified width and height.
     *
     * @param {number} screenWidth - The new width of the screen.
     * @param {number} screenHeight - The new height of the screen.
     */
    Renderer.prototype.resize = function resize (screenWidth, screenHeight)
    {
        AbstractRenderer.prototype.resize.call(this, screenWidth, screenHeight);

        this.runners.resize.run(screenWidth, screenHeight);
    };

    /**
     * Resets the WebGL state so you can render things however you fancy!
     *
     * @return {PIXI.Renderer} Returns itself.
     */
    Renderer.prototype.reset = function reset ()
    {
        this.runners.reset.run();

        return this;
    };

    /**
     * Clear the frame buffer
     */
    Renderer.prototype.clear = function clear ()
    {
        this.framebuffer.bind();
        this.framebuffer.clear();
    };

    /**
     * Removes everything from the renderer (event listeners, spritebatch, etc...)
     *
     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.
     *  See: https://github.com/pixijs/pixi.js/issues/2233
     */
    Renderer.prototype.destroy = function destroy (removeView)
    {
        this.runners.destroy.run();

        for (var r in this.runners)
        {
            this.runners[r].destroy();
        }

        // call base destroy
        AbstractRenderer.prototype.destroy.call(this, removeView);

        // TODO nullify all the managers..
        this.gl = null;
    };

    /**
     * Collection of installed plugins. These are included by default in PIXI, but can be excluded
     * by creating a custom build. Consult the README for more information about creating custom
     * builds and excluding plugins.
     * @name PIXI.Renderer#plugins
     * @type {object}
     * @readonly
     * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.
     * @property {PIXI.extract.Extract} extract Extract image data from renderer.
     * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.
     * @property {PIXI.prepare.Prepare} prepare Pre-render display objects.
     */

    /**
     * Adds a plugin to the renderer.
     *
     * @method
     * @param {string} pluginName - The name of the plugin.
     * @param {Function} ctor - The constructor function or class for the plugin.
     */
    Renderer.registerPlugin = function registerPlugin (pluginName, ctor)
    {
        Renderer.__plugins = Renderer.__plugins || {};
        Renderer.__plugins[pluginName] = ctor;
    };

    return Renderer;
}(AbstractRenderer));

/**
 * This helper function will automatically detect which renderer you should be using.
 * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by
 * the browser then this function will return a canvas renderer
 *
 * @memberof PIXI
 * @function autoDetectRenderer
 * @param {object} [options] - The optional renderer parameters
 * @param {number} [options.width=800] - the width of the renderers view
 * @param {number} [options.height=600] - the height of the renderers view
 * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional
 * @param {boolean} [options.transparent=false] - If the render view is transparent, default false
 * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for
 *   resolutions other than 1
 * @param {boolean} [options.antialias=false] - sets antialias
 * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you
 *  need to call toDataUrl on the webgl context
 * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area
 *  (shown if not transparent).
 * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or
 *   not before the new render pass.
 * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2
 * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this
 *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise
 *   it is ignored.
 * @param {boolean} [options.forceFXAA=false] - forces FXAA antialiasing to be used over native.
 *  FXAA is faster, but may not always look as great **webgl only**
 * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to "high-performance"
 *  for devices with dual graphics card **webgl only**
 * @return {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer
 */
function autoDetectRenderer(options)
{
    return Renderer.create(options);
}

var _default = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var defaultFilter = "attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nuniform vec4 inputSize;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n";

/**
 * A Texture that depends on six other resources.
 *
 * @class
 * @extends PIXI.BaseTexture
 * @memberof PIXI
 */
var CubeTexture = /*@__PURE__*/(function (BaseTexture) {
    function CubeTexture () {
        BaseTexture.apply(this, arguments);
    }

    if ( BaseTexture ) CubeTexture.__proto__ = BaseTexture;
    CubeTexture.prototype = Object.create( BaseTexture && BaseTexture.prototype );
    CubeTexture.prototype.constructor = CubeTexture;

    CubeTexture.from = function from (resources, options)
    {
        return new CubeTexture(new CubeResource(resources, options));
    };

    return CubeTexture;
}(BaseTexture));

/**
 * Used by the batcher to draw batches.
 * Each one of these contains all information required to draw a bound geometry.
 *
 * @class
 * @memberof PIXI
 */
var BatchDrawCall = function BatchDrawCall()
{
    this.textures = [];
    this.ids = [];
    this.blend = 0;
    this.textureCount = 0;
    this.start = 0;
    this.size = 0;
    this.type = 4;
};

/**
 * Flexible wrapper around `ArrayBuffer` that also provides
 * typed array views on demand.
 *
 * @class
 * @memberof PIXI
 */
var ViewableBuffer = function ViewableBuffer(size)
{
    /**
     * Underlying `ArrayBuffer` that holds all the data
     * and is of capacity `size`.
     *
     * @member {ArrayBuffer}
     */
    this.rawBinaryData = new ArrayBuffer(size);

    /**
     * View on the raw binary data as a `Uint32Array`.
     *
     * @member {Uint32Array}
     */
    this.uint32View = new Uint32Array(this.rawBinaryData);

    /**
     * View on the raw binary data as a `Float32Array`.
     *
     * @member {Float32Array}
     */
    this.float32View = new Float32Array(this.rawBinaryData);
};

var prototypeAccessors$5 = { int8View: { configurable: true },uint8View: { configurable: true },int16View: { configurable: true },uint16View: { configurable: true },int32View: { configurable: true } };

/**
 * View on the raw binary data as a `Int8Array`.
 *
 * @member {Int8Array}
 */
prototypeAccessors$5.int8View.get = function ()
{
    if (!this._int8View)
    {
        this._int8View = new Int8Array(this.rawBinaryData);
    }

    return this._int8View;
};

/**
 * View on the raw binary data as a `Uint8Array`.
 *
 * @member {Uint8Array}
 */
prototypeAccessors$5.uint8View.get = function ()
{
    if (!this._uint8View)
    {
        this._uint8View = new Uint8Array(this.rawBinaryData);
    }

    return this._uint8View;
};

/**
 * View on the raw binary data as a `Int16Array`.
 *
 * @member {Int16Array}
 */
prototypeAccessors$5.int16View.get = function ()
{
    if (!this._int16View)
    {
        this._int16View = new Int16Array(this.rawBinaryData);
    }

    return this._int16View;
};

/**
 * View on the raw binary data as a `Uint16Array`.
 *
 * @member {Uint16Array}
 */
prototypeAccessors$5.uint16View.get = function ()
{
    if (!this._uint16View)
    {
        this._uint16View = new Uint16Array(this.rawBinaryData);
    }

    return this._uint16View;
};

/**
 * View on the raw binary data as a `Int32Array`.
 *
 * @member {Int32Array}
 */
prototypeAccessors$5.int32View.get = function ()
{
    if (!this._int32View)
    {
        this._int32View = new Int32Array(this.rawBinaryData);
    }

    return this._int32View;
};

/**
 * Returns the view of the given type.
 *
 * @param {string} type - One of `int8`, `uint8`, `int16`,
 *`uint16`, `int32`, `uint32`, and `float32`.
 * @return {object} typed array of given type
 */
ViewableBuffer.prototype.view = function view (type)
{
    return this[(type + "View")];
};

/**
 * Destroys all buffer references. Do not use after calling
 * this.
 */
ViewableBuffer.prototype.destroy = function destroy ()
{
    this.rawBinaryData = null;
    this._int8View = null;
    this._uint8View = null;
    this._int16View = null;
    this._uint16View = null;
    this._int32View = null;
    this.uint32View = null;
    this.float32View = null;
};

ViewableBuffer.sizeOf = function sizeOf (type)
{
    switch (type)
    {
        case 'int8':
        case 'uint8':
            return 1;
        case 'int16':
        case 'uint16':
            return 2;
        case 'int32':
        case 'uint32':
        case 'float32':
            return 4;
        default:
            throw new Error((type + " isn't a valid view type"));
    }
};

Object.defineProperties( ViewableBuffer.prototype, prototypeAccessors$5 );

/**
 * Renderer dedicated to drawing and batching sprites.
 *
 * This is the default batch renderer. It buffers objects
 * with texture-based geometries and renders them in
 * batches. It uploads multiple textures to the GPU to
 * reduce to the number of draw calls.
 *
 * @class
 * @protected
 * @memberof PIXI
 * @extends PIXI.ObjectRenderer
 */
var AbstractBatchRenderer = /*@__PURE__*/(function (ObjectRenderer) {
    function AbstractBatchRenderer(renderer)
    {
        ObjectRenderer.call(this, renderer);

        /**
         * This is used to generate a shader that can
         * color each vertex based on a `aTextureId`
         * attribute that points to an texture in `uSampler`.
         *
         * This enables the objects with different textures
         * to be drawn in the same draw call.
         *
         * You can customize your shader by creating your
         * custom shader generator.
         *
         * @member {PIXI.BatchShaderGenerator}
         * @protected
         */
        this.shaderGenerator = null;

        /**
         * The class that represents the geometry of objects
         * that are going to be batched with this.
         *
         * @member {object}
         * @default PIXI.BatchGeometry
         * @protected
         */
        this.geometryClass = null;

        /**
         * Size of data being buffered per vertex in the
         * attribute buffers (in floats). By default, the
         * batch-renderer plugin uses 6:
         *
         * | aVertexPosition | 2 |
         * |-----------------|---|
         * | aTextureCoords  | 2 |
         * | aColor          | 1 |
         * | aTextureId      | 1 |
         *
         * @member {number}
         * @readonly
         */
        this.vertexSize = null;

        /**
         * The WebGL state in which this renderer will work.
         *
         * @member {PIXI.State}
         * @readonly
         */
        this.state = State.for2d();

        /**
         * The number of bufferable objects before a flush
         * occurs automatically.
         *
         * @member {number}
         * @default settings.SPRITE_MAX_TEXTURES
         */
        this.size = 2000 * 4;// settings.SPRITE_BATCH_SIZE, 2000 is a nice balance between mobile/desktop

        /**
         * Total count of all vertices used by the currently
         * buffered objects.
         *
         * @member {number}
         * @private
         */
        this._vertexCount = 0;

        /**
         * Total count of all indices used by the currently
         * buffered objects.
         *
         * @member {number}
         * @private
         */
        this._indexCount = 0;

        /**
         * Buffer of objects that are yet to be rendered.
         *
         * @member {PIXI.DisplayObject[]}
         * @private
         */
        this._bufferedElements = [];

        /**
         * Number of elements that are buffered and are
         * waiting to be flushed.
         *
         * @member {number}
         * @private
         */
        this._bufferSize = 0;

        /**
         * This shader is generated by `this.shaderGenerator`.
         *
         * It is generated specifically to handle the required
         * number of textures being batched together.
         *
         * @member {PIXI.Shader}
         * @protected
         */
        this._shader = null;

        /**
         * Pool of `this.geometryClass` geometry objects
         * that store buffers. They are used to pass data
         * to the shader on each draw call.
         *
         * These are never re-allocated again, unless a
         * context change occurs; however, the pool may
         * be expanded if required.
         *
         * @member {PIXI.Geometry[]}
         * @private
         * @see PIXI.AbstractBatchRenderer.contextChange
         */
        this._packedGeometries = [];

        /**
         * Size of `this._packedGeometries`. It can be expanded
         * if more than `this._packedGeometryPoolSize` flushes
         * occur in a single frame.
         *
         * @member {number}
         * @private
         */
        this._packedGeometryPoolSize = 2;

        /**
         * A flush may occur multiple times in a single
         * frame. On iOS devices or when
         * `settings.CAN_UPLOAD_SAME_BUFFER` is false, the
         * batch renderer does not upload data to the same
         * `WebGLBuffer` for performance reasons.
         *
         * This is the index into `packedGeometries` that points to
         * geometry holding the most recent buffers.
         *
         * @member {number}
         * @private
         */
        this._flushId = 0;

        /**
         * Pool of `BatchDrawCall` objects that `flush` used
         * to create "batches" of the objects being rendered.
         *
         * These are never re-allocated again.
         *
         * @member BatchDrawCall[]
         * @private
         */
        this._drawCalls = [];

        for (var k = 0; k < this.size / 4; k++)
        { // initialize the draw-calls pool to max size.
            this._drawCalls[k] = new BatchDrawCall();
        }

        /**
         * Pool of `ViewableBuffer` objects that are sorted in
         * order of increasing size. The flush method uses
         * the buffer with the least size above the amount
         * it requires. These are used for passing attributes.
         *
         * The first buffer has a size of 8; each subsequent
         * buffer has double capacity of its previous.
         *
         * @member {PIXI.ViewableBuffer}
         * @private
         * @see PIXI.AbstractBatchRenderer#getAttributeBuffer
         */
        this._aBuffers = {};

        /**
         * Pool of `Uint16Array` objects that are sorted in
         * order of increasing size. The flush method uses
         * the buffer with the least size above the amount
         * it requires. These are used for passing indices.
         *
         * The first buffer has a size of 12; each subsequent
         * buffer has double capacity of its previous.
         *
         * @member {Uint16Array[]}
         * @private
         * @see PIXI.AbstractBatchRenderer#getIndexBuffer
         */
        this._iBuffers = {};

        /**
         * Maximum number of textures that can be uploaded to
         * the GPU under the current context. It is initialized
         * properly in `this.contextChange`.
         *
         * @member {number}
         * @see PIXI.AbstractBatchRenderer#contextChange
         * @readonly
         */
        this.MAX_TEXTURES = 1;

        this.renderer.on('prerender', this.onPrerender, this);
        renderer.runners.contextChange.add(this);
    }

    if ( ObjectRenderer ) AbstractBatchRenderer.__proto__ = ObjectRenderer;
    AbstractBatchRenderer.prototype = Object.create( ObjectRenderer && ObjectRenderer.prototype );
    AbstractBatchRenderer.prototype.constructor = AbstractBatchRenderer;

    /**
     * Handles the `contextChange` signal.
     *
     * It calculates `this.MAX_TEXTURES` and allocating the
     * packed-geometry object pool.
     */
    AbstractBatchRenderer.prototype.contextChange = function contextChange ()
    {
        var gl = this.renderer.gl;

        if (_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].PREFER_ENV === _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["ENV"].WEBGL_LEGACY)
        {
            this.MAX_TEXTURES = 1;
        }
        else
        {
            // step 1: first check max textures the GPU can handle.
            this.MAX_TEXTURES = Math.min(
                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),
                _pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].SPRITE_MAX_TEXTURES);

            // step 2: check the maximum number of if statements the shader can have too..
            this.MAX_TEXTURES = checkMaxIfStatementsInShader(
                this.MAX_TEXTURES, gl);
        }

        this._shader = this.shaderGenerator.generateShader(this.MAX_TEXTURES);

        // we use the second shader as the first one depending on your browser
        // may omit aTextureId as it is not used by the shader so is optimized out.
        for (var i = 0; i < this._packedGeometryPoolSize; i++)
        {
            /* eslint-disable max-len */
            this._packedGeometries[i] = new (this.geometryClass)();
        }
    };

    /**
     * Handles the `prerender` signal.
     *
     * It ensures that flushes start from the first geometry
     * object again.
     */
    AbstractBatchRenderer.prototype.onPrerender = function onPrerender ()
    {
        this._flushId = 0;
    };

    /**
     * Buffers the "batchable" object. It need not be rendered
     * immediately.
     *
     * @param {PIXI.Sprite} sprite - the sprite to render when
     *    using this spritebatch
     */
    AbstractBatchRenderer.prototype.render = function render (element)
    {
        if (!element._texture.valid)
        {
            return;
        }

        if (this._vertexCount + (element.vertexData.length / 2) > this.size)
        {
            this.flush();
        }

        this._vertexCount += element.vertexData.length / 2;
        this._indexCount += element.indices.length;
        this._bufferedElements[this._bufferSize++] = element;
    };

    /**
     * Renders the content _now_ and empties the current batch.
     */
    AbstractBatchRenderer.prototype.flush = function flush ()
    {
        if (this._vertexCount === 0)
        {
            return;
        }

        var attributeBuffer = this.getAttributeBuffer(this._vertexCount);
        var indexBuffer = this.getIndexBuffer(this._indexCount);
        var gl = this.renderer.gl;

        var ref = this;
        var elements = ref._bufferedElements;
        var drawCalls = ref._drawCalls;
        var MAX_TEXTURES = ref.MAX_TEXTURES;
        var packedGeometries = ref._packedGeometries;
        var vertexSize = ref.vertexSize;

        var touch = this.renderer.textureGC.count;

        var index = 0;
        var _indexCount = 0;

        var nextTexture;
        var currentTexture;
        var textureCount = 0;

        var currentGroup = drawCalls[0];
        var groupCount = 0;

        var blendMode = -1;// blend-mode of previous element/sprite/object!

        currentGroup.textureCount = 0;
        currentGroup.start = 0;
        currentGroup.blend = blendMode;

        var TICK = ++BaseTexture._globalBatch;
        var i;

        for (i = 0; i < this._bufferSize; ++i)
        {
            var sprite = elements[i];

            elements[i] = null;
            nextTexture = sprite._texture.baseTexture;

            var spriteBlendMode = _pixi_utils__WEBPACK_IMPORTED_MODULE_1__["premultiplyBlendMode"][
                nextTexture.premultiplyAlpha ? 1 : 0][sprite.blendMode];

            if (blendMode !== spriteBlendMode)
            {
                blendMode = spriteBlendMode;

                // force the batch to break!
                currentTexture = null;
                textureCount = MAX_TEXTURES;
                TICK++;
            }

            if (currentTexture !== nextTexture)
            {
                currentTexture = nextTexture;

                if (nextTexture._batchEnabled !== TICK)
                {
                    if (textureCount === MAX_TEXTURES)
                    {
                        TICK++;

                        textureCount = 0;

                        currentGroup.size = _indexCount - currentGroup.start;

                        currentGroup = drawCalls[groupCount++];
                        currentGroup.textureCount = 0;
                        currentGroup.blend = blendMode;
                        currentGroup.start = _indexCount;
                    }

                    nextTexture.touched = touch;
                    nextTexture._batchEnabled = TICK;
                    nextTexture._id = textureCount;

                    currentGroup.textures[currentGroup.textureCount++] = nextTexture;
                    textureCount++;
                }
            }

            this.packInterleavedGeometry(sprite, attributeBuffer,
                indexBuffer, index, _indexCount);

            // push a graphics..
            index += (sprite.vertexData.length / 2) * vertexSize;
            _indexCount += sprite.indices.length;
        }

        BaseTexture._globalBatch = TICK;
        currentGroup.size = _indexCount - currentGroup.start;

        if (!_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].CAN_UPLOAD_SAME_BUFFER)
        { /* Usually on iOS devices, where the browser doesn't
            like uploads to the same buffer in a single frame. */
            if (this._packedGeometryPoolSize <= this._flushId)
            {
                this._packedGeometryPoolSize++;
                packedGeometries[this._flushId] = new (this.geometryClass)();
            }

            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData, 0);
            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer, 0);

            this.renderer.geometry.bind(packedGeometries[this._flushId]);
            this.renderer.geometry.updateBuffers();
            this._flushId++;
        }
        else
        {
            // lets use the faster option, always use buffer number 0
            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData, 0);
            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer, 0);

            this.renderer.geometry.updateBuffers();
        }

        var textureSystem = this.renderer.texture;
        var stateSystem = this.renderer.state;

        // Upload textures and do the draw calls
        for (i = 0; i < groupCount; i++)
        {
            var group = drawCalls[i];
            var groupTextureCount = group.textureCount;

            for (var j = 0; j < groupTextureCount; j++)
            {
                textureSystem.bind(group.textures[j], j);
                group.textures[j] = null;
            }

            stateSystem.setBlendMode(group.blend);
            gl.drawElements(group.type, group.size, gl.UNSIGNED_SHORT, group.start * 2);
        }

        // reset elements for the next flush
        this._bufferSize = 0;
        this._vertexCount = 0;
        this._indexCount = 0;
    };

    /**
     * Starts a new sprite batch.
     */
    AbstractBatchRenderer.prototype.start = function start ()
    {
        this.renderer.state.set(this.state);

        this.renderer.shader.bind(this._shader);

        if (_pixi_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].CAN_UPLOAD_SAME_BUFFER)
        {
            // bind buffer #0, we don't need others
            this.renderer.geometry.bind(this._packedGeometries[this._flushId]);
        }
    };

    /**
     * Stops and flushes the current batch.
     */
    AbstractBatchRenderer.prototype.stop = function stop ()
    {
        this.flush();
    };

    /**
     * Destroys this `AbstractBatchRenderer`. It cannot be used again.
     */
    AbstractBatchRenderer.prototype.destroy = function destroy ()
    {
        for (var i = 0; i < this._packedGeometryPoolSize; i++)
        {
            if (this._packedGeometries[i])
            {
                this._packedGeometries[i].destroy();
            }
        }

        this.renderer.off('prerender', this.onPrerender, this);

        this._aBuffers = null;
        this._iBuffers = null;
        this._packedGeometries = null;
        this._drawCalls = null;

        if (this._shader)
        {
            this._shader.destroy();
            this._shader = null;
        }

        ObjectRenderer.prototype.destroy.call(this);
    };

    /**
     * Fetches an attribute buffer from `this._aBuffers` that
     * can hold atleast `size` floats.
     *
     * @param {number} size - minimum capacity required
     * @return {ViewableBuffer} - buffer than can hold atleast `size` floats
     * @private
     */
    AbstractBatchRenderer.prototype.getAttributeBuffer = function getAttributeBuffer (size)
    {
        // 8 vertices is enough for 2 quads
        var roundedP2 = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["nextPow2"])(Math.ceil(size / 8));
        var roundedSizeIndex = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["log2"])(roundedP2);
        var roundedSize = roundedP2 * 8;

        if (this._aBuffers.length <= roundedSizeIndex)
        {
            this._iBuffers.length = roundedSizeIndex + 1;
        }

        var buffer = this._aBuffers[roundedSize];

        if (!buffer)
        {
            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize * this.vertexSize * 4);
        }

        return buffer;
    };

    /**
     * Fetches an index buffer from `this._iBuffers` that can
     * has atleast `size` capacity.
     *
     * @param {number} size - minimum required capacity
     * @return {Uint16Array} - buffer that can fit `size`
     *    indices.
     * @private
     */
    AbstractBatchRenderer.prototype.getIndexBuffer = function getIndexBuffer (size)
    {
        // 12 indices is enough for 2 quads
        var roundedP2 = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["nextPow2"])(Math.ceil(size / 12));
        var roundedSizeIndex = Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["log2"])(roundedP2);
        var roundedSize = roundedP2 * 12;

        if (this._iBuffers.length <= roundedSizeIndex)
        {
            this._iBuffers.length = roundedSizeIndex + 1;
        }

        var buffer = this._iBuffers[roundedSizeIndex];

        if (!buffer)
        {
            this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize);
        }

        return buffer;
    };

    /**
     * Takes the four batching parameters of `element`, interleaves
     * and pushes them into the batching attribute/index buffers given.
     *
     * It uses these properties: `vertexData` `uvs`, `textureId` and
     * `indicies`. It also uses the "tint" of the base-texture, if
     * present.
     *
     * @param {PIXI.Sprite} element - element being rendered
     * @param {PIXI.ViewableBuffer} attributeBuffer - attribute buffer.
     * @param {Uint16Array} indexBuffer - index buffer
     * @param {number} aIndex - number of floats already in the attribute buffer
     * @param {number} iIndex - number of indices already in `indexBuffer`
     */
    AbstractBatchRenderer.prototype.packInterleavedGeometry = function packInterleavedGeometry (element, attributeBuffer, indexBuffer, aIndex, iIndex)
    {
        var uint32View = attributeBuffer.uint32View;
        var float32View = attributeBuffer.float32View;

        var packedVertices = aIndex / this.vertexSize;
        var uvs = element.uvs;
        var indicies = element.indices;
        var vertexData = element.vertexData;
        var textureId = element._texture.baseTexture._id;

        var alpha = Math.min(element.worldAlpha, 1.0);
        var argb = (alpha < 1.0
          && element._texture.baseTexture.premultiplyAlpha)
            ? Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["premultiplyTint"])(element._tintRGB, alpha)
            : element._tintRGB + (alpha * 255 << 24);

        // lets not worry about tint! for now..
        for (var i = 0; i < vertexData.length; i += 2)
        {
            float32View[aIndex++] = vertexData[i];
            float32View[aIndex++] = vertexData[i + 1];
            float32View[aIndex++] = uvs[i];
            float32View[aIndex++] = uvs[i + 1];
            uint32View[aIndex++] = argb;
            float32View[aIndex++] = textureId;
        }

        for (var i$1 = 0; i$1 < indicies.length; i$1++)
        {
            indexBuffer[iIndex++] = packedVertices + indicies[i$1];
        }
    };

    return AbstractBatchRenderer;
}(ObjectRenderer));

/**
 * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer
 *
 * @class
 * @memberof PIXI
 */
var BatchShaderGenerator = function BatchShaderGenerator(vertexSrc, fragTemplate)
{
    /**
     * Reference to the vertex shader source.
     *
     * @member {string}
     */
    this.vertexSrc = vertexSrc;

    /**
     * Reference to the fragement shader template. Must contain "%count%" and "%forloop%".
     *
     * @member {string}
     */
    this.fragTemplate = fragTemplate;

    this.programCache = {};
    this.defaultGroupCache = {};

    if (fragTemplate.indexOf('%count%') < 0)
    {
        throw new Error('Fragment template must contain "%count%".');
    }

    if (fragTemplate.indexOf('%forloop%') < 0)
    {
        throw new Error('Fragment template must contain "%forloop%".');
    }
};

BatchShaderGenerator.prototype.generateShader = function generateShader (maxTextures)
{
    if (!this.programCache[maxTextures])
    {
        var sampleValues = new Int32Array(maxTextures);

        for (var i = 0; i < maxTextures; i++)
        {
            sampleValues[i] = i;
        }

        this.defaultGroupCache[maxTextures] = UniformGroup.from({ uSamplers: sampleValues }, true);

        var fragmentSrc = this.fragTemplate;

        fragmentSrc = fragmentSrc.replace(/%count%/gi, ("" + maxTextures));
        fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));

        this.programCache[maxTextures] = new Program(this.vertexSrc, fragmentSrc);
    }

    var uniforms = {
        tint: new Float32Array([1, 1, 1, 1]),
        translationMatrix: new _pixi_math__WEBPACK_IMPORTED_MODULE_5__["Matrix"](),
        default: this.defaultGroupCache[maxTextures],
    };

    return new Shader(this.programCache[maxTextures], uniforms);
};

BatchShaderGenerator.prototype.generateSampleSrc = function generateSampleSrc (maxTextures)
{
    var src = '';

    src += '\n';
    src += '\n';

    for (var i = 0; i < maxTextures; i++)
    {
        if (i > 0)
        {
            src += '\nelse ';
        }

        if (i < maxTextures - 1)
        {
            src += "if(vTextureId < " + i + ".5)";
        }

        src += '\n{';
        src += "\n\tcolor = texture2D(uSamplers[" + i + "], vTextureCoord);";
        src += '\n}';
    }

    src += '\n';
    src += '\n';

    return src;
};

/**
 * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).
 *
 * @class
 * @memberof PIXI
 */
var BatchGeometry = /*@__PURE__*/(function (Geometry) {
    function BatchGeometry(_static)
    {
        if ( _static === void 0 ) _static = false;

        Geometry.call(this);

        /**
         * Buffer used for position, color, texture IDs
         *
         * @member {PIXI.Buffer}
         * @protected
         */
        this._buffer = new Buffer(null, _static, false);

        /**
         * Index buffer data
         *
         * @member {PIXI.Buffer}
         * @protected
         */
        this._indexBuffer = new Buffer(null, _static, true);

        this.addAttribute('aVertexPosition', this._buffer, 2, false, _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].FLOAT)
            .addAttribute('aTextureCoord', this._buffer, 2, false, _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].FLOAT)
            .addAttribute('aColor', this._buffer, 4, true, _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].UNSIGNED_BYTE)
            .addAttribute('aTextureId', this._buffer, 1, true, _pixi_constants__WEBPACK_IMPORTED_MODULE_3__["TYPES"].FLOAT)
            .addIndex(this._indexBuffer);
    }

    if ( Geometry ) BatchGeometry.__proto__ = Geometry;
    BatchGeometry.prototype = Object.create( Geometry && Geometry.prototype );
    BatchGeometry.prototype.constructor = BatchGeometry;

    return BatchGeometry;
}(Geometry));

var defaultVertex$2 = "precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vColor = aColor * tint;\n}\n";

var defaultFragment$2 = "varying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\n    vec4 color;\n    %forloop%\n    gl_FragColor = color * vColor;\n}\n";

/**
 * @class
 * @memberof PIXI
 * @hideconstructor
 */
var BatchPluginFactory = function BatchPluginFactory () {};

var staticAccessors$1 = { defaultVertexSrc: { configurable: true },defaultFragmentTemplate: { configurable: true } };

BatchPluginFactory.create = function create (options)
{
    var ref = Object.assign({
        vertex: defaultVertex$2,
        fragment: defaultFragment$2,
        geometryClass: BatchGeometry,
        vertexSize: 6,
    }, options);
        var vertex = ref.vertex;
        var fragment = ref.fragment;
        var vertexSize = ref.vertexSize;
        var geometryClass = ref.geometryClass;

    return /*@__PURE__*/(function (AbstractBatchRenderer) {
            function BatchPlugin(renderer)
        {
            AbstractBatchRenderer.call(this, renderer);

            this.shaderGenerator = new BatchShaderGenerator(vertex, fragment);
            this.geometryClass = geometryClass;
            this.vertexSize = vertexSize;
        }

            if ( AbstractBatchRenderer ) BatchPlugin.__proto__ = AbstractBatchRenderer;
            BatchPlugin.prototype = Object.create( AbstractBatchRenderer && AbstractBatchRenderer.prototype );
            BatchPlugin.prototype.constructor = BatchPlugin;

            return BatchPlugin;
        }(AbstractBatchRenderer));
};

/**
 * The default vertex shader source
 *
 * @static
 * @type {string}
 * @constant
 */
staticAccessors$1.defaultVertexSrc.get = function ()
{
    return defaultVertex$2;
};

/**
 * The default fragment shader source
 *
 * @static
 * @type {string}
 * @constant
 */
staticAccessors$1.defaultFragmentTemplate.get = function ()
{
    return defaultFragment$2;
};

Object.defineProperties( BatchPluginFactory, staticAccessors$1 );

// Setup the default BatchRenderer plugin, this is what
// we'll actually export at the root level
var BatchRenderer = BatchPluginFactory.create();


//# sourceMappingURL=core.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/display/lib/display.es.js":
/*!******************************************************!*\
  !*** ./node_modules/@pixi/display/lib/display.es.js ***!
  \******************************************************/
/*! exports provided: Bounds, Container, DisplayObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bounds", function() { return Bounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Container", function() { return Container; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayObject", function() { return DisplayObject; });
/* harmony import */ var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/settings */ "./node_modules/@pixi/settings/lib/settings.es.js");
/* harmony import */ var _pixi_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pixi/math */ "./node_modules/@pixi/math/lib/math.es.js");
/* harmony import */ var _pixi_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pixi/utils */ "./node_modules/@pixi/utils/lib/utils.es.js");
/*!
 * @pixi/display - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/display is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */




/**
 * Sets the default value for the container property 'sortableChildren'.
 * If set to true, the container will sort its children by zIndex value
 * when updateTransform() is called, or manually if sortChildren() is called.
 *
 * This actually changes the order of elements in the array, so should be treated
 * as a basic solution that is not performant compared to other solutions,
 * such as @link https://github.com/pixijs/pixi-display
 *
 * Also be aware of that this may not work nicely with the addChildAt() function,
 * as the zIndex sorting may cause the child to automatically sorted to another position.
 *
 * @static
 * @constant
 * @name SORTABLE_CHILDREN
 * @memberof PIXI.settings
 * @type {boolean}
 * @default false
 */
_pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].SORTABLE_CHILDREN = false;

/**
 * 'Builder' pattern for bounds rectangles.
 *
 * This could be called an Axis-Aligned Bounding Box.
 * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.
 *
 * @class
 * @memberof PIXI
 */
var Bounds = function Bounds()
{
    /**
     * @member {number}
     * @default 0
     */
    this.minX = Infinity;

    /**
     * @member {number}
     * @default 0
     */
    this.minY = Infinity;

    /**
     * @member {number}
     * @default 0
     */
    this.maxX = -Infinity;

    /**
     * @member {number}
     * @default 0
     */
    this.maxY = -Infinity;

    this.rect = null;
};

/**
 * Checks if bounds are empty.
 *
 * @return {boolean} True if empty.
 */
Bounds.prototype.isEmpty = function isEmpty ()
{
    return this.minX > this.maxX || this.minY > this.maxY;
};

/**
 * Clears the bounds and resets.
 *
 */
Bounds.prototype.clear = function clear ()
{
    this.updateID++;

    this.minX = Infinity;
    this.minY = Infinity;
    this.maxX = -Infinity;
    this.maxY = -Infinity;
};

/**
 * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle
 * It is not guaranteed that it will return tempRect
 *
 * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty
 * @returns {PIXI.Rectangle} A rectangle of the bounds
 */
Bounds.prototype.getRectangle = function getRectangle (rect)
{
    if (this.minX > this.maxX || this.minY > this.maxY)
    {
        return _pixi_math__WEBPACK_IMPORTED_MODULE_1__["Rectangle"].EMPTY;
    }

    rect = rect || new _pixi_math__WEBPACK_IMPORTED_MODULE_1__["Rectangle"](0, 0, 1, 1);

    rect.x = this.minX;
    rect.y = this.minY;
    rect.width = this.maxX - this.minX;
    rect.height = this.maxY - this.minY;

    return rect;
};

/**
 * This function should be inlined when its possible.
 *
 * @param {PIXI.Point} point - The point to add.
 */
Bounds.prototype.addPoint = function addPoint (point)
{
    this.minX = Math.min(this.minX, point.x);
    this.maxX = Math.max(this.maxX, point.x);
    this.minY = Math.min(this.minY, point.y);
    this.maxY = Math.max(this.maxY, point.y);
};

/**
 * Adds a quad, not transformed
 *
 * @param {Float32Array} vertices - The verts to add.
 */
Bounds.prototype.addQuad = function addQuad (vertices)
{
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;

    var x = vertices[0];
    var y = vertices[1];

    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    x = vertices[2];
    y = vertices[3];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    x = vertices[4];
    y = vertices[5];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    x = vertices[6];
    y = vertices[7];
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
};

/**
 * Adds sprite frame, transformed.
 *
 * @param {PIXI.Transform} transform - TODO
 * @param {number} x0 - TODO
 * @param {number} y0 - TODO
 * @param {number} x1 - TODO
 * @param {number} y1 - TODO
 */
Bounds.prototype.addFrame = function addFrame (transform, x0, y0, x1, y1)
{
    var matrix = transform.worldTransform;
    var a = matrix.a;
    var b = matrix.b;
    var c = matrix.c;
    var d = matrix.d;
    var tx = matrix.tx;
    var ty = matrix.ty;

    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;

    var x = (a * x0) + (c * y0) + tx;
    var y = (b * x0) + (d * y0) + ty;

    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    x = (a * x1) + (c * y0) + tx;
    y = (b * x1) + (d * y0) + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    x = (a * x0) + (c * y1) + tx;
    y = (b * x0) + (d * y1) + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    x = (a * x1) + (c * y1) + tx;
    y = (b * x1) + (d * y1) + ty;
    minX = x < minX ? x : minX;
    minY = y < minY ? y : minY;
    maxX = x > maxX ? x : maxX;
    maxY = y > maxY ? y : maxY;

    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
};

/**
 * Adds screen vertices from array
 *
 * @param {Float32Array} vertexData - calculated vertices
 * @param {number} beginOffset - begin offset
 * @param {number} endOffset - end offset, excluded
 */
Bounds.prototype.addVertexData = function addVertexData (vertexData, beginOffset, endOffset)
{
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;

    for (var i = beginOffset; i < endOffset; i += 2)
    {
        var x = vertexData[i];
        var y = vertexData[i + 1];

        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
    }

    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
};

/**
 * Add an array of mesh vertices
 *
 * @param {PIXI.Transform} transform - mesh transform
 * @param {Float32Array} vertices - mesh coordinates in array
 * @param {number} beginOffset - begin offset
 * @param {number} endOffset - end offset, excluded
 */
Bounds.prototype.addVertices = function addVertices (transform, vertices, beginOffset, endOffset)
{
    var matrix = transform.worldTransform;
    var a = matrix.a;
    var b = matrix.b;
    var c = matrix.c;
    var d = matrix.d;
    var tx = matrix.tx;
    var ty = matrix.ty;

    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;

    for (var i = beginOffset; i < endOffset; i += 2)
    {
        var rawX = vertices[i];
        var rawY = vertices[i + 1];
        var x = (a * rawX) + (c * rawY) + tx;
        var y = (d * rawY) + (b * rawX) + ty;

        minX = x < minX ? x : minX;
        minY = y < minY ? y : minY;
        maxX = x > maxX ? x : maxX;
        maxY = y > maxY ? y : maxY;
    }

    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
};

/**
 * Adds other Bounds
 *
 * @param {PIXI.Bounds} bounds - TODO
 */
Bounds.prototype.addBounds = function addBounds (bounds)
{
    var minX = this.minX;
    var minY = this.minY;
    var maxX = this.maxX;
    var maxY = this.maxY;

    this.minX = bounds.minX < minX ? bounds.minX : minX;
    this.minY = bounds.minY < minY ? bounds.minY : minY;
    this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;
    this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;
};

/**
 * Adds other Bounds, masked with Bounds
 *
 * @param {PIXI.Bounds} bounds - TODO
 * @param {PIXI.Bounds} mask - TODO
 */
Bounds.prototype.addBoundsMask = function addBoundsMask (bounds, mask)
{
    var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;
    var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;
    var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;
    var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;

    if (_minX <= _maxX && _minY <= _maxY)
    {
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;

        this.minX = _minX < minX ? _minX : minX;
        this.minY = _minY < minY ? _minY : minY;
        this.maxX = _maxX > maxX ? _maxX : maxX;
        this.maxY = _maxY > maxY ? _maxY : maxY;
    }
};

/**
 * Adds other Bounds, masked with Rectangle
 *
 * @param {PIXI.Bounds} bounds - TODO
 * @param {PIXI.Rectangle} area - TODO
 */
Bounds.prototype.addBoundsArea = function addBoundsArea (bounds, area)
{
    var _minX = bounds.minX > area.x ? bounds.minX : area.x;
    var _minY = bounds.minY > area.y ? bounds.minY : area.y;
    var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);
    var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);

    if (_minX <= _maxX && _minY <= _maxY)
    {
        var minX = this.minX;
        var minY = this.minY;
        var maxX = this.maxX;
        var maxY = this.maxY;

        this.minX = _minX < minX ? _minX : minX;
        this.minY = _minY < minY ? _minY : minY;
        this.maxX = _maxX > maxX ? _maxX : maxX;
        this.maxY = _maxY > maxY ? _maxY : maxY;
    }
};

// _tempDisplayObjectParent = new DisplayObject();

/**
 * The base class for all objects that are rendered on the screen.
 *
 * This is an abstract class and should not be used on its own; rather it should be extended.
 *
 * @class
 * @extends PIXI.utils.EventEmitter
 * @memberof PIXI
 */
var DisplayObject = /*@__PURE__*/(function (EventEmitter) {
    function DisplayObject()
    {
        EventEmitter.call(this);

        this.tempDisplayObjectParent = null;

        // TODO: need to create Transform from factory
        /**
         * World transform and local transform of this object.
         * This will become read-only later, please do not assign anything there unless you know what are you doing.
         *
         * @member {PIXI.Transform}
         */
        this.transform = new _pixi_math__WEBPACK_IMPORTED_MODULE_1__["Transform"]();

        /**
         * The opacity of the object.
         *
         * @member {number}
         */
        this.alpha = 1;

        /**
         * The visibility of the object. If false the object will not be drawn, and
         * the updateTransform function will not be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.
         *
         * @member {boolean}
         */
        this.visible = true;

        /**
         * Can this object be rendered, if false the object will not be drawn but the updateTransform
         * methods will still be called.
         *
         * Only affects recursive calls from parent. You can ask for bounds manually.
         *
         * @member {boolean}
         */
        this.renderable = true;

        /**
         * The display object container that contains this display object.
         *
         * @member {PIXI.Container}
         * @readonly
         */
        this.parent = null;

        /**
         * The multiplied alpha of the displayObject.
         *
         * @member {number}
         * @readonly
         */
        this.worldAlpha = 1;

        /**
         * Which index in the children array the display component was before the previous zIndex sort.
         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.
         *
         * @member {number}
         * @protected
         */
        this._lastSortedIndex = 0;

        /**
         * The zIndex of the displayObject.
         * A higher value will mean it will be rendered on top of other displayObjects within the same container.
         *
         * @member {number}
         * @protected
         */
        this._zIndex = 0;

        /**
         * The area the filter is applied to. This is used as more of an optimization
         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.
         *
         * Also works as an interaction mask.
         *
         * @member {?PIXI.Rectangle}
         */
        this.filterArea = null;

        /**
         * Sets the filters for the displayObject.
         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.
         * To remove filters simply set this property to `'null'`.
         *
         * @member {?PIXI.Filter[]}
         */
        this.filters = null;
        this._enabledFilters = null;

        /**
         * The bounds object, this is used to calculate and store the bounds of the displayObject.
         *
         * @member {PIXI.Bounds}
         * @protected
         */
        this._bounds = new Bounds();
        this._boundsID = 0;
        this._lastBoundsID = -1;
        this._boundsRect = null;
        this._localBoundsRect = null;

        /**
         * The original, cached mask of the object.
         *
         * @member {PIXI.Graphics|PIXI.Sprite|null}
         * @protected
         */
        this._mask = null;

        /**
         * Fired when this DisplayObject is added to a Container.
         *
         * @event PIXI.DisplayObject#added
         * @param {PIXI.Container} container - The container added to.
         */

        /**
         * Fired when this DisplayObject is removed from a Container.
         *
         * @event PIXI.DisplayObject#removed
         * @param {PIXI.Container} container - The container removed from.
         */

        /**
         * If the object has been destroyed via destroy(). If true, it should not be used.
         *
         * @member {boolean}
         * @protected
         */
        this._destroyed = false;

        /**
         * used to fast check if a sprite is.. a sprite!
         * @member {boolean}
         */
        this.isSprite = false;
    }

    if ( EventEmitter ) DisplayObject.__proto__ = EventEmitter;
    DisplayObject.prototype = Object.create( EventEmitter && EventEmitter.prototype );
    DisplayObject.prototype.constructor = DisplayObject;

    var prototypeAccessors = { _tempDisplayObjectParent: { configurable: true },x: { configurable: true },y: { configurable: true },worldTransform: { configurable: true },localTransform: { configurable: true },position: { configurable: true },scale: { configurable: true },pivot: { configurable: true },skew: { configurable: true },rotation: { configurable: true },angle: { configurable: true },zIndex: { configurable: true },worldVisible: { configurable: true },mask: { configurable: true } };

    /**
     * @protected
     * @member {PIXI.DisplayObject}
     */
    DisplayObject.mixin = function mixin (source)
    {
        // in ES8/ES2017, this would be really easy:
        // Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));

        // get all the enumerable property keys
        var keys = Object.keys(source);

        // loop through properties
        for (var i = 0; i < keys.length; ++i)
        {
            var propertyName = keys[i];

            // Set the property using the property descriptor - this works for accessors and normal value properties
            Object.defineProperty(
                DisplayObject.prototype,
                propertyName,
                Object.getOwnPropertyDescriptor(source, propertyName)
            );
        }
    };

    prototypeAccessors._tempDisplayObjectParent.get = function ()
    {
        if (this.tempDisplayObjectParent === null)
        {
            this.tempDisplayObjectParent = new DisplayObject();
        }

        return this.tempDisplayObjectParent;
    };

    /**
     * Updates the object transform for rendering.
     *
     * TODO - Optimization pass!
     */
    DisplayObject.prototype.updateTransform = function updateTransform ()
    {
        this.transform.updateTransform(this.parent.transform);
        // multiply the alphas..
        this.worldAlpha = this.alpha * this.parent.worldAlpha;

        this._bounds.updateID++;
    };

    /**
     * Recursively updates transform of all objects from the root to this one
     * internal function for toLocal()
     */
    DisplayObject.prototype._recursivePostUpdateTransform = function _recursivePostUpdateTransform ()
    {
        if (this.parent)
        {
            this.parent._recursivePostUpdateTransform();
            this.transform.updateTransform(this.parent.transform);
        }
        else
        {
            this.transform.updateTransform(this._tempDisplayObjectParent.transform);
        }
    };

    /**
     * Retrieves the bounds of the displayObject as a rectangle object.
     *
     * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from
     *  being updated. This means the calculation returned MAY be out of date BUT will give you a
     *  nice performance boost.
     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
     * @return {PIXI.Rectangle} The rectangular bounding area.
     */
    DisplayObject.prototype.getBounds = function getBounds (skipUpdate, rect)
    {
        if (!skipUpdate)
        {
            if (!this.parent)
            {
                this.parent = this._tempDisplayObjectParent;
                this.updateTransform();
                this.parent = null;
            }
            else
            {
                this._recursivePostUpdateTransform();
                this.updateTransform();
            }
        }

        if (this._boundsID !== this._lastBoundsID)
        {
            this.calculateBounds();
            this._lastBoundsID = this._boundsID;
        }

        if (!rect)
        {
            if (!this._boundsRect)
            {
                this._boundsRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_1__["Rectangle"]();
            }

            rect = this._boundsRect;
        }

        return this._bounds.getRectangle(rect);
    };

    /**
     * Retrieves the local bounds of the displayObject as a rectangle object.
     *
     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.
     * @return {PIXI.Rectangle} The rectangular bounding area.
     */
    DisplayObject.prototype.getLocalBounds = function getLocalBounds (rect)
    {
        var transformRef = this.transform;
        var parentRef = this.parent;

        this.parent = null;
        this.transform = this._tempDisplayObjectParent.transform;

        if (!rect)
        {
            if (!this._localBoundsRect)
            {
                this._localBoundsRect = new _pixi_math__WEBPACK_IMPORTED_MODULE_1__["Rectangle"]();
            }

            rect = this._localBoundsRect;
        }

        var bounds = this.getBounds(false, rect);

        this.parent = parentRef;
        this.transform = transformRef;

        return bounds;
    };

    /**
     * Calculates the global position of the display object.
     *
     * @param {PIXI.IPoint} position - The world origin to calculate from.
     * @param {PIXI.IPoint} [point] - A Point object in which to store the value, optional
     *  (otherwise will create a new Point).
     * @param {boolean} [skipUpdate=false] - Should we skip the update transform.
     * @return {PIXI.IPoint} A point object representing the position of this object.
     */
    DisplayObject.prototype.toGlobal = function toGlobal (position, point, skipUpdate)
    {
        if ( skipUpdate === void 0 ) skipUpdate = false;

        if (!skipUpdate)
        {
            this._recursivePostUpdateTransform();

            // this parent check is for just in case the item is a root object.
            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)
            if (!this.parent)
            {
                this.parent = this._tempDisplayObjectParent;
                this.displayObjectUpdateTransform();
                this.parent = null;
            }
            else
            {
                this.displayObjectUpdateTransform();
            }
        }

        // don't need to update the lot
        return this.worldTransform.apply(position, point);
    };

    /**
     * Calculates the local position of the display object relative to another point.
     *
     * @param {PIXI.IPoint} position - The world origin to calculate from.
     * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.
     * @param {PIXI.IPoint} [point] - A Point object in which to store the value, optional
     *  (otherwise will create a new Point).
     * @param {boolean} [skipUpdate=false] - Should we skip the update transform
     * @return {PIXI.IPoint} A point object representing the position of this object
     */
    DisplayObject.prototype.toLocal = function toLocal (position, from, point, skipUpdate)
    {
        if (from)
        {
            position = from.toGlobal(position, point, skipUpdate);
        }

        if (!skipUpdate)
        {
            this._recursivePostUpdateTransform();

            // this parent check is for just in case the item is a root object.
            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly
            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)
            if (!this.parent)
            {
                this.parent = this._tempDisplayObjectParent;
                this.displayObjectUpdateTransform();
                this.parent = null;
            }
            else
            {
                this.displayObjectUpdateTransform();
            }
        }

        // simply apply the matrix..
        return this.worldTransform.applyInverse(position, point);
    };

    /**
     * Renders the object using the WebGL renderer.
     *
     * @param {PIXI.Renderer} renderer - The renderer.
     */
    DisplayObject.prototype.render = function render (renderer) // eslint-disable-line no-unused-vars
    {
        // OVERWRITE;
    };

    /**
     * Set the parent Container of this DisplayObject.
     *
     * @param {PIXI.Container} container - The Container to add this DisplayObject to.
     * @return {PIXI.Container} The Container that this DisplayObject was added to.
     */
    DisplayObject.prototype.setParent = function setParent (container)
    {
        if (!container || !container.addChild)
        {
            throw new Error('setParent: Argument must be a Container');
        }

        container.addChild(this);

        return container;
    };

    /**
     * Convenience function to set the position, scale, skew and pivot at once.
     *
     * @param {number} [x=0] - The X position
     * @param {number} [y=0] - The Y position
     * @param {number} [scaleX=1] - The X scale value
     * @param {number} [scaleY=1] - The Y scale value
     * @param {number} [rotation=0] - The rotation
     * @param {number} [skewX=0] - The X skew value
     * @param {number} [skewY=0] - The Y skew value
     * @param {number} [pivotX=0] - The X pivot value
     * @param {number} [pivotY=0] - The Y pivot value
     * @return {PIXI.DisplayObject} The DisplayObject instance
     */
    DisplayObject.prototype.setTransform = function setTransform (x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY)
    {
        if ( x === void 0 ) x = 0;
        if ( y === void 0 ) y = 0;
        if ( scaleX === void 0 ) scaleX = 1;
        if ( scaleY === void 0 ) scaleY = 1;
        if ( rotation === void 0 ) rotation = 0;
        if ( skewX === void 0 ) skewX = 0;
        if ( skewY === void 0 ) skewY = 0;
        if ( pivotX === void 0 ) pivotX = 0;
        if ( pivotY === void 0 ) pivotY = 0;

        this.position.x = x;
        this.position.y = y;
        this.scale.x = !scaleX ? 1 : scaleX;
        this.scale.y = !scaleY ? 1 : scaleY;
        this.rotation = rotation;
        this.skew.x = skewX;
        this.skew.y = skewY;
        this.pivot.x = pivotX;
        this.pivot.y = pivotY;

        return this;
    };

    /**
     * Base destroy method for generic display objects. This will automatically
     * remove the display object from its parent Container as well as remove
     * all current event listeners and internal references. Do not use a DisplayObject
     * after calling `destroy()`.
     *
     */
    DisplayObject.prototype.destroy = function destroy ()
    {
        this.removeAllListeners();
        if (this.parent)
        {
            this.parent.removeChild(this);
        }
        this.transform = null;

        this.parent = null;

        this._bounds = null;
        this._currentBounds = null;
        this._mask = null;

        this.filterArea = null;

        this.interactive = false;
        this.interactiveChildren = false;

        this._destroyed = true;
    };

    /**
     * The position of the displayObject on the x axis relative to the local coordinates of the parent.
     * An alias to position.x
     *
     * @member {number}
     */
    prototypeAccessors.x.get = function ()
    {
        return this.position.x;
    };

    prototypeAccessors.x.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.position.x = value;
    };

    /**
     * The position of the displayObject on the y axis relative to the local coordinates of the parent.
     * An alias to position.y
     *
     * @member {number}
     */
    prototypeAccessors.y.get = function ()
    {
        return this.position.y;
    };

    prototypeAccessors.y.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.position.y = value;
    };

    /**
     * Current transform of the object based on world (parent) factors.
     *
     * @member {PIXI.Matrix}
     * @readonly
     */
    prototypeAccessors.worldTransform.get = function ()
    {
        return this.transform.worldTransform;
    };

    /**
     * Current transform of the object based on local factors: position, scale, other stuff.
     *
     * @member {PIXI.Matrix}
     * @readonly
     */
    prototypeAccessors.localTransform.get = function ()
    {
        return this.transform.localTransform;
    };

    /**
     * The coordinate of the object relative to the local coordinates of the parent.
     * Assignment by value since pixi-v4.
     *
     * @member {PIXI.IPoint}
     */
    prototypeAccessors.position.get = function ()
    {
        return this.transform.position;
    };

    prototypeAccessors.position.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.position.copyFrom(value);
    };

    /**
     * The scale factor of the object.
     * Assignment by value since pixi-v4.
     *
     * @member {PIXI.IPoint}
     */
    prototypeAccessors.scale.get = function ()
    {
        return this.transform.scale;
    };

    prototypeAccessors.scale.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.scale.copyFrom(value);
    };

    /**
     * The pivot point of the displayObject that it rotates around.
     * Assignment by value since pixi-v4.
     *
     * @member {PIXI.IPoint}
     */
    prototypeAccessors.pivot.get = function ()
    {
        return this.transform.pivot;
    };

    prototypeAccessors.pivot.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.pivot.copyFrom(value);
    };

    /**
     * The skew factor for the object in radians.
     * Assignment by value since pixi-v4.
     *
     * @member {PIXI.ObservablePoint}
     */
    prototypeAccessors.skew.get = function ()
    {
        return this.transform.skew;
    };

    prototypeAccessors.skew.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.skew.copyFrom(value);
    };

    /**
     * The rotation of the object in radians.
     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
     *
     * @member {number}
     */
    prototypeAccessors.rotation.get = function ()
    {
        return this.transform.rotation;
    };

    prototypeAccessors.rotation.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.rotation = value;
    };

    /**
     * The angle of the object in degrees.
     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.
     *
     * @member {number}
     */
    prototypeAccessors.angle.get = function ()
    {
        return this.transform.rotation * _pixi_math__WEBPACK_IMPORTED_MODULE_1__["RAD_TO_DEG"];
    };

    prototypeAccessors.angle.set = function (value) // eslint-disable-line require-jsdoc
    {
        this.transform.rotation = value * _pixi_math__WEBPACK_IMPORTED_MODULE_1__["DEG_TO_RAD"];
    };

    /**
     * The zIndex of the displayObject.
     * If a container has the sortableChildren property set to true, children will be automatically
     * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,
     * and thus rendered on top of other displayObjects within the same container.
     *
     * @member {number}
     */
    prototypeAccessors.zIndex.get = function ()
    {
        return this._zIndex;
    };

    prototypeAccessors.zIndex.set = function (value) // eslint-disable-line require-jsdoc
    {
        this._zIndex = value;
        if (this.parent)
        {
            this.parent.sortDirty = true;
        }
    };

    /**
     * Indicates if the object is globally visible.
     *
     * @member {boolean}
     * @readonly
     */
    prototypeAccessors.worldVisible.get = function ()
    {
        var item = this;

        do
        {
            if (!item.visible)
            {
                return false;
            }

            item = item.parent;
        } while (item);

        return true;
    };

    /**
     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an
     * object to the shape of the mask applied to it. In PixiJS a regular mask must be a
     * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it
     * utilities shape clipping. To remove a mask, set this property to `null`.
     *
     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.
     * @example
     * const graphics = new PIXI.Graphics();
     * graphics.beginFill(0xFF3300);
     * graphics.drawRect(50, 250, 100, 100);
     * graphics.endFill();
     *
     * const sprite = new PIXI.Sprite(texture);
     * sprite.mask = graphics;
     * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.
     *
     * @member {PIXI.Graphics|PIXI.Sprite|null}
     */
    prototypeAccessors.mask.get = function ()
    {
        return this._mask;
    };

    prototypeAccessors.mask.set = function (value) // eslint-disable-line require-jsdoc
    {
        if (this._mask)
        {
            this._mask.renderable = true;
            this._mask.isMask = false;
        }

        this._mask = value;

        if (this._mask)
        {
            this._mask.renderable = false;
            this._mask.isMask = true;
        }
    };

    Object.defineProperties( DisplayObject.prototype, prototypeAccessors );

    return DisplayObject;
}(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]));

/**
 * DisplayObject default updateTransform, does not update children of container.
 * Will crash if there's no parent element.
 *
 * @memberof PIXI.DisplayObject#
 * @function displayObjectUpdateTransform
 */
DisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;

function sortChildren(a, b)
{
    if (a.zIndex === b.zIndex)
    {
        return a._lastSortedIndex - b._lastSortedIndex;
    }

    return a.zIndex - b.zIndex;
}

/**
 * A Container represents a collection of display objects.
 *
 * It is the base class of all display objects that act as a container for other objects (like Sprites).
 *
 *```js
 * let container = new PIXI.Container();
 * container.addChild(sprite);
 * ```
 *
 * @class
 * @extends PIXI.DisplayObject
 * @memberof PIXI
 */
var Container = /*@__PURE__*/(function (DisplayObject) {
    function Container()
    {
        DisplayObject.call(this);

        /**
         * The array of children of this container.
         *
         * @member {PIXI.DisplayObject[]}
         * @readonly
         */
        this.children = [];

        /**
         * If set to true, the container will sort its children by zIndex value
         * when updateTransform() is called, or manually if sortChildren() is called.
         *
         * This actually changes the order of elements in the array, so should be treated
         * as a basic solution that is not performant compared to other solutions,
         * such as @link https://github.com/pixijs/pixi-display
         *
         * Also be aware of that this may not work nicely with the addChildAt() function,
         * as the zIndex sorting may cause the child to automatically sorted to another position.
         *
         * @see PIXI.settings.SORTABLE_CHILDREN
         *
         * @member {boolean}
         */
        this.sortableChildren = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].SORTABLE_CHILDREN;

        /**
         * Should children be sorted by zIndex at the next updateTransform call.
         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.
         *
         * @member {boolean}
         */
        this.sortDirty = false;

        /**
         * Fired when a DisplayObject is added to this Container.
         *
         * @event PIXI.Container#childAdded
         * @param {PIXI.DisplayObject} child - The child added to the Container.
         * @param {PIXI.Container} container - The container that added the child.
         * @param {number} index - The children's index of the added child.
         */

        /**
         * Fired when a DisplayObject is removed from this Container.
         *
         * @event PIXI.DisplayObject#removedFrom
         * @param {PIXI.DisplayObject} child - The child removed from the Container.
         * @param {PIXI.Container} container - The container that removed removed the child.
         * @param {number} index - The former children's index of the removed child
         */
    }

    if ( DisplayObject ) Container.__proto__ = DisplayObject;
    Container.prototype = Object.create( DisplayObject && DisplayObject.prototype );
    Container.prototype.constructor = Container;

    var prototypeAccessors = { width: { configurable: true },height: { configurable: true } };

    /**
     * Overridable method that can be used by Container subclasses whenever the children array is modified
     *
     * @protected
     */
    Container.prototype.onChildrenChange = function onChildrenChange ()
    {
        /* empty */
    };

    /**
     * Adds one or more children to the container.
     *
     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`
     *
     * @param {...PIXI.DisplayObject} child - The DisplayObject(s) to add to the container
     * @return {PIXI.DisplayObject} The first child that was added.
     */
    Container.prototype.addChild = function addChild (child)
    {
        var arguments$1 = arguments;

        var argumentsLength = arguments.length;

        // if there is only one argument we can bypass looping through the them
        if (argumentsLength > 1)
        {
            // loop through the arguments property and add all children
            // use it the right way (.length and [i]) so that this function can still be optimized by JS runtimes
            for (var i = 0; i < argumentsLength; i++)
            {
                this.addChild(arguments$1[i]);
            }
        }
        else
        {
            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place
            if (child.parent)
            {
                child.parent.removeChild(child);
            }

            child.parent = this;
            this.sortDirty = true;

            // ensure child transform will be recalculated
            child.transform._parentID = -1;

            this.children.push(child);

            // ensure bounds will be recalculated
            this._boundsID++;

            // TODO - lets either do all callbacks or all events.. not both!
            this.onChildrenChange(this.children.length - 1);
            this.emit('childAdded', child, this, this.children.length - 1);
            child.emit('added', this);
        }

        return child;
    };

    /**
     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown
     *
     * @param {PIXI.DisplayObject} child - The child to add
     * @param {number} index - The index to place the child in
     * @return {PIXI.DisplayObject} The child that was added.
     */
    Container.prototype.addChildAt = function addChildAt (child, index)
    {
        if (index < 0 || index > this.children.length)
        {
            throw new Error((child + "addChildAt: The index " + index + " supplied is out of bounds " + (this.children.length)));
        }

        if (child.parent)
        {
            child.parent.removeChild(child);
        }

        child.parent = this;
        this.sortDirty = true;

        // ensure child transform will be recalculated
        child.transform._parentID = -1;

        this.children.splice(index, 0, child);

        // ensure bounds will be recalculated
        this._boundsID++;

        // TODO - lets either do all callbacks or all events.. not both!
        this.onChildrenChange(index);
        child.emit('added', this);
        this.emit('childAdded', child, this, index);

        return child;
    };

    /**
     * Swaps the position of 2 Display Objects within this container.
     *
     * @param {PIXI.DisplayObject} child - First display object to swap
     * @param {PIXI.DisplayObject} child2 - Second display object to swap
     */
    Container.prototype.swapChildren = function swapChildren (child, child2)
    {
        if (child === child2)
        {
            return;
        }

        var index1 = this.getChildIndex(child);
        var index2 = this.getChildIndex(child2);

        this.children[index1] = child2;
        this.children[index2] = child;
        this.onChildrenChange(index1 < index2 ? index1 : index2);
    };

    /**
     * Returns the index position of a child DisplayObject instance
     *
     * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify
     * @return {number} The index position of the child display object to identify
     */
    Container.prototype.getChildIndex = function getChildIndex (child)
    {
        var index = this.children.indexOf(child);

        if (index === -1)
        {
            throw new Error('The supplied DisplayObject must be a child of the caller');
        }

        return index;
    };

    /**
     * Changes the position of an existing child in the display object container
     *
     * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number
     * @param {number} index - The resulting index number for the child display object
     */
    Container.prototype.setChildIndex = function setChildIndex (child, index)
    {
        if (index < 0 || index >= this.children.length)
        {
            throw new Error(("The index " + index + " supplied is out of bounds " + (this.children.length)));
        }

        var currentIndex = this.getChildIndex(child);

        Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__["removeItems"])(this.children, currentIndex, 1); // remove from old position
        this.children.splice(index, 0, child); // add at new position

        this.onChildrenChange(index);
    };

    /**
     * Returns the child at the specified index
     *
     * @param {number} index - The index to get the child at
     * @return {PIXI.DisplayObject} The child at the given index, if any.
     */
    Container.prototype.getChildAt = function getChildAt (index)
    {
        if (index < 0 || index >= this.children.length)
        {
            throw new Error(("getChildAt: Index (" + index + ") does not exist."));
        }

        return this.children[index];
    };

    /**
     * Removes one or more children from the container.
     *
     * @param {...PIXI.DisplayObject} child - The DisplayObject(s) to remove
     * @return {PIXI.DisplayObject} The first child that was removed.
     */
    Container.prototype.removeChild = function removeChild (child)
    {
        var arguments$1 = arguments;

        var argumentsLength = arguments.length;

        // if there is only one argument we can bypass looping through the them
        if (argumentsLength > 1)
        {
            // loop through the arguments property and add all children
            // use it the right way (.length and [i]) so that this function can still be optimized by JS runtimes
            for (var i = 0; i < argumentsLength; i++)
            {
                this.removeChild(arguments$1[i]);
            }
        }
        else
        {
            var index = this.children.indexOf(child);

            if (index === -1) { return null; }

            child.parent = null;
            // ensure child transform will be recalculated
            child.transform._parentID = -1;
            Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__["removeItems"])(this.children, index, 1);

            // ensure bounds will be recalculated
            this._boundsID++;

            // TODO - lets either do all callbacks or all events.. not both!
            this.onChildrenChange(index);
            child.emit('removed', this);
            this.emit('childRemoved', child, this, index);
        }

        return child;
    };

    /**
     * Removes a child from the specified index position.
     *
     * @param {number} index - The index to get the child from
     * @return {PIXI.DisplayObject} The child that was removed.
     */
    Container.prototype.removeChildAt = function removeChildAt (index)
    {
        var child = this.getChildAt(index);

        // ensure child transform will be recalculated..
        child.parent = null;
        child.transform._parentID = -1;
        Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_2__["removeItems"])(this.children, index, 1);

        // ensure bounds will be recalculated
        this._boundsID++;

        // TODO - lets either do all callbacks or all events.. not both!
        this.onChildrenChange(index);
        child.emit('removed', this);
        this.emit('childRemoved', child, this, index);

        return child;
    };

    /**
     * Removes all children from this container that are within the begin and end indexes.
     *
     * @param {number} [beginIndex=0] - The beginning position.
     * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.
     * @returns {PIXI.DisplayObject[]} List of removed children
     */
    Container.prototype.removeChildren = function removeChildren (beginIndex, endIndex)
    {
        if ( beginIndex === void 0 ) beginIndex = 0;

        var begin = beginIndex;
        var end = typeof endIndex === 'number' ? endIndex : this.children.length;
        var range = end - begin;
        var removed;

        if (range > 0 && range <= end)
        {
            removed = this.children.splice(begin, range);

            for (var i = 0; i < removed.length; ++i)
            {
                removed[i].parent = null;
                if (removed[i].transform)
                {
                    removed[i].transform._parentID = -1;
                }
            }

            this._boundsID++;

            this.onChildrenChange(beginIndex);

            for (var i$1 = 0; i$1 < removed.length; ++i$1)
            {
                removed[i$1].emit('removed', this);
                this.emit('childRemoved', removed[i$1], this, i$1);
            }

            return removed;
        }
        else if (range === 0 && this.children.length === 0)
        {
            return [];
        }

        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');
    };

    /**
     * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.
     */
    Container.prototype.sortChildren = function sortChildren$1 ()
    {
        var sortRequired = false;

        for (var i = 0, j = this.children.length; i < j; ++i)
        {
            var child = this.children[i];

            child._lastSortedIndex = i;

            if (!sortRequired && child.zIndex !== 0)
            {
                sortRequired = true;
            }
        }

        if (sortRequired && this.children.length > 1)
        {
            this.children.sort(sortChildren);
        }

        this.sortDirty = false;
    };

    /**
     * Updates the transform on all children of this container for rendering
     */
    Container.prototype.updateTransform = function updateTransform ()
    {
        if (this.sortableChildren && this.sortDirty)
        {
            this.sortChildren();
        }

        this._boundsID++;

        this.transform.updateTransform(this.parent.transform);

        // TODO: check render flags, how to process stuff here
        this.worldAlpha = this.alpha * this.parent.worldAlpha;

        for (var i = 0, j = this.children.length; i < j; ++i)
        {
            var child = this.children[i];

            if (child.visible)
            {
                child.updateTransform();
            }
        }
    };

    /**
     * Recalculates the bounds of the container.
     *
     */
    Container.prototype.calculateBounds = function calculateBounds ()
    {
        this._bounds.clear();

        this._calculateBounds();

        for (var i = 0; i < this.children.length; i++)
        {
            var child = this.children[i];

            if (!child.visible || !child.renderable)
            {
                continue;
            }

            child.calculateBounds();

            // TODO: filter+mask, need to mask both somehow
            if (child._mask)
            {
                child._mask.calculateBounds();
                this._bounds.addBoundsMask(child._bounds, child._mask._bounds);
            }
            else if (child.filterArea)
            {
                this._bounds.addBoundsArea(child._bounds, child.filterArea);
            }
            else
            {
                this._bounds.addBounds(child._bounds);
            }
        }

        this._lastBoundsID = this._boundsID;
    };

    /**
     * Recalculates the bounds of the object. Override this to
     * calculate the bounds of the specific object (not including children).
     *
     * @protected
     */
    Container.prototype._calculateBounds = function _calculateBounds ()
    {
        // FILL IN//
    };

    /**
     * Renders the object using the WebGL renderer
     *
     * @param {PIXI.Renderer} renderer - The renderer
     */
    Container.prototype.render = function render (renderer)
    {
        // if the object is not visible or the alpha is 0 then no need to render this element
        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)
        {
            return;
        }

        // do a quick check to see if this element has a mask or a filter.
        if (this._mask || (this.filters && this.filters.length))
        {
            this.renderAdvanced(renderer);
        }
        else
        {
            this._render(renderer);

            // simple render children!
            for (var i = 0, j = this.children.length; i < j; ++i)
            {
                this.children[i].render(renderer);
            }
        }
    };

    /**
     * Render the object using the WebGL renderer and advanced features.
     *
     * @protected
     * @param {PIXI.Renderer} renderer - The renderer
     */
    Container.prototype.renderAdvanced = function renderAdvanced (renderer)
    {
        renderer.batch.flush();

        var filters = this.filters;
        var mask = this._mask;

        // push filter first as we need to ensure the stencil buffer is correct for any masking
        if (filters)
        {
            if (!this._enabledFilters)
            {
                this._enabledFilters = [];
            }

            this._enabledFilters.length = 0;

            for (var i = 0; i < filters.length; i++)
            {
                if (filters[i].enabled)
                {
                    this._enabledFilters.push(filters[i]);
                }
            }

            if (this._enabledFilters.length)
            {
                renderer.filter.push(this, this._enabledFilters);
            }
        }

        if (mask)
        {
            renderer.mask.push(this, this._mask);
        }

        // add this object to the batch, only rendered if it has a texture.
        this._render(renderer);

        // now loop through the children and make sure they get rendered
        for (var i$1 = 0, j = this.children.length; i$1 < j; i$1++)
        {
            this.children[i$1].render(renderer);
        }

        renderer.batch.flush();

        if (mask)
        {
            renderer.mask.pop(this, this._mask);
        }

        if (filters && this._enabledFilters && this._enabledFilters.length)
        {
            renderer.filter.pop();
        }
    };

    /**
     * To be overridden by the subclasses.
     *
     * @protected
     * @param {PIXI.Renderer} renderer - The renderer
     */
    Container.prototype._render = function _render (renderer) // eslint-disable-line no-unused-vars
    {
        // this is where content itself gets rendered...
    };

    /**
     * Removes all internal references and listeners as well as removes children from the display list.
     * Do not use a Container after calling `destroy`.
     *
     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options
     *  have been set to that value
     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy
     *  method called as well. 'options' will be passed on to those calls.
     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true
     *  Should it destroy the texture of the child sprite
     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true
     *  Should it destroy the base texture of the child sprite
     */
    Container.prototype.destroy = function destroy (options)
    {
        DisplayObject.prototype.destroy.call(this);

        this.sortDirty = false;

        var destroyChildren = typeof options === 'boolean' ? options : options && options.children;

        var oldChildren = this.removeChildren(0, this.children.length);

        if (destroyChildren)
        {
            for (var i = 0; i < oldChildren.length; ++i)
            {
                oldChildren[i].destroy(options);
            }
        }
    };

    /**
     * The width of the Container, setting this will actually modify the scale to achieve the value set
     *
     * @member {number}
     */
    prototypeAccessors.width.get = function ()
    {
        return this.scale.x * this.getLocalBounds().width;
    };

    prototypeAccessors.width.set = function (value) // eslint-disable-line require-jsdoc
    {
        var width = this.getLocalBounds().width;

        if (width !== 0)
        {
            this.scale.x = value / width;
        }
        else
        {
            this.scale.x = 1;
        }

        this._width = value;
    };

    /**
     * The height of the Container, setting this will actually modify the scale to achieve the value set
     *
     * @member {number}
     */
    prototypeAccessors.height.get = function ()
    {
        return this.scale.y * this.getLocalBounds().height;
    };

    prototypeAccessors.height.set = function (value) // eslint-disable-line require-jsdoc
    {
        var height = this.getLocalBounds().height;

        if (height !== 0)
        {
            this.scale.y = value / height;
        }
        else
        {
            this.scale.y = 1;
        }

        this._height = value;
    };

    Object.defineProperties( Container.prototype, prototypeAccessors );

    return Container;
}(DisplayObject));

// performance increase to avoid using call.. (10x faster)
Container.prototype.containerUpdateTransform = Container.prototype.updateTransform;


//# sourceMappingURL=display.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/filter-outline/lib/filter-outline.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@pixi/filter-outline/lib/filter-outline.esm.js ***!
  \*********************************************************************/
/*! exports provided: OutlineFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutlineFilter", function() { return OutlineFilter; });
/* harmony import */ var _pixi_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/core.es.js");
/* harmony import */ var _pixi_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pixi/utils */ "./node_modules/@pixi/utils/lib/utils.es.js");
/*!
 * @pixi/filter-outline - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-outline is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */



var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec2 thickness;\nuniform vec4 outlineColor;\nuniform vec4 filterClamp;\n\nconst float DOUBLE_PI = 3.14159265358979323846264 * 2.;\n\nvoid main(void) {\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float maxAlpha = 0.;\n    vec2 displaced;\n    for (float angle = 0.; angle <= DOUBLE_PI; angle += ${angleStep}) {\n        displaced.x = vTextureCoord.x + thickness.x * cos(angle);\n        displaced.y = vTextureCoord.y + thickness.y * sin(angle);\n        curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\n        maxAlpha = max(maxAlpha, curColor.a);\n    }\n    float resultAlpha = max(maxAlpha, ownColor.a);\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\n}\n";

/**
 * OutlineFilter, originally by mishaa
 * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966
 * http://codepen.io/mishaa/pen/emGNRB<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/outline.png)
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 * @see {@link https://www.npmjs.com/package/@pixi/filter-outline|@pixi/filter-outline}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 * @param {number} [thickness=1] The tickness of the outline. Make it 2 times more for resolution 2
 * @param {number} [color=0x000000] The color of the outline.
 * @param {number} [quality=0.1] The quality of the outline from `0` to `1`, using a higher quality
 *        setting will result in slower performance and more accuracy.
 *
 * @example
 *  someSprite.shader = new OutlineFilter(9, 0xFF0000);
 */
var OutlineFilter = /*@__PURE__*/(function (Filter) {
    function OutlineFilter(thickness, color, quality) {
        if ( thickness === void 0 ) thickness = 1;
        if ( color === void 0 ) color = 0x000000;
        if ( quality === void 0 ) quality = 0.1;

        var samples =  Math.max(
            quality * OutlineFilter.MAX_SAMPLES,
            OutlineFilter.MIN_SAMPLES
        );
        var angleStep = (Math.PI * 2 / samples).toFixed(7);

        Filter.call(this, vertex, fragment.replace(/\$\{angleStep\}/, angleStep));
        this.uniforms.thickness = new Float32Array([0, 0]);

        /**
         * The thickness of the outline.
         * @member {number}
         * @default 1
         */
        this.thickness = thickness;

        this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);
        this.color = color;

        this.quality = quality;
    }

    if ( Filter ) OutlineFilter.__proto__ = Filter;
    OutlineFilter.prototype = Object.create( Filter && Filter.prototype );
    OutlineFilter.prototype.constructor = OutlineFilter;

    var prototypeAccessors = { color: { configurable: true } };

    OutlineFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.thickness[0] = this.thickness / input._frame.width;
        this.uniforms.thickness[1] = this.thickness / input._frame.height;

        filterManager.applyFilter(this, input, output, clear);
    };

    /**
     * The color of the glow.
     * @member {number}
     * @default 0x000000
     */
    prototypeAccessors.color.get = function () {
        return Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["rgb2hex"])(this.uniforms.outlineColor);
    };
    prototypeAccessors.color.set = function (value) {
        Object(_pixi_utils__WEBPACK_IMPORTED_MODULE_1__["hex2rgb"])(value, this.uniforms.outlineColor);
    };

    Object.defineProperties( OutlineFilter.prototype, prototypeAccessors );

    return OutlineFilter;
}(_pixi_core__WEBPACK_IMPORTED_MODULE_0__["Filter"]));

/**
 * The minimum number of samples for rendering outline.
 * @static
 * @member {number} MIN_SAMPLES
 * @memberof PIXI.filters.OutlineFilter
 * @default 1
 */
OutlineFilter.MIN_SAMPLES = 1;

/**
 * The maximum number of samples for rendering outline.
 * @static
 * @member {number} MAX_SAMPLES
 * @memberof PIXI.filters.OutlineFilter
 * @default 100
 */
OutlineFilter.MAX_SAMPLES = 100;


//# sourceMappingURL=filter-outline.esm.js.map


/***/ }),

/***/ "./node_modules/@pixi/math/lib/math.es.js":
/*!************************************************!*\
  !*** ./node_modules/@pixi/math/lib/math.es.js ***!
  \************************************************/
/*! exports provided: Circle, DEG_TO_RAD, Ellipse, GroupD8, Matrix, ObservablePoint, PI_2, Point, Polygon, RAD_TO_DEG, Rectangle, RoundedRectangle, SHAPES, Transform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Circle", function() { return Circle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEG_TO_RAD", function() { return DEG_TO_RAD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ellipse", function() { return Ellipse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupD8", function() { return GroupD8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix", function() { return Matrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObservablePoint", function() { return ObservablePoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PI_2", function() { return PI_2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Point", function() { return Point; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return Polygon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RAD_TO_DEG", function() { return RAD_TO_DEG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rectangle", function() { return Rectangle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoundedRectangle", function() { return RoundedRectangle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SHAPES", function() { return SHAPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transform", function() { return Transform; });
/*!
 * @pixi/math - v5.1.0
 * Compiled Fri, 19 Jul 2019 21:54:36 UTC
 *
 * @pixi/math is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/**
 * The Point object represents a location in a two-dimensional coordinate system, where x represents
 * the horizontal axis and y represents the vertical axis.
 *
 * @class
 * @memberof PIXI
 */
var Point = function Point(x, y)
{
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;
};

/**
 * Creates a clone of this point
 *
 * @return {PIXI.Point} a copy of the point
 */
Point.prototype.clone = function clone ()
{
    return new Point(this.x, this.y);
};

/**
 * Copies x and y from the given point
 *
 * @param {PIXI.IPoint} p - The point to copy from
 * @returns {PIXI.IPoint} Returns itself.
 */
Point.prototype.copyFrom = function copyFrom (p)
{
    this.set(p.x, p.y);

    return this;
};

/**
 * Copies x and y into the given point
 *
 * @param {PIXI.IPoint} p - The point to copy.
 * @returns {PIXI.IPoint} Given point with values updated
 */
Point.prototype.copyTo = function copyTo (p)
{
    p.set(this.x, this.y);

    return p;
};

/**
 * Returns true if the given point is equal to this point
 *
 * @param {PIXI.IPoint} p - The point to check
 * @returns {boolean} Whether the given point equal to this point
 */
Point.prototype.equals = function equals (p)
{
    return (p.x === this.x) && (p.y === this.y);
};

/**
 * Sets the point to a new x and y position.
 * If y is omitted, both x and y will be set to x.
 *
 * @param {number} [x=0] - position of the point on the x axis
 * @param {number} [y=0] - position of the point on the y axis
 */
Point.prototype.set = function set (x, y)
{
    this.x = x || 0;
    this.y = y || ((y !== 0) ? this.x : 0);
};

/**
 * The Point object represents a location in a two-dimensional coordinate system, where x represents
 * the horizontal axis and y represents the vertical axis.
 *
 * An ObservablePoint is a point that triggers a callback when the point's position is changed.
 *
 * @class
 * @memberof PIXI
 */
var ObservablePoint = function ObservablePoint(cb, scope, x, y)
{
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;

    this._x = x;
    this._y = y;

    this.cb = cb;
    this.scope = scope;
};

var prototypeAccessors = { x: { configurable: true },y: { configurable: true } };

/**
 * Creates a clone of this point.
 * The callback and scope params can be overidden otherwise they will default
 * to the clone object's values.
 *
 * @override
 * @param {Function} [cb=null] - callback when changed
 * @param {object} [scope=null] - owner of callback
 * @return {PIXI.ObservablePoint} a copy of the point
 */
ObservablePoint.prototype.clone = function clone (cb, scope)
{
        if ( cb === void 0 ) cb = null;
        if ( scope === void 0 ) scope = null;

    var _cb = cb || this.cb;
    var _scope = scope || this.scope;

    return new ObservablePoint(_cb, _scope, this._x, this._y);
};

/**
 * Sets the point to a new x and y position.
 * If y is omitted, both x and y will be set to x.
 *
 * @param {number} [x=0] - position of the point on the x axis
 * @param {number} [y=0] - position of the point on the y axis
 */
ObservablePoint.prototype.set = function set (x, y)
{
    var _x = x || 0;
    var _y = y || ((y !== 0) ? _x : 0);

    if (this._x !== _x || this._y !== _y)
    {
        this._x = _x;
        this._y = _y;
        this.cb.call(this.scope);
    }
};

/**
 * Copies x and y from the given point
 *
 * @param {PIXI.IPoint} p - The point to copy from.
 * @returns {PIXI.IPoint} Returns itself.
 */
ObservablePoint.prototype.copyFrom = function copyFrom (p)
{
    if (this._x !== p.x || this._y !== p.y)
    {
        this._x = p.x;
        this._y = p.y;
        this.cb.call(this.scope);
    }

    return this;
};

/**
 * Copies x and y into the given point
 *
 * @param {PIXI.IPoint} p - The point to copy.
 * @returns {PIXI.IPoint} Given point with values updated
 */
ObservablePoint.prototype.copyTo = function copyTo (p)
{
    p.set(this._x, this._y);

    return p;
};

/**
 * Returns true if the given point is equal to this point
 *
 * @param {PIXI.IPoint} p - The point to check
 * @returns {boolean} Whether the given point equal to this point
 */
ObservablePoint.prototype.equals = function equals (p)
{
    return (p.x === this._x) && (p.y === this._y);
};

/**
 * The position of the displayObject on the x axis relative to the local coordinates of the parent.
 *
 * @member {number}
 */
prototypeAccessors.x.get = function ()
{
    return this._x;
};

prototypeAccessors.x.set = function (value) // eslint-disable-line require-jsdoc
{
    if (this._x !== value)
    {
        this._x = value;
        this.cb.call(this.scope);
    }
};

/**
 * The position of the displayObject on the x axis relative to the local coordinates of the parent.
 *
 * @member {number}
 */
prototypeAccessors.y.get = function ()
{
    return this._y;
};

prototypeAccessors.y.set = function (value) // eslint-disable-line require-jsdoc
{
    if (this._y !== value)
    {
        this._y = value;
        this.cb.call(this.scope);
    }
};

Object.defineProperties( ObservablePoint.prototype, prototypeAccessors );

/**
 * A number, or a string containing a number.
 * @memberof PIXI
 * @typedef {(PIXI.Point|PIXI.ObservablePoint)} IPoint
 */

/**
 * Two Pi.
 *
 * @static
 * @constant {number} PI_2
 * @memberof PIXI
 */
var PI_2 = Math.PI * 2;

/**
 * Conversion factor for converting radians to degrees.
 *
 * @static
 * @constant {number} RAD_TO_DEG
 * @memberof PIXI
 */
var RAD_TO_DEG = 180 / Math.PI;

/**
 * Conversion factor for converting degrees to radians.
 *
 * @static
 * @constant {number} DEG_TO_RAD
 * @memberof PIXI
 */
var DEG_TO_RAD = Math.PI / 180;

/**
 * Constants that identify shapes, mainly to prevent `instanceof` calls.
 *
 * @static
 * @constant
 * @name SHAPES
 * @memberof PIXI
 * @type {object}
 * @property {number} POLY Polygon
 * @property {number} RECT Rectangle
 * @property {number} CIRC Circle
 * @property {number} ELIP Ellipse
 * @property {number} RREC Rounded Rectangle
 */
var SHAPES = {
    POLY: 0,
    RECT: 1,
    CIRC: 2,
    ELIP: 3,
    RREC: 4,
};

/**
 * The PixiJS Matrix as a class makes it a lot faster.
 *
 * Here is a representation of it:
 * ```js
 * | a | c | tx|
 * | b | d | ty|
 * | 0 | 0 | 1 |
 * ```
 * @class
 * @memberof PIXI
 */
var Matrix = function Matrix(a, b, c, d, tx, ty)
{
    if ( a === void 0 ) a = 1;
    if ( b === void 0 ) b = 0;
    if ( c === void 0 ) c = 0;
    if ( d === void 0 ) d = 1;
    if ( tx === void 0 ) tx = 0;
    if ( ty === void 0 ) ty = 0;

    /**
     * @member {number}
     * @default 1
     */
    this.a = a;

    /**
     * @member {number}
     * @default 0
     */
    this.b = b;

    /**
     * @member {number}
     * @default 0
     */
    this.c = c;

    /**
     * @member {number}
     * @default 1
     */
    this.d = d;

    /**
     * @member {number}
     * @default 0
     */
    this.tx = tx;

    /**
     * @member {number}
     * @default 0
     */
    this.ty = ty;

    this.array = null;
};

var staticAccessors = { IDENTITY: { configurable: true },TEMP_MATRIX: { configurable: true } };

/**
 * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:
 *
 * a = array[0]
 * b = array[1]
 * c = array[3]
 * d = array[4]
 * tx = array[2]
 * ty = array[5]
 *
 * @param {number[]} array - The array that the matrix will be populated from.
 */
Matrix.prototype.fromArray = function fromArray (array)
{
    this.a = array[0];
    this.b = array[1];
    this.c = array[3];
    this.d = array[4];
    this.tx = array[2];
    this.ty = array[5];
};

/**
 * sets the matrix properties
 *
 * @param {number} a - Matrix component
 * @param {number} b - Matrix component
 * @param {number} c - Matrix component
 * @param {number} d - Matrix component
 * @param {number} tx - Matrix component
 * @param {number} ty - Matrix component
 *
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.set = function set (a, b, c, d, tx, ty)
{
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.tx = tx;
    this.ty = ty;

    return this;
};

/**
 * Creates an array from the current Matrix object.
 *
 * @param {boolean} transpose - Whether we need to transpose the matrix or not
 * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out
 * @return {number[]} the newly created array which contains the matrix
 */
Matrix.prototype.toArray = function toArray (transpose, out)
{
    if (!this.array)
    {
        this.array = new Float32Array(9);
    }

    var array = out || this.array;

    if (transpose)
    {
        array[0] = this.a;
        array[1] = this.b;
        array[2] = 0;
        array[3] = this.c;
        array[4] = this.d;
        array[5] = 0;
        array[6] = this.tx;
        array[7] = this.ty;
        array[8] = 1;
    }
    else
    {
        array[0] = this.a;
        array[1] = this.c;
        array[2] = this.tx;
        array[3] = this.b;
        array[4] = this.d;
        array[5] = this.ty;
        array[6] = 0;
        array[7] = 0;
        array[8] = 1;
    }

    return array;
};

/**
 * Get a new position with the current transformation applied.
 * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
 *
 * @param {PIXI.Point} pos - The origin
 * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
 * @return {PIXI.Point} The new point, transformed through this matrix
 */
Matrix.prototype.apply = function apply (pos, newPos)
{
    newPos = newPos || new Point();

    var x = pos.x;
    var y = pos.y;

    newPos.x = (this.a * x) + (this.c * y) + this.tx;
    newPos.y = (this.b * x) + (this.d * y) + this.ty;

    return newPos;
};

/**
 * Get a new position with the inverse of the current transformation applied.
 * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
 *
 * @param {PIXI.Point} pos - The origin
 * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)
 * @return {PIXI.Point} The new point, inverse-transformed through this matrix
 */
Matrix.prototype.applyInverse = function applyInverse (pos, newPos)
{
    newPos = newPos || new Point();

    var id = 1 / ((this.a * this.d) + (this.c * -this.b));

    var x = pos.x;
    var y = pos.y;

    newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);
    newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);

    return newPos;
};

/**
 * Translates the matrix on the x and y.
 *
 * @param {number} x How much to translate x by
 * @param {number} y How much to translate y by
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.translate = function translate (x, y)
{
    this.tx += x;
    this.ty += y;

    return this;
};

/**
 * Applies a scale transformation to the matrix.
 *
 * @param {number} x The amount to scale horizontally
 * @param {number} y The amount to scale vertically
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.scale = function scale (x, y)
{
    this.a *= x;
    this.d *= y;
    this.c *= x;
    this.b *= y;
    this.tx *= x;
    this.ty *= y;

    return this;
};

/**
 * Applies a rotation transformation to the matrix.
 *
 * @param {number} angle - The angle in radians.
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.rotate = function rotate (angle)
{
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);

    var a1 = this.a;
    var c1 = this.c;
    var tx1 = this.tx;

    this.a = (a1 * cos) - (this.b * sin);
    this.b = (a1 * sin) + (this.b * cos);
    this.c = (c1 * cos) - (this.d * sin);
    this.d = (c1 * sin) + (this.d * cos);
    this.tx = (tx1 * cos) - (this.ty * sin);
    this.ty = (tx1 * sin) + (this.ty * cos);

    return this;
};

/**
 * Appends the given Matrix to this Matrix.
 *
 * @param {PIXI.Matrix} matrix - The matrix to append.
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.append = function append (matrix)
{
    var a1 = this.a;
    var b1 = this.b;
    var c1 = this.c;
    var d1 = this.d;

    this.a = (matrix.a * a1) + (matrix.b * c1);
    this.b = (matrix.a * b1) + (matrix.b * d1);
    this.c = (matrix.c * a1) + (matrix.d * c1);
    this.d = (matrix.c * b1) + (matrix.d * d1);

    this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;
    this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;

    return this;
};

/**
 * Sets the matrix based on all the available properties
 *
 * @param {number} x - Position on the x axis
 * @param {number} y - Position on the y axis
 * @param {number} pivotX - Pivot on the x axis
 * @param {number} pivotY - Pivot on the y axis
 * @param {number} scaleX - Scale on the x axis
 * @param {number} scaleY - Scale on the y axis
 * @param {number} rotation - Rotation in radians
 * @param {number} skewX - Skew on the x axis
 * @param {number} skewY - Skew on the y axis
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.setTransform = function setTransform (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY)
{
    this.a = Math.cos(rotation + skewY) * scaleX;
    this.b = Math.sin(rotation + skewY) * scaleX;
    this.c = -Math.sin(rotation - skewX) * scaleY;
    this.d = Math.cos(rotation - skewX) * scaleY;

    this.tx = x - ((pivotX * this.a) + (pivotY * this.c));
    this.ty = y - ((pivotX * this.b) + (pivotY * this.d));

    return this;
};

/**
 * Prepends the given Matrix to this Matrix.
 *
 * @param {PIXI.Matrix} matrix - The matrix to prepend
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.prepend = function prepend (matrix)
{
    var tx1 = this.tx;

    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)
    {
        var a1 = this.a;
        var c1 = this.c;

        this.a = (a1 * matrix.a) + (this.b * matrix.c);
        this.b = (a1 * matrix.b) + (this.b * matrix.d);
        this.c = (c1 * matrix.a) + (this.d * matrix.c);
        this.d = (c1 * matrix.b) + (this.d * matrix.d);
    }

    this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;
    this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;

    return this;
};

/**
 * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.
 *
 * @param {PIXI.Transform} transform - The transform to apply the properties to.
 * @return {PIXI.Transform} The transform with the newly applied properties
 */
Matrix.prototype.decompose = function decompose (transform)
{
    // sort out rotation / skew..
    var a = this.a;
    var b = this.b;
    var c = this.c;
    var d = this.d;

    var skewX = -Math.atan2(-c, d);
    var skewY = Math.atan2(b, a);

    var delta = Math.abs(skewX + skewY);

    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)
    {
        transform.rotation = skewY;
        transform.skew.x = transform.skew.y = 0;
    }
    else
    {
        transform.rotation = 0;
        transform.skew.x = skewX;
        transform.skew.y = skewY;
    }

    // next set scale
    transform.scale.x = Math.sqrt((a * a) + (b * b));
    transform.scale.y = Math.sqrt((c * c) + (d * d));

    // next set position
    transform.position.x = this.tx;
    transform.position.y = this.ty;

    return transform;
};

/**
 * Inverts this matrix
 *
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.invert = function invert ()
{
    var a1 = this.a;
    var b1 = this.b;
    var c1 = this.c;
    var d1 = this.d;
    var tx1 = this.tx;
    var n = (a1 * d1) - (b1 * c1);

    this.a = d1 / n;
    this.b = -b1 / n;
    this.c = -c1 / n;
    this.d = a1 / n;
    this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;
    this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;

    return this;
};

/**
 * Resets this Matrix to an identity (default) matrix.
 *
 * @return {PIXI.Matrix} This matrix. Good for chaining method calls.
 */
Matrix.prototype.identity = function identity ()
{
    this.a = 1;
    this.b = 0;
    this.c = 0;
    this.d = 1;
    this.tx = 0;
    this.ty = 0;

    return this;
};

/**
 * Creates a new Matrix object with the same values as this one.
 *
 * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.
 */
Matrix.prototype.clone = function clone ()
{
    var matrix = new Matrix();

    matrix.a = this.a;
    matrix.b = this.b;
    matrix.c = this.c;
    matrix.d = this.d;
    matrix.tx = this.tx;
    matrix.ty = this.ty;

    return matrix;
};

/**
 * Changes the values of the given matrix to be the same as the ones in this matrix
 *
 * @param {PIXI.Matrix} matrix - The matrix to copy to.
 * @return {PIXI.Matrix} The matrix given in parameter with its values updated.
 */
Matrix.prototype.copyTo = function copyTo (matrix)
{
    matrix.a = this.a;
    matrix.b = this.b;
    matrix.c = this.c;
    matrix.d = this.d;
    matrix.tx = this.tx;
    matrix.ty = this.ty;

    return matrix;
};

/**
 * Changes the values of the matrix to be the same as the ones in given matrix
 *
 * @param {PIXI.Matrix} matrix - The matrix to copy from.
 * @return {PIXI.Matrix} this
 */
Matrix.prototype.copyFrom = function copyFrom (matrix)
{
    this.a = matrix.a;
    this.b = matrix.b;
    this.c = matrix.c;
    this.d = matrix.d;
    this.tx = matrix.tx;
    this.ty = matrix.ty;

    return this;
};

/**
 * A default (identity) matrix
 *
 * @static
 * @const
 * @member {PIXI.Matrix}
 */
staticAccessors.IDENTITY.get = function ()
{
    return new Matrix();
};

/**
 * A temp matrix
 *
 * @static
 * @const
 * @member {PIXI.Matrix}
 */
staticAccessors.TEMP_MATRIX.get = function ()
{
    return new Matrix();
};

Object.defineProperties( Matrix, staticAccessors );

// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group

/*
 * Transform matrix for operation n is:
 * | ux | vx |
 * | uy | vy |
 */

var ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];
var uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];
var vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];
var vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];

/**
 * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}
 * for the composition of each rotation in the dihederal group D8.
 *
 * @type number[][]
 * @private
 */
var rotationCayley = [];

/**
 * Matrices for each `GD8Symmetry` rotation.
 *
 * @type Matrix[]
 * @private
 */
var rotationMatrices = [];

/*
 * Alias for {@code Math.sign}.
 */
var signum = Math.sign;

/*
 * Initializes `rotationCayley` and `rotationMatrices`. It is called
 * only once below.
 */
function init()
{
    for (var i = 0; i < 16; i++)
    {
        var row = [];

        rotationCayley.push(row);

        for (var j = 0; j < 16; j++)
        {
            /* Multiplies rotation matrices i and j. */
            var _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));
            var _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));
            var _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));
            var _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));

            /* Finds rotation matrix matching the product and pushes it. */
            for (var k = 0; k < 16; k++)
            {
                if (ux[k] === _ux && uy[k] === _uy
                      && vx[k] === _vx && vy[k] === _vy)
                {
                    row.push(k);
                    break;
                }
            }
        }
    }

    for (var i$1 = 0; i$1 < 16; i$1++)
    {
        var mat = new Matrix();

        mat.set(ux[i$1], uy[i$1], vx[i$1], vy[i$1], 0, 0);
        rotationMatrices.push(mat);
    }
}

init();

/**
 * @memberof PIXI
 * @typedef {number} GD8Symmetry
 * @see PIXI.GroupD8
 */

/**
 * Implements the dihedral group D8, which is similar to
 * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};
 * D8 is the same but with diagonals, and it is used for texture
 * rotations.
 *
 * The directions the U- and V- axes after rotation
 * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`
 * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.
 *
 * **Origin:**<br>
 *  This is the small part of gameofbombs.com portal system. It works.
 *
 * @see PIXI.GroupD8.E
 * @see PIXI.GroupD8.SE
 * @see PIXI.GroupD8.S
 * @see PIXI.GroupD8.SW
 * @see PIXI.GroupD8.W
 * @see PIXI.GroupD8.NW
 * @see PIXI.GroupD8.N
 * @see PIXI.GroupD8.NE
 * @author Ivan @ivanpopelyshev
 * @class
 * @memberof PIXI
 */
var GroupD8 = {
    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 0°       | East      |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    E: 0,

    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 45°↻     | Southeast |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    SE: 1,

    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 90°↻     | South     |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    S: 2,

    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 135°↻    | Southwest |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    SW: 3,

    /**
     * | Rotation | Direction |
     * |----------|-----------|
     * | 180°     | West      |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    W: 4,

    /**
     * | Rotation    | Direction    |
     * |-------------|--------------|
     * | -135°/225°↻ | Northwest    |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    NW: 5,

    /**
     * | Rotation    | Direction    |
     * |-------------|--------------|
     * | -90°/270°↻  | North        |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    N: 6,

    /**
     * | Rotation    | Direction    |
     * |-------------|--------------|
     * | -45°/315°↻  | Northeast    |
     *
     * @constant {PIXI.GD8Symmetry}
     */
    NE: 7,

    /**
     * Reflection about Y-axis.
     *
     * @constant {PIXI.GD8Symmetry}
     */
    MIRROR_VERTICAL: 8,

    /**
     * Reflection about the main diagonal.
     *
     * @constant {PIXI.GD8Symmetry}
     */
    MAIN_DIAGONAL: 10,

    /**
     * Reflection about X-axis.
     *
     * @constant {PIXI.GD8Symmetry}
     */
    MIRROR_HORIZONTAL: 12,

    /**
     * Reflection about reverse diagonal.
     *
     * @constant {PIXI.GD8Symmetry}
     */
    REVERSE_DIAGONAL: 14,

    /**
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @return {PIXI.GD8Symmetry} The X-component of the U-axis
     *    after rotating the axes.
     */
    uX: function (ind) { return ux[ind]; },

    /**
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @return {PIXI.GD8Symmetry} The Y-component of the U-axis
     *    after rotating the axes.
     */
    uY: function (ind) { return uy[ind]; },

    /**
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @return {PIXI.GD8Symmetry} The X-component of the V-axis
     *    after rotating the axes.
     */
    vX: function (ind) { return vx[ind]; },

    /**
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.
     * @return {PIXI.GD8Symmetry} The Y-component of the V-axis
     *    after rotating the axes.
     */
    vY: function (ind) { return vy[ind]; },

    /**
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite
     *   is needed. Only rotations have opposite symmetries while
     *   reflections don't.
     * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`
     */
    inv: function (rotation) {
        if (rotation & 8)// true only if between 8 & 15 (reflections)
        {
            return rotation & 15;// or rotation % 16
        }

        return (-rotation) & 7;// or (8 - rotation) % 8
    },

    /**
     * Composes the two D8 operations.
     *
     * Taking `^` as reflection:
     *
     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |
     * |-------|-----|-----|-----|-----|------|-------|-------|-------|
     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |
     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |
     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |
     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |
     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |
     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |
     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |
     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |
     *
     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which
     *   is the row in the above cayley table.
     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which
     *   is the column in the above cayley table.
     * @return {PIXI.GD8Symmetry} Composed operation
     */
    add: function (rotationSecond, rotationFirst) { return (
        rotationCayley[rotationSecond][rotationFirst]
    ); },

    /**
     * Reverse of `add`.
     *
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation
     * @param {PIXI.GD8Symmetry} rotationFirst - First operation
     * @return {PIXI.GD8Symmetry} Result
     */
    sub: function (rotationSecond, rotationFirst) { return (
        rotationCayley[rotationSecond][GroupD8.inv(rotationFirst)]
    ); },

    /**
     * Adds 180 degrees to rotation, which is a commutative
     * operation.
     *
     * @memberof PIXI.GroupD8
     * @param {number} rotation - The number to rotate.
     * @returns {number} Rotated number
     */
    rotate180: function (rotation) { return rotation ^ 4; },

    /**
     * Checks if the rotation angle is vertical, i.e. south
     * or north. It doesn't work for reflections.
     *
     * @memberof PIXI.GroupD8
     * @param {PIXI.GD8Symmetry} rotation - The number to check.
     * @returns {boolean} Whether or not the direction is vertical
     */
    isVertical: function (rotation) { return (rotation & 3) === 2; }, // rotation % 4 === 2

    /**
     * Approximates the vector `V(dx,dy)` into one of the
     * eight directions provided by `GroupD8`.
     *
     * @memberof PIXI.GroupD8
     * @param {number} dx - X-component of the vector
     * @param {number} dy - Y-component of the vector
     * @return {PIXI.GD8Symmetry} Approximation of the vector into
     *  one of the eight symmetries.
     */
    byDirection: function (dx, dy) {
        if (Math.abs(dx) * 2 <= Math.abs(dy))
        {
            if (dy >= 0)
            {
                return GroupD8.S;
            }

            return GroupD8.N;
        }
        else if (Math.abs(dy) * 2 <= Math.abs(dx))
        {
            if (dx > 0)
            {
                return GroupD8.E;
            }

            return GroupD8.W;
        }
        else if (dy > 0)
        {
            if (dx > 0)
            {
                return GroupD8.SE;
            }

            return GroupD8.SW;
        }
        else if (dx > 0)
        {
            return GroupD8.NE;
        }

        return GroupD8.NW;
    },

    /**
     * Helps sprite to compensate texture packer rotation.
     *
     * @memberof PIXI.GroupD8
     * @param {PIXI.Matrix} matrix - sprite world matrix
     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.
     * @param {number} tx - sprite anchoring
     * @param {number} ty - sprite anchoring
     */
    matrixAppendRotationInv: function (matrix, rotation, tx, ty) {
        if ( tx === void 0 ) tx = 0;
        if ( ty === void 0 ) ty = 0;

        // Packer used "rotation", we use "inv(rotation)"
        var mat = rotationMatrices[GroupD8.inv(rotation)];

        mat.tx = tx;
        mat.ty = ty;
        matrix.append(mat);
    },
};

/**
 * Transform that takes care about its versions
 *
 * @class
 * @memberof PIXI
 */
var Transform = function Transform()
{
    /**
     * The world transformation matrix.
     *
     * @member {PIXI.Matrix}
     */
    this.worldTransform = new Matrix();

    /**
     * The local transformation matrix.
     *
     * @member {PIXI.Matrix}
     */
    this.localTransform = new Matrix();

    /**
     * The coordinate of the object relative to the local coordinates of the parent.
     *
     * @member {PIXI.ObservablePoint}
     */
    this.position = new ObservablePoint(this.onChange, this, 0, 0);

    /**
     * The scale factor of the object.
     *
     * @member {PIXI.ObservablePoint}
     */
    this.scale = new ObservablePoint(this.onChange, this, 1, 1);

    /**
     * The pivot point of the displayObject that it rotates around.
     *
     * @member {PIXI.ObservablePoint}
     */
    this.pivot = new ObservablePoint(this.onChange, this, 0, 0);

    /**
     * The skew amount, on the x and y axis.
     *
     * @member {PIXI.ObservablePoint}
     */
    this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);

    /**
     * The rotation amount.
     *
     * @protected
     * @member {number}
     */
    this._rotation = 0;

    /**
     * The X-coordinate value of the normalized local X axis,
     * the first column of the local transformation matrix without a scale.
     *
     * @protected
     * @member {number}
     */
    this._cx = 1;

    /**
     * The Y-coordinate value of the normalized local X axis,
     * the first column of the local transformation matrix without a scale.
     *
     * @protected
     * @member {number}
     */
    this._sx = 0;

    /**
     * The X-coordinate value of the normalized local Y axis,
     * the second column of the local transformation matrix without a scale.
     *
     * @protected
     * @member {number}
     */
    this._cy = 0;

    /**
     * The Y-coordinate value of the normalized local Y axis,
     * the second column of the local transformation matrix without a scale.
     *
     * @protected
     * @member {number}
     */
    this._sy = 1;

    /**
     * The locally unique ID of the local transform.
     *
     * @protected
     * @member {number}
     */
    this._localID = 0;

    /**
     * The locally unique ID of the local transform
     * used to calculate the current local transformation matrix.
     *
     * @protected
     * @member {number}
     */
    this._currentLocalID = 0;

    /**
     * The locally unique ID of the world transform.
     *
     * @protected
     * @member {number}
     */
    this._worldID = 0;

    /**
     * The locally unique ID of the parent's world transform
     * used to calculate the current world transformation matrix.
     *
     * @protected
     * @member {number}
     */
    this._parentID = 0;
};

var prototypeAccessors$1 = { rotation: { configurable: true } };

/**
 * Called when a value changes.
 *
 * @protected
 */
Transform.prototype.onChange = function onChange ()
{
    this._localID++;
};

/**
 * Called when the skew or the rotation changes.
 *
 * @protected
 */
Transform.prototype.updateSkew = function updateSkew ()
{
    this._cx = Math.cos(this._rotation + this.skew._y);
    this._sx = Math.sin(this._rotation + this.skew._y);
    this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2
    this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2

    this._localID++;
};

/**
 * Updates the local transformation matrix.
 */
Transform.prototype.updateLocalTransform = function updateLocalTransform ()
{
    var lt = this.localTransform;

    if (this._localID !== this._currentLocalID)
    {
        // get the matrix values of the displayobject based on its transform properties..
        lt.a = this._cx * this.scale._x;
        lt.b = this._sx * this.scale._x;
        lt.c = this._cy * this.scale._y;
        lt.d = this._sy * this.scale._y;

        lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));
        lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));
        this._currentLocalID = this._localID;

        // force an update..
        this._parentID = -1;
    }
};

/**
 * Updates the local and the world transformation matrices.
 *
 * @param {PIXI.Transform} parentTransform - The parent transform
 */
Transform.prototype.updateTransform = function updateTransform (parentTransform)
{
    var lt = this.localTransform;

    if (this._localID !== this._currentLocalID)
    {
        // get the matrix values of the displayobject based on its transform properties..
        lt.a = this._cx * this.scale._x;
        lt.b = this._sx * this.scale._x;
        lt.c = this._cy * this.scale._y;
        lt.d = this._sy * this.scale._y;

        lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));
        lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));
        this._currentLocalID = this._localID;

        // force an update..
        this._parentID = -1;
    }

    if (this._parentID !== parentTransform._worldID)
    {
        // concat the parent matrix with the objects transform.
        var pt = parentTransform.worldTransform;
        var wt = this.worldTransform;

        wt.a = (lt.a * pt.a) + (lt.b * pt.c);
        wt.b = (lt.a * pt.b) + (lt.b * pt.d);
        wt.c = (lt.c * pt.a) + (lt.d * pt.c);
        wt.d = (lt.c * pt.b) + (lt.d * pt.d);
        wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;
        wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;

        this._parentID = parentTransform._worldID;

        // update the id of the transform..
        this._worldID++;
    }
};

/**
 * Decomposes a matrix and sets the transforms properties based on it.
 *
 * @param {PIXI.Matrix} matrix - The matrix to decompose
 */
Transform.prototype.setFromMatrix = function setFromMatrix (matrix)
{
    matrix.decompose(this);
    this._localID++;
};

/**
 * The rotation of the object in radians.
 *
 * @member {number}
 */
prototypeAccessors$1.rotation.get = function ()
{
    return this._rotation;
};

prototypeAccessors$1.rotation.set = function (value) // eslint-disable-line require-jsdoc
{
    if (this._rotation !== value)
    {
        this._rotation = value;
        this.updateSkew();
    }
};

Object.defineProperties( Transform.prototype, prototypeAccessors$1 );

/**
 * A default (identity) transform
 *
 * @static
 * @constant
 * @member {PIXI.Transform}
 */
Transform.IDENTITY = new Transform();

/**
 * Size object, contains width and height
 *
 * @memberof PIXI
 * @typedef {object} ISize
 * @property {number} width - Width component
 * @property {number} height - Height component
 */

/**
 * Rectangle object is an area defined by its position, as indicated by its top-left corner
 * point (x, y) and by its width and its height.
 *
 * @class
 * @memberof PIXI
 */
var Rectangle = function Rectangle(x, y, width, height)
{
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( width === void 0 ) width = 0;
    if ( height === void 0 ) height = 0;

    /**
     * @member {number}
     * @default 0
     */
    this.x = Number(x);

    /**
     * @member {number}
     * @default 0
     */
    this.y = Number(y);

    /**
     * @member {number}
     * @default 0
     */
    this.width = Number(width);

    /**
     * @member {number}
     * @default 0
     */
    this.height = Number(height);

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readOnly
     * @default PIXI.SHAPES.RECT
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.RECT;
};

var prototypeAccessors$2 = { left: { configurable: true },right: { configurable: true },top: { configurable: true },bottom: { configurable: true } };
var staticAccessors$1 = { EMPTY: { configurable: true } };

/**
 * returns the left edge of the rectangle
 *
 * @member {number}
 */
prototypeAccessors$2.left.get = function ()
{
    return this.x;
};

/**
 * returns the right edge of the rectangle
 *
 * @member {number}
 */
prototypeAccessors$2.right.get = function ()
{
    return this.x + this.width;
};

/**
 * returns the top edge of the rectangle
 *
 * @member {number}
 */
prototypeAccessors$2.top.get = function ()
{
    return this.y;
};

/**
 * returns the bottom edge of the rectangle
 *
 * @member {number}
 */
prototypeAccessors$2.bottom.get = function ()
{
    return this.y + this.height;
};

/**
 * A constant empty rectangle.
 *
 * @static
 * @constant
 * @member {PIXI.Rectangle}
 */
staticAccessors$1.EMPTY.get = function ()
{
    return new Rectangle(0, 0, 0, 0);
};

/**
 * Creates a clone of this Rectangle
 *
 * @return {PIXI.Rectangle} a copy of the rectangle
 */
Rectangle.prototype.clone = function clone ()
{
    return new Rectangle(this.x, this.y, this.width, this.height);
};

/**
 * Copies another rectangle to this one.
 *
 * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.
 * @return {PIXI.Rectangle} Returns itself.
 */
Rectangle.prototype.copyFrom = function copyFrom (rectangle)
{
    this.x = rectangle.x;
    this.y = rectangle.y;
    this.width = rectangle.width;
    this.height = rectangle.height;

    return this;
};

/**
 * Copies this rectangle to another one.
 *
 * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.
 * @return {PIXI.Rectangle} Returns given parameter.
 */
Rectangle.prototype.copyTo = function copyTo (rectangle)
{
    rectangle.x = this.x;
    rectangle.y = this.y;
    rectangle.width = this.width;
    rectangle.height = this.height;

    return rectangle;
};

/**
 * Checks whether the x and y coordinates given are contained within this Rectangle
 *
 * @param {number} x - The X coordinate of the point to test
 * @param {number} y - The Y coordinate of the point to test
 * @return {boolean} Whether the x/y coordinates are within this Rectangle
 */
Rectangle.prototype.contains = function contains (x, y)
{
    if (this.width <= 0 || this.height <= 0)
    {
        return false;
    }

    if (x >= this.x && x < this.x + this.width)
    {
        if (y >= this.y && y < this.y + this.height)
        {
            return true;
        }
    }

    return false;
};

/**
 * Pads the rectangle making it grow in all directions.
 *
 * @param {number} paddingX - The horizontal padding amount.
 * @param {number} paddingY - The vertical padding amount.
 */
Rectangle.prototype.pad = function pad (paddingX, paddingY)
{
    paddingX = paddingX || 0;
    paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);

    this.x -= paddingX;
    this.y -= paddingY;

    this.width += paddingX * 2;
    this.height += paddingY * 2;
};

/**
 * Fits this rectangle around the passed one.
 *
 * @param {PIXI.Rectangle} rectangle - The rectangle to fit.
 */
Rectangle.prototype.fit = function fit (rectangle)
{
    var x1 = Math.max(this.x, rectangle.x);
    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);
    var y1 = Math.max(this.y, rectangle.y);
    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);

    this.x = x1;
    this.width = Math.max(x2 - x1, 0);
    this.y = y1;
    this.height = Math.max(y2 - y1, 0);
};

/**
 * Enlarges rectangle that way its corners lie on grid
 *
 * @param {number} [resolution=1] resolution
 * @param {number} [eps=0.001] precision
 */
Rectangle.prototype.ceil = function ceil (resolution, eps)
{
        if ( resolution === void 0 ) resolution = 1;
        if ( eps === void 0 ) eps = 0.001;

    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;
    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;

    this.x = Math.floor((this.x + eps) * resolution) / resolution;
    this.y = Math.floor((this.y + eps) * resolution) / resolution;

    this.width = x2 - this.x;
    this.height = y2 - this.y;
};

/**
 * Enlarges this rectangle to include the passed rectangle.
 *
 * @param {PIXI.Rectangle} rectangle - The rectangle to include.
 */
Rectangle.prototype.enlarge = function enlarge (rectangle)
{
    var x1 = Math.min(this.x, rectangle.x);
    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);
    var y1 = Math.min(this.y, rectangle.y);
    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);

    this.x = x1;
    this.width = x2 - x1;
    this.y = y1;
    this.height = y2 - y1;
};

Object.defineProperties( Rectangle.prototype, prototypeAccessors$2 );
Object.defineProperties( Rectangle, staticAccessors$1 );

/**
 * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
 *
 * @class
 * @memberof PIXI
 */
var Circle = function Circle(x, y, radius)
{
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( radius === void 0 ) radius = 0;

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;

    /**
     * @member {number}
     * @default 0
     */
    this.radius = radius;

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readOnly
     * @default PIXI.SHAPES.CIRC
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.CIRC;
};

/**
 * Creates a clone of this Circle instance
 *
 * @return {PIXI.Circle} a copy of the Circle
 */
Circle.prototype.clone = function clone ()
{
    return new Circle(this.x, this.y, this.radius);
};

/**
 * Checks whether the x and y coordinates given are contained within this circle
 *
 * @param {number} x - The X coordinate of the point to test
 * @param {number} y - The Y coordinate of the point to test
 * @return {boolean} Whether the x/y coordinates are within this Circle
 */
Circle.prototype.contains = function contains (x, y)
{
    if (this.radius <= 0)
    {
        return false;
    }

    var r2 = this.radius * this.radius;
    var dx = (this.x - x);
    var dy = (this.y - y);

    dx *= dx;
    dy *= dy;

    return (dx + dy <= r2);
};

/**
* Returns the framing rectangle of the circle as a Rectangle object
*
* @return {PIXI.Rectangle} the framing rectangle
*/
Circle.prototype.getBounds = function getBounds ()
{
    return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
};

/**
 * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.
 *
 * @class
 * @memberof PIXI
 */
var Ellipse = function Ellipse(x, y, halfWidth, halfHeight)
{
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( halfWidth === void 0 ) halfWidth = 0;
    if ( halfHeight === void 0 ) halfHeight = 0;

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;

    /**
     * @member {number}
     * @default 0
     */
    this.width = halfWidth;

    /**
     * @member {number}
     * @default 0
     */
    this.height = halfHeight;

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readOnly
     * @default PIXI.SHAPES.ELIP
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.ELIP;
};

/**
 * Creates a clone of this Ellipse instance
 *
 * @return {PIXI.Ellipse} a copy of the ellipse
 */
Ellipse.prototype.clone = function clone ()
{
    return new Ellipse(this.x, this.y, this.width, this.height);
};

/**
 * Checks whether the x and y coordinates given are contained within this ellipse
 *
 * @param {number} x - The X coordinate of the point to test
 * @param {number} y - The Y coordinate of the point to test
 * @return {boolean} Whether the x/y coords are within this ellipse
 */
Ellipse.prototype.contains = function contains (x, y)
{
    if (this.width <= 0 || this.height <= 0)
    {
        return false;
    }

    // normalize the coords to an ellipse with center 0,0
    var normx = ((x - this.x) / this.width);
    var normy = ((y - this.y) / this.height);

    normx *= normx;
    normy *= normy;

    return (normx + normy <= 1);
};

/**
 * Returns the framing rectangle of the ellipse as a Rectangle object
 *
 * @return {PIXI.Rectangle} the framing rectangle
 */
Ellipse.prototype.getBounds = function getBounds ()
{
    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);
};

/**
 * A class to define a shape via user defined co-orinates.
 *
 * @class
 * @memberof PIXI
 */
var Polygon = function Polygon()
{
    var points = [], len = arguments.length;
    while ( len-- ) points[ len ] = arguments[ len ];

    if (Array.isArray(points[0]))
    {
        points = points[0];
    }

    // if this is an array of points, convert it to a flat array of numbers
    if (points[0] instanceof Point)
    {
        var p = [];

        for (var i = 0, il = points.length; i < il; i++)
        {
            p.push(points[i].x, points[i].y);
        }

        points = p;
    }

    /**
     * An array of the points of this polygon
     *
     * @member {number[]}
     */
    this.points = points;

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readOnly
     * @default PIXI.SHAPES.POLY
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.POLY;

    /**
     * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.
     * @member {boolean}
     * @default true
     */
    this.closeStroke = true;
};

/**
 * Creates a clone of this polygon
 *
 * @return {PIXI.Polygon} a copy of the polygon
 */
Polygon.prototype.clone = function clone ()
{
    var polygon = new Polygon(this.points.slice());

    polygon.closeStroke = this.closeStroke;

    return polygon;
};

/**
 * Checks whether the x and y coordinates passed to this function are contained within this polygon
 *
 * @param {number} x - The X coordinate of the point to test
 * @param {number} y - The Y coordinate of the point to test
 * @return {boolean} Whether the x/y coordinates are within this polygon
 */
Polygon.prototype.contains = function contains (x, y)
{
    var inside = false;

    // use some raycasting to test hits
    // https://github.com/substack/point-in-polygon/blob/master/index.js
    var length = this.points.length / 2;

    for (var i = 0, j = length - 1; i < length; j = i++)
    {
        var xi = this.points[i * 2];
        var yi = this.points[(i * 2) + 1];
        var xj = this.points[j * 2];
        var yj = this.points[(j * 2) + 1];
        var intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);

        if (intersect)
        {
            inside = !inside;
        }
    }

    return inside;
};

/**
 * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its
 * top-left corner point (x, y) and by its width and its height and its radius.
 *
 * @class
 * @memberof PIXI
 */
var RoundedRectangle = function RoundedRectangle(x, y, width, height, radius)
{
    if ( x === void 0 ) x = 0;
    if ( y === void 0 ) y = 0;
    if ( width === void 0 ) width = 0;
    if ( height === void 0 ) height = 0;
    if ( radius === void 0 ) radius = 20;

    /**
     * @member {number}
     * @default 0
     */
    this.x = x;

    /**
     * @member {number}
     * @default 0
     */
    this.y = y;

    /**
     * @member {number}
     * @default 0
     */
    this.width = width;

    /**
     * @member {number}
     * @default 0
     */
    this.height = height;

    /**
     * @member {number}
     * @default 20
     */
    this.radius = radius;

    /**
     * The type of the object, mainly used to avoid `instanceof` checks
     *
     * @member {number}
     * @readonly
     * @default PIXI.SHAPES.RREC
     * @see PIXI.SHAPES
     */
    this.type = SHAPES.RREC;
};

/**
 * Creates a clone of this Rounded Rectangle
 *
 * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle
 */
RoundedRectangle.prototype.clone = function clone ()
{
    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);
};

/**
 * Checks whether the x and y coordinates given are contained within this Rounded Rectangle
 *
 * @param {number} x - The X coordinate of the point to test
 * @param {number} y - The Y coordinate of the point to test
 * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle
 */
RoundedRectangle.prototype.contains = function contains (x, y)
{
    if (this.width <= 0 || this.height <= 0)
    {
        return false;
    }
    if (x >= this.x && x <= this.x + this.width)
    {
        if (y >= this.y && y <= this.y + this.height)
        {
            if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)
            || (x >= this.x + this.radius && x <= this.x + this.width - this.radius))
            {
                return true;
            }
            var dx = x - (this.x + this.radius);
            var dy = y - (this.y + this.radius);
            var radius2 = this.radius * this.radius;

            if ((dx * dx) + (dy * dy) <= radius2)
            {
                return true;
            }
            dx = x - (this.x + this.width - this.radius);
            if ((dx * dx) + (dy * dy) <= radius2)
            {
                return true;
            }
            dy = y - (this.y + this.height - this.radius);
            if ((dx * dx) + (dy * dy) <= radius2)
            {
                return true;
            }
            dx = x - (this.x + this.radius);
            if ((dx * dx) + (dy * dy) <= radius2)
            {
                return true;
            }
        }
    }

    return false;
};

/**
 * Math classes and utilities mixed into PIXI namespace.
 *
 * @lends PIXI
 */


//# sourceMappingURL=math.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/runner/lib/runner.es.js":
/*!****************************************************!*\
  !*** ./node_modules/@pixi/runner/lib/runner.es.js ***!
  \****************************************************/
/*! exports provided: Runner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Runner", function() { return Runner; });
/*!
 * @pixi/runner - v5.1.1
 * Compiled Fri, 02 Aug 2019 23:20:23 UTC
 *
 * @pixi/runner is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/**
 * A Runner is a highly performant and simple alternative to signals. Best used in situations
 * where events are dispatched to many objects at high frequency (say every frame!)
 *
 *
 * like a signal..
 * ```
 * const myObject = {
 *     loaded: new PIXI.Runner('loaded')
 * }
 *
 * const listener = {
 *     loaded: function(){
 *         // thin
 *     }
 * }
 *
 * myObject.update.add(listener);
 *
 * myObject.loaded.emit();
 * ```
 *
 * Or for handling calling the same function on many items
 * ```
 * const myGame = {
 *     update: new PIXI.Runner('update')
 * }
 *
 * const gameObject = {
 *     update: function(time){
 *         // update my gamey state
 *     }
 * }
 *
 * myGame.update.add(gameObject1);
 *
 * myGame.update.emit(time);
 * ```
 * @class
 * @memberof PIXI
 */
var Runner = function Runner(name)
{
    this.items = [];
    this._name = name;
    this._aliasCount = 0;
};

var prototypeAccessors = { empty: { configurable: true },name: { configurable: true } };

/**
 * Dispatch/Broadcast Runner to all listeners added to the queue.
 * @param {...any} params - optional parameters to pass to each listener
 */
Runner.prototype.emit = function emit (a0, a1, a2, a3, a4, a5, a6, a7)
{
    if (arguments.length > 8)
    {
        throw new Error('max arguments reached');
    }

    var ref = this;
        var name = ref.name;
        var items = ref.items;

    this._aliasCount++;

    for (var i = 0, len = items.length; i < len; i++)
    {
        items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);
    }

    if (items === this.items)
    {
        this._aliasCount--;
    }

    return this;
};

Runner.prototype.ensureNonAliasedItems = function ensureNonAliasedItems ()
{
    if (this._aliasCount > 0 && this.items.length > 1)
    {
        this._aliasCount = 0;
        this.items = this.items.slice(0);
    }
};

/**
 * Add a listener to the Runner
 *
 * Runners do not need to have scope or functions passed to them.
 * All that is required is to pass the listening object and ensure that it has contains a function that has the same name
 * as the name provided to the Runner when it was created.
 *
 * Eg A listener passed to this Runner will require a 'complete' function.
 *
 * ```
 * const complete = new PIXI.Runner('complete');
 * ```
 *
 * The scope used will be the object itself.
 *
 * @param {any} item - The object that will be listening.
 */
Runner.prototype.add = function add (item)
{
    if (item[this._name])
    {
        this.ensureNonAliasedItems();
        this.remove(item);
        this.items.push(item);
    }

    return this;
};

/**
 * Remove a single listener from the dispatch queue.
 * @param {any} item - The listenr that you would like to remove.
 */
Runner.prototype.remove = function remove (item)
{
    var index = this.items.indexOf(item);

    if (index !== -1)
    {
        this.ensureNonAliasedItems();
        this.items.splice(index, 1);
    }

    return this;
};

/**
 * Check to see if the listener is already in the Runner
 * @param {any} item - The listener that you would like to check.
 */
Runner.prototype.contains = function contains (item)
{
    return this.items.indexOf(item) !== -1;
};

/**
 * Remove all listeners from the Runner
 */
Runner.prototype.removeAll = function removeAll ()
{
    this.ensureNonAliasedItems();
    this.items.length = 0;

    return this;
};

/**
 * Remove all references, don't use after this.
 */
Runner.prototype.destroy = function destroy ()
{
    this.removeAll();
    this.items = null;
    this._name = null;
};

/**
 * `true` if there are no this Runner contains no listeners
 *
 * @member {boolean}
 * @readonly
 */
prototypeAccessors.empty.get = function ()
{
    return this.items.length === 0;
};

/**
 * The name of the runner.
 *
 * @member {string}
 * @readonly
 */
prototypeAccessors.name.get = function ()
{
    return this._name;
};

Object.defineProperties( Runner.prototype, prototypeAccessors );

/**
 * Alias for `emit`
 * @memberof PIXI.Runner#
 * @method dispatch
 * @see PIXI.Runner#emit
 */
Runner.prototype.dispatch = Runner.prototype.emit;

/**
 * Alias for `emit`
 * @memberof PIXI.Runner#
 * @method run
 * @see PIXI.Runner#emit
 */
Runner.prototype.run = Runner.prototype.emit;


//# sourceMappingURL=runner.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/settings/lib/settings.es.js":
/*!********************************************************!*\
  !*** ./node_modules/@pixi/settings/lib/settings.es.js ***!
  \********************************************************/
/*! exports provided: isMobile, settings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return settings; });
/* harmony import */ var ismobilejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ismobilejs */ "./node_modules/ismobilejs/dist/isMobile.min.js");
/* harmony import */ var ismobilejs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ismobilejs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a; });
/*!
 * @pixi/settings - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/settings is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */



/**
 * The maximum recommended texture units to use.
 * In theory the bigger the better, and for desktop we'll use as many as we can.
 * But some mobile devices slow down if there is to many branches in the shader.
 * So in practice there seems to be a sweet spot size that varies depending on the device.
 *
 * In v4, all mobile devices were limited to 4 texture units because for this.
 * In v5, we allow all texture units to be used on modern Apple or Android devices.
 *
 * @private
 * @param {number} max
 * @returns {number}
 */
function maxRecommendedTextures(max)
{
    var allowMax = true;

    if (ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a.tablet || ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a.phone)
    {
        allowMax = false;

        if (ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a.apple.device)
        {
            var match = (navigator.userAgent).match(/OS (\d+)_(\d+)?/);

            if (match)
            {
                var majorVersion = parseInt(match[1], 10);

                // All texture units can be used on devices that support ios 11 or above
                if (majorVersion >= 11)
                {
                    allowMax = true;
                }
            }
        }
        if (ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a.android.device)
        {
            var match$1 = (navigator.userAgent).match(/Android\s([0-9.]*)/);

            if (match$1)
            {
                var majorVersion$1 = parseInt(match$1[1], 10);

                // All texture units can be used on devices that support Android 7 (Nougat) or above
                if (majorVersion$1 >= 7)
                {
                    allowMax = true;
                }
            }
        }
    }

    return allowMax ? max : 4;
}

/**
 * Uploading the same buffer multiple times in a single frame can cause performance issues.
 * Apparent on iOS so only check for that at the moment
 * This check may become more complex if this issue pops up elsewhere.
 *
 * @private
 * @returns {boolean}
 */
function canUploadSameBuffer()
{
    return !ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a.apple.device;
}

/**
 * User's customizable globals for overriding the default PIXI settings, such
 * as a renderer's default resolution, framerate, float precision, etc.
 * @example
 * // Use the native window resolution as the default resolution
 * // will support high-density displays when rendering
 * PIXI.settings.RESOLUTION = window.devicePixelRatio;
 *
 * // Disable interpolation when scaling, will make texture be pixelated
 * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
 * @namespace PIXI.settings
 */
var settings = {

    /**
     * If set to true WebGL will attempt make textures mimpaped by default.
     * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.
     *
     * @static
     * @name MIPMAP_TEXTURES
     * @memberof PIXI.settings
     * @type {PIXI.MIPMAP_MODES}
     * @default PIXI.MIPMAP_MODES.POW2
     */
    MIPMAP_TEXTURES: 1,

    /**
     * Default anisotropic filtering level of textures.
     * Usually from 0 to 16
     *
     * @static
     * @name ANISOTROPIC_LEVEL
     * @memberof PIXI.settings
     * @type {number}
     * @default 0
     */
    ANISOTROPIC_LEVEL: 0,

    /**
     * Default resolution / device pixel ratio of the renderer.
     *
     * @static
     * @name RESOLUTION
     * @memberof PIXI.settings
     * @type {number}
     * @default 1
     */
    RESOLUTION: 1,

    /**
     * Default filter resolution.
     *
     * @static
     * @name FILTER_RESOLUTION
     * @memberof PIXI.settings
     * @type {number}
     * @default 1
     */
    FILTER_RESOLUTION: 1,

    /**
     * The maximum textures that this device supports.
     *
     * @static
     * @name SPRITE_MAX_TEXTURES
     * @memberof PIXI.settings
     * @type {number}
     * @default 32
     */
    SPRITE_MAX_TEXTURES: maxRecommendedTextures(32),

    // TODO: maybe change to SPRITE.BATCH_SIZE: 2000
    // TODO: maybe add PARTICLE.BATCH_SIZE: 15000

    /**
     * The default sprite batch size.
     *
     * The default aims to balance desktop and mobile devices.
     *
     * @static
     * @name SPRITE_BATCH_SIZE
     * @memberof PIXI.settings
     * @type {number}
     * @default 4096
     */
    SPRITE_BATCH_SIZE: 4096,

    /**
     * The default render options if none are supplied to {@link PIXI.Renderer}
     * or {@link PIXI.CanvasRenderer}.
     *
     * @static
     * @name RENDER_OPTIONS
     * @memberof PIXI.settings
     * @type {object}
     * @property {HTMLCanvasElement} view=null
     * @property {number} resolution=1
     * @property {boolean} antialias=false
     * @property {boolean} forceFXAA=false
     * @property {boolean} autoDensity=false
     * @property {boolean} transparent=false
     * @property {number} backgroundColor=0x000000
     * @property {boolean} clearBeforeRender=true
     * @property {boolean} preserveDrawingBuffer=false
     * @property {number} width=800
     * @property {number} height=600
     * @property {boolean} legacy=false
     */
    RENDER_OPTIONS: {
        view: null,
        antialias: false,
        forceFXAA: false,
        autoDensity: false,
        transparent: false,
        backgroundColor: 0x000000,
        clearBeforeRender: true,
        preserveDrawingBuffer: false,
        width: 800,
        height: 600,
        legacy: false,
    },

    /**
     * Default Garbage Collection mode.
     *
     * @static
     * @name GC_MODE
     * @memberof PIXI.settings
     * @type {PIXI.GC_MODES}
     * @default PIXI.GC_MODES.AUTO
     */
    GC_MODE: 0,

    /**
     * Default Garbage Collection max idle.
     *
     * @static
     * @name GC_MAX_IDLE
     * @memberof PIXI.settings
     * @type {number}
     * @default 3600
     */
    GC_MAX_IDLE: 60 * 60,

    /**
     * Default Garbage Collection maximum check count.
     *
     * @static
     * @name GC_MAX_CHECK_COUNT
     * @memberof PIXI.settings
     * @type {number}
     * @default 600
     */
    GC_MAX_CHECK_COUNT: 60 * 10,

    /**
     * Default wrap modes that are supported by pixi.
     *
     * @static
     * @name WRAP_MODE
     * @memberof PIXI.settings
     * @type {PIXI.WRAP_MODES}
     * @default PIXI.WRAP_MODES.CLAMP
     */
    WRAP_MODE: 33071,

    /**
     * Default scale mode for textures.
     *
     * @static
     * @name SCALE_MODE
     * @memberof PIXI.settings
     * @type {PIXI.SCALE_MODES}
     * @default PIXI.SCALE_MODES.LINEAR
     */
    SCALE_MODE: 1,

    /**
     * Default specify float precision in vertex shader.
     *
     * @static
     * @name PRECISION_VERTEX
     * @memberof PIXI.settings
     * @type {PIXI.PRECISION}
     * @default PIXI.PRECISION.HIGH
     */
    PRECISION_VERTEX: 'highp',

    /**
     * Default specify float precision in fragment shader.
     * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742
     *
     * @static
     * @name PRECISION_FRAGMENT
     * @memberof PIXI.settings
     * @type {PIXI.PRECISION}
     * @default PIXI.PRECISION.MEDIUM
     */
    PRECISION_FRAGMENT: ismobilejs__WEBPACK_IMPORTED_MODULE_0___default.a.apple.device ? 'highp' : 'mediump',

    /**
     * Can we upload the same buffer in a single frame?
     *
     * @static
     * @name CAN_UPLOAD_SAME_BUFFER
     * @memberof PIXI.settings
     * @type {boolean}
     */
    CAN_UPLOAD_SAME_BUFFER: canUploadSameBuffer(),

    /**
     * Enables bitmap creation before image load. This feature is experimental.
     *
     * @static
     * @name CREATE_IMAGE_BITMAP
     * @memberof PIXI.settings
     * @type {boolean}
     * @default false
     */
    CREATE_IMAGE_BITMAP: false,

    /**
     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.
     * Advantages can include sharper image quality (like text) and faster rendering on canvas.
     * The main disadvantage is movement of objects may appear less smooth.
     *
     * @static
     * @constant
     * @memberof PIXI.settings
     * @type {boolean}
     * @default false
     */
    ROUND_PIXELS: false,
};


//# sourceMappingURL=settings.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/ticker/lib/ticker.es.js":
/*!****************************************************!*\
  !*** ./node_modules/@pixi/ticker/lib/ticker.es.js ***!
  \****************************************************/
/*! exports provided: Ticker, TickerPlugin, UPDATE_PRIORITY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ticker", function() { return Ticker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TickerPlugin", function() { return TickerPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_PRIORITY", function() { return UPDATE_PRIORITY; });
/* harmony import */ var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/settings */ "./node_modules/@pixi/settings/lib/settings.es.js");
/*!
 * @pixi/ticker - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/ticker is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */


/**
 * Target frames per millisecond.
 *
 * @static
 * @name TARGET_FPMS
 * @memberof PIXI.settings
 * @type {number}
 * @default 0.06
 */
_pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].TARGET_FPMS = 0.06;

/**
 * Represents the update priorities used by internal PIXI classes when registered with
 * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower
 * priority items, such as render, should go later.
 *
 * @static
 * @constant
 * @name UPDATE_PRIORITY
 * @memberof PIXI
 * @type {object}
 * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.interaction.InteractionManager}
 * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}
 * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.
 * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.
 * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.prepare.BasePrepare} utility.
 */
var UPDATE_PRIORITY = {
    INTERACTION: 50,
    HIGH: 25,
    NORMAL: 0,
    LOW: -25,
    UTILITY: -50,
};

/**
 * Internal class for handling the priority sorting of ticker handlers.
 *
 * @private
 * @class
 * @memberof PIXI
 */
var TickerListener = function TickerListener(fn, context, priority, once)
{
    if ( context === void 0 ) context = null;
    if ( priority === void 0 ) priority = 0;
    if ( once === void 0 ) once = false;

    /**
     * The handler function to execute.
     * @private
     * @member {Function}
     */
    this.fn = fn;

    /**
     * The calling to execute.
     * @private
     * @member {*}
     */
    this.context = context;

    /**
     * The current priority.
     * @private
     * @member {number}
     */
    this.priority = priority;

    /**
     * If this should only execute once.
     * @private
     * @member {boolean}
     */
    this.once = once;

    /**
     * The next item in chain.
     * @private
     * @member {TickerListener}
     */
    this.next = null;

    /**
     * The previous item in chain.
     * @private
     * @member {TickerListener}
     */
    this.previous = null;

    /**
     * `true` if this listener has been destroyed already.
     * @member {boolean}
     * @private
     */
    this._destroyed = false;
};

/**
 * Simple compare function to figure out if a function and context match.
 * @private
 * @param {Function} fn - The listener function to be added for one update
 * @param {Function} context - The listener context
 * @return {boolean} `true` if the listener match the arguments
 */
TickerListener.prototype.match = function match (fn, context)
{
    context = context || null;

    return this.fn === fn && this.context === context;
};

/**
 * Emit by calling the current function.
 * @private
 * @param {number} deltaTime - time since the last emit.
 * @return {TickerListener} Next ticker
 */
TickerListener.prototype.emit = function emit (deltaTime)
{
    if (this.fn)
    {
        if (this.context)
        {
            this.fn.call(this.context, deltaTime);
        }
        else
        {
            this.fn(deltaTime);
        }
    }

    var redirect = this.next;

    if (this.once)
    {
        this.destroy(true);
    }

    // Soft-destroying should remove
    // the next reference
    if (this._destroyed)
    {
        this.next = null;
    }

    return redirect;
};

/**
 * Connect to the list.
 * @private
 * @param {TickerListener} previous - Input node, previous listener
 */
TickerListener.prototype.connect = function connect (previous)
{
    this.previous = previous;
    if (previous.next)
    {
        previous.next.previous = this;
    }
    this.next = previous.next;
    previous.next = this;
};

/**
 * Destroy and don't use after this.
 * @private
 * @param {boolean} [hard = false] `true` to remove the `next` reference, this
 *    is considered a hard destroy. Soft destroy maintains the next reference.
 * @return {TickerListener} The listener to redirect while emitting or removing.
 */
TickerListener.prototype.destroy = function destroy (hard)
{
        if ( hard === void 0 ) hard = false;

    this._destroyed = true;
    this.fn = null;
    this.context = null;

    // Disconnect, hook up next and previous
    if (this.previous)
    {
        this.previous.next = this.next;
    }

    if (this.next)
    {
        this.next.previous = this.previous;
    }

    // Redirect to the next item
    var redirect = this.next;

    // Remove references
    this.next = hard ? null : redirect;
    this.previous = null;

    return redirect;
};

/**
 * A Ticker class that runs an update loop that other objects listen to.
 *
 * This class is composed around listeners meant for execution on the next requested animation frame.
 * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.
 *
 * @class
 * @memberof PIXI
 */
var Ticker = function Ticker()
{
    var this$1 = this;

    /**
     * The first listener. All new listeners added are chained on this.
     * @private
     * @type {TickerListener}
     */
    this._head = new TickerListener(null, null, Infinity);

    /**
     * Internal current frame request ID
     * @type {?number}
     * @private
     */
    this._requestId = null;

    /**
     * Internal value managed by minFPS property setter and getter.
     * This is the maximum allowed milliseconds between updates.
     * @type {number}
     * @private
     */
    this._maxElapsedMS = 100;

    /**
     * Internal value managed by maxFPS property setter and getter.
     * This is the minimum allowed milliseconds between updates.
     * @private
     */
    this._minElapsedMS = 0;

    /**
     * Whether or not this ticker should invoke the method
     * {@link PIXI.Ticker#start} automatically
     * when a listener is added.
     *
     * @member {boolean}
     * @default false
     */
    this.autoStart = false;

    /**
     * Scalar time value from last frame to this frame.
     * This value is capped by setting {@link PIXI.Ticker#minFPS}
     * and is scaled with {@link PIXI.Ticker#speed}.
     * **Note:** The cap may be exceeded by scaling.
     *
     * @member {number}
     * @default 1
     */
    this.deltaTime = 1;

    /**
     * Scaler time elapsed in milliseconds from last frame to this frame.
     * This value is capped by setting {@link PIXI.Ticker#minFPS}
     * and is scaled with {@link PIXI.Ticker#speed}.
     * **Note:** The cap may be exceeded by scaling.
     * If the platform supports DOMHighResTimeStamp,
     * this value will have a precision of 1 µs.
     * Defaults to target frame time
     *
     * @member {number}
     * @default 16.66
     */
    this.deltaMS = 1 / _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].TARGET_FPMS;

    /**
     * Time elapsed in milliseconds from last frame to this frame.
     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}
     * is based, this value is neither capped nor scaled.
     * If the platform supports DOMHighResTimeStamp,
     * this value will have a precision of 1 µs.
     * Defaults to target frame time
     *
     * @member {number}
     * @default 16.66
     */
    this.elapsedMS = 1 / _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].TARGET_FPMS;

    /**
     * The last time {@link PIXI.Ticker#update} was invoked.
     * This value is also reset internally outside of invoking
     * update, but only when a new animation frame is requested.
     * If the platform supports DOMHighResTimeStamp,
     * this value will have a precision of 1 µs.
     *
     * @member {number}
     * @default -1
     */
    this.lastTime = -1;

    /**
     * Factor of current {@link PIXI.Ticker#deltaTime}.
     * @example
     * // Scales ticker.deltaTime to what would be
     * // the equivalent of approximately 120 FPS
     * ticker.speed = 2;
     *
     * @member {number}
     * @default 1
     */
    this.speed = 1;

    /**
     * Whether or not this ticker has been started.
     * `true` if {@link PIXI.Ticker#start} has been called.
     * `false` if {@link PIXI.Ticker#stop} has been called.
     * While `false`, this value may change to `true` in the
     * event of {@link PIXI.Ticker#autoStart} being `true`
     * and a listener is added.
     *
     * @member {boolean}
     * @default false
     */
    this.started = false;

    /**
     * If enabled, deleting is disabled.
     * @member {boolean}
     * @default false
     * @private
     */
    this._protected = false;

    /**
     * The last time keyframe was executed.
     * Maintains a relatively fixed interval with the previous value.
     * @member {number}
     * @default -1
     * @private
     */
    this._lastFrame = -1;

    /**
     * Internal tick method bound to ticker instance.
     * This is because in early 2015, Function.bind
     * is still 60% slower in high performance scenarios.
     * Also separating frame requests from update method
     * so listeners may be called at any time and with
     * any animation API, just invoke ticker.update(time).
     *
     * @private
     * @param {number} time - Time since last tick.
     */
    this._tick = function (time) {
        this$1._requestId = null;

        if (this$1.started)
        {
            // Invoke listeners now
            this$1.update(time);
            // Listener side effects may have modified ticker state.
            if (this$1.started && this$1._requestId === null && this$1._head.next)
            {
                this$1._requestId = requestAnimationFrame(this$1._tick);
            }
        }
    };
};

var prototypeAccessors = { FPS: { configurable: true },minFPS: { configurable: true },maxFPS: { configurable: true } };
var staticAccessors = { shared: { configurable: true },system: { configurable: true } };

/**
 * Conditionally requests a new animation frame.
 * If a frame has not already been requested, and if the internal
 * emitter has listeners, a new frame is requested.
 *
 * @private
 */
Ticker.prototype._requestIfNeeded = function _requestIfNeeded ()
{
    if (this._requestId === null && this._head.next)
    {
        // ensure callbacks get correct delta
        this.lastTime = performance.now();
        this._lastFrame = this.lastTime;
        this._requestId = requestAnimationFrame(this._tick);
    }
};

/**
 * Conditionally cancels a pending animation frame.
 *
 * @private
 */
Ticker.prototype._cancelIfNeeded = function _cancelIfNeeded ()
{
    if (this._requestId !== null)
    {
        cancelAnimationFrame(this._requestId);
        this._requestId = null;
    }
};

/**
 * Conditionally requests a new animation frame.
 * If the ticker has been started it checks if a frame has not already
 * been requested, and if the internal emitter has listeners. If these
 * conditions are met, a new frame is requested. If the ticker has not
 * been started, but autoStart is `true`, then the ticker starts now,
 * and continues with the previous conditions to request a new frame.
 *
 * @private
 */
Ticker.prototype._startIfPossible = function _startIfPossible ()
{
    if (this.started)
    {
        this._requestIfNeeded();
    }
    else if (this.autoStart)
    {
        this.start();
    }
};

/**
 * Register a handler for tick events. Calls continuously unless
 * it is removed or the ticker is stopped.
 *
 * @param {Function} fn - The listener function to be added for updates
 * @param {*} [context] - The listener context
 * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
 * @returns {PIXI.Ticker} This instance of a ticker
 */
Ticker.prototype.add = function add (fn, context, priority)
{
        if ( priority === void 0 ) priority = UPDATE_PRIORITY.NORMAL;

    return this._addListener(new TickerListener(fn, context, priority));
};

/**
 * Add a handler for the tick event which is only execute once.
 *
 * @param {Function} fn - The listener function to be added for one update
 * @param {*} [context] - The listener context
 * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting
 * @returns {PIXI.Ticker} This instance of a ticker
 */
Ticker.prototype.addOnce = function addOnce (fn, context, priority)
{
        if ( priority === void 0 ) priority = UPDATE_PRIORITY.NORMAL;

    return this._addListener(new TickerListener(fn, context, priority, true));
};

/**
 * Internally adds the event handler so that it can be sorted by priority.
 * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run
 * before the rendering.
 *
 * @private
 * @param {TickerListener} listener - Current listener being added.
 * @returns {PIXI.Ticker} This instance of a ticker
 */
Ticker.prototype._addListener = function _addListener (listener)
{
    // For attaching to head
    var current = this._head.next;
    var previous = this._head;

    // Add the first item
    if (!current)
    {
        listener.connect(previous);
    }
    else
    {
        // Go from highest to lowest priority
        while (current)
        {
            if (listener.priority > current.priority)
            {
                listener.connect(previous);
                break;
            }
            previous = current;
            current = current.next;
        }

        // Not yet connected
        if (!listener.previous)
        {
            listener.connect(previous);
        }
    }

    this._startIfPossible();

    return this;
};

/**
 * Removes any handlers matching the function and context parameters.
 * If no handlers are left after removing, then it cancels the animation frame.
 *
 * @param {Function} fn - The listener function to be removed
 * @param {*} [context] - The listener context to be removed
 * @returns {PIXI.Ticker} This instance of a ticker
 */
Ticker.prototype.remove = function remove (fn, context)
{
    var listener = this._head.next;

    while (listener)
    {
        // We found a match, lets remove it
        // no break to delete all possible matches
        // incase a listener was added 2+ times
        if (listener.match(fn, context))
        {
            listener = listener.destroy();
        }
        else
        {
            listener = listener.next;
        }
    }

    if (!this._head.next)
    {
        this._cancelIfNeeded();
    }

    return this;
};

/**
 * Starts the ticker. If the ticker has listeners
 * a new animation frame is requested at this point.
 */
Ticker.prototype.start = function start ()
{
    if (!this.started)
    {
        this.started = true;
        this._requestIfNeeded();
    }
};

/**
 * Stops the ticker. If the ticker has requested
 * an animation frame it is canceled at this point.
 */
Ticker.prototype.stop = function stop ()
{
    if (this.started)
    {
        this.started = false;
        this._cancelIfNeeded();
    }
};

/**
 * Destroy the ticker and don't use after this. Calling
 * this method removes all references to internal events.
 */
Ticker.prototype.destroy = function destroy ()
{
    if (!this._protected)
    {
        this.stop();

        var listener = this._head.next;

        while (listener)
        {
            listener = listener.destroy(true);
        }

        this._head.destroy();
        this._head = null;
    }
};

/**
 * Triggers an update. An update entails setting the
 * current {@link PIXI.Ticker#elapsedMS},
 * the current {@link PIXI.Ticker#deltaTime},
 * invoking all listeners with current deltaTime,
 * and then finally setting {@link PIXI.Ticker#lastTime}
 * with the value of currentTime that was provided.
 * This method will be called automatically by animation
 * frame callbacks if the ticker instance has been started
 * and listeners are added.
 *
 * @param {number} [currentTime=performance.now()] - the current time of execution
 */
Ticker.prototype.update = function update (currentTime)
{
        if ( currentTime === void 0 ) currentTime = performance.now();

    var elapsedMS;

    // If the difference in time is zero or negative, we ignore most of the work done here.
    // If there is no valid difference, then should be no reason to let anyone know about it.
    // A zero delta, is exactly that, nothing should update.
    //
    // The difference in time can be negative, and no this does not mean time traveling.
    // This can be the result of a race condition between when an animation frame is requested
    // on the current JavaScript engine event loop, and when the ticker's start method is invoked
    // (which invokes the internal _requestIfNeeded method). If a frame is requested before
    // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,
    // can receive a time argument that can be less than the lastTime value that was set within
    // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.
    //
    // This check covers this browser engine timing issue, as well as if consumers pass an invalid
    // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.

    if (currentTime > this.lastTime)
    {
        // Save uncapped elapsedMS for measurement
        elapsedMS = this.elapsedMS = currentTime - this.lastTime;

        // cap the milliseconds elapsed used for deltaTime
        if (elapsedMS > this._maxElapsedMS)
        {
            elapsedMS = this._maxElapsedMS;
        }

        elapsedMS *= this.speed;

        // If not enough time has passed, exit the function.
        // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS
        // adjustment to ensure a relatively stable interval.
        if (this._minElapsedMS)
        {
            var delta = currentTime - this._lastFrame | 0;

            if (delta < this._minElapsedMS)
            {
                return;
            }

            this._lastFrame = currentTime - (delta % this._minElapsedMS);
        }

        this.deltaMS = elapsedMS;
        this.deltaTime = this.deltaMS * _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].TARGET_FPMS;

        // Cache a local reference, in-case ticker is destroyed
        // during the emit, we can still check for head.next
        var head = this._head;

        // Invoke listeners added to internal emitter
        var listener = head.next;

        while (listener)
        {
            listener = listener.emit(this.deltaTime);
        }

        if (!head.next)
        {
            this._cancelIfNeeded();
        }
    }
    else
    {
        this.deltaTime = this.deltaMS = this.elapsedMS = 0;
    }

    this.lastTime = currentTime;
};

/**
 * The frames per second at which this ticker is running.
 * The default is approximately 60 in most modern browsers.
 * **Note:** This does not factor in the value of
 * {@link PIXI.Ticker#speed}, which is specific
 * to scaling {@link PIXI.Ticker#deltaTime}.
 *
 * @member {number}
 * @readonly
 */
prototypeAccessors.FPS.get = function ()
{
    return 1000 / this.elapsedMS;
};

/**
 * Manages the maximum amount of milliseconds allowed to
 * elapse between invoking {@link PIXI.Ticker#update}.
 * This value is used to cap {@link PIXI.Ticker#deltaTime},
 * but does not effect the measured value of {@link PIXI.Ticker#FPS}.
 * When setting this property it is clamped to a value between
 * `0` and `PIXI.settings.TARGET_FPMS * 1000`.
 *
 * @member {number}
 * @default 10
 */
prototypeAccessors.minFPS.get = function ()
{
    return 1000 / this._maxElapsedMS;
};

prototypeAccessors.minFPS.set = function (fps) // eslint-disable-line require-jsdoc
{
    // Minimum must be below the maxFPS
    var minFPS = Math.min(this.maxFPS, fps);

    // Must be at least 0, but below 1 / settings.TARGET_FPMS
    var minFPMS = Math.min(Math.max(0, minFPS) / 1000, _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].TARGET_FPMS);

    this._maxElapsedMS = 1 / minFPMS;
};

/**
 * Manages the minimum amount of milliseconds required to
 * elapse between invoking {@link PIXI.Ticker#update}.
 * This will effect the measured value of {@link PIXI.Ticker#FPS}.
 * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.
 * Otherwise it will be at least `minFPS`
 *
 * @member {number}
 * @default 0
 */
prototypeAccessors.maxFPS.get = function ()
{
    if (this._minElapsedMS)
    {
        return Math.round(1000 / this._minElapsedMS);
    }

    return 0;
};

prototypeAccessors.maxFPS.set = function (fps)
{
    if (fps === 0)
    {
        this._minElapsedMS = 0;
    }
    else
    {
        // Max must be at least the minFPS
        var maxFPS = Math.max(this.minFPS, fps);

        this._minElapsedMS = 1 / (maxFPS / 1000);
    }
};

/**
 * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by
 * {@link PIXI.VideoResource} to update animation frames / video textures.
 *
 * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.
 *
 * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
 * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.
 *
 * @example
 * let ticker = PIXI.Ticker.shared;
 * // Set this to prevent starting this ticker when listeners are added.
 * // By default this is true only for the PIXI.Ticker.shared instance.
 * ticker.autoStart = false;
 * // FYI, call this to ensure the ticker is stopped. It should be stopped
 * // if you have not attempted to render anything yet.
 * ticker.stop();
 * // Call this when you are ready for a running shared ticker.
 * ticker.start();
 *
 * @example
 * // You may use the shared ticker to render...
 * let renderer = PIXI.autoDetectRenderer();
 * let stage = new PIXI.Container();
 * document.body.appendChild(renderer.view);
 * ticker.add(function (time) {
 * renderer.render(stage);
 * });
 *
 * @example
 * // Or you can just update it manually.
 * ticker.autoStart = false;
 * ticker.stop();
 * function animate(time) {
 * ticker.update(time);
 * renderer.render(stage);
 * requestAnimationFrame(animate);
 * }
 * animate(performance.now());
 *
 * @member {PIXI.Ticker}
 * @static
 */
staticAccessors.shared.get = function ()
{
    if (!Ticker._shared)
    {
        var shared = Ticker._shared = new Ticker();

        shared.autoStart = true;
        shared._protected = true;
    }

    return Ticker._shared;
};

/**
 * The system ticker instance used by {@link PIXI.interaction.InteractionManager} and by
 * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,
 * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.
 *
 * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.
 *
 * @member {PIXI.Ticker}
 * @static
 */
staticAccessors.system.get = function ()
{
    if (!Ticker._system)
    {
        var system = Ticker._system = new Ticker();

        system.autoStart = true;
        system._protected = true;
    }

    return Ticker._system;
};

Object.defineProperties( Ticker.prototype, prototypeAccessors );
Object.defineProperties( Ticker, staticAccessors );

/**
 * Middleware for for Application Ticker.
 *
 * @example
 * import {TickerPlugin} from '@pixi/ticker';
 * import {Application} from '@pixi/app';
 * Application.registerPlugin(TickerPlugin);
 *
 * @class
 * @memberof PIXI
 */
var TickerPlugin = function TickerPlugin () {};

TickerPlugin.init = function init (options)
{
        var this$1 = this;

    // Set default
    options = Object.assign({
        autoStart: true,
        sharedTicker: false,
    }, options);

    // Create ticker setter
    Object.defineProperty(this, 'ticker',
        {
            set: function set(ticker)
            {
                if (this._ticker)
                {
                    this._ticker.remove(this.render, this);
                }
                this._ticker = ticker;
                if (ticker)
                {
                    ticker.add(this.render, this, UPDATE_PRIORITY.LOW);
                }
            },
            get: function get()
            {
                return this._ticker;
            },
        });

    /**
     * Convenience method for stopping the render.
     *
     * @method PIXI.Application#stop
     */
    this.stop = function () {
        this$1._ticker.stop();
    };

    /**
     * Convenience method for starting the render.
     *
     * @method PIXI.Application#start
     */
    this.start = function () {
        this$1._ticker.start();
    };

    /**
     * Internal reference to the ticker.
     *
     * @type {PIXI.Ticker}
     * @name _ticker
     * @memberof PIXI.Application#
     * @private
     */
    this._ticker = null;

    /**
     * Ticker for doing render updates.
     *
     * @type {PIXI.Ticker}
     * @name ticker
     * @memberof PIXI.Application#
     * @default PIXI.Ticker.shared
     */
    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();

    // Start the rendering
    if (options.autoStart)
    {
        this.start();
    }
};

/**
 * Clean up the ticker, scoped to application.
 *
 * @static
 * @private
 */
TickerPlugin.destroy = function destroy ()
{
    if (this._ticker)
    {
        var oldTicker = this._ticker;

        this.ticker = null;
        oldTicker.destroy();
    }
};


//# sourceMappingURL=ticker.es.js.map


/***/ }),

/***/ "./node_modules/@pixi/utils/lib/utils.es.js":
/*!**************************************************!*\
  !*** ./node_modules/@pixi/utils/lib/utils.es.js ***!
  \**************************************************/
/*! exports provided: isMobile, EventEmitter, earcut, url, BaseTextureCache, CanvasRenderTarget, DATA_URI, ProgramCache, TextureCache, clearTextureCache, correctBlendMode, createIndicesForQuads, decomposeDataUri, deprecation, destroyTextureCache, determineCrossOrigin, getResolutionOfUrl, hex2rgb, hex2string, isPow2, isWebGLSupported, log2, nextPow2, premultiplyBlendMode, premultiplyRgba, premultiplyTint, premultiplyTintToRgba, removeItems, rgb2hex, sayHello, sign, skipHello, string2hex, trimCanvas, uid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTextureCache", function() { return BaseTextureCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasRenderTarget", function() { return CanvasRenderTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_URI", function() { return DATA_URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgramCache", function() { return ProgramCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureCache", function() { return TextureCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearTextureCache", function() { return clearTextureCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "correctBlendMode", function() { return correctBlendMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createIndicesForQuads", function() { return createIndicesForQuads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decomposeDataUri", function() { return decomposeDataUri; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deprecation", function() { return deprecation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroyTextureCache", function() { return destroyTextureCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determineCrossOrigin", function() { return determineCrossOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getResolutionOfUrl", function() { return getResolutionOfUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hex2rgb", function() { return hex2rgb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hex2string", function() { return hex2string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPow2", function() { return isPow2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWebGLSupported", function() { return isWebGLSupported; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log2", function() { return log2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextPow2", function() { return nextPow2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "premultiplyBlendMode", function() { return premultiplyBlendMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "premultiplyRgba", function() { return premultiplyRgba; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "premultiplyTint", function() { return premultiplyTint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "premultiplyTintToRgba", function() { return premultiplyTintToRgba; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeItems", function() { return removeItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb2hex", function() { return rgb2hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sayHello", function() { return sayHello; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sign", function() { return sign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skipHello", function() { return skipHello; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string2hex", function() { return string2hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trimCanvas", function() { return trimCanvas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uid", function() { return uid; });
/* harmony import */ var _pixi_settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pixi/settings */ "./node_modules/@pixi/settings/lib/settings.es.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["isMobile"]; });

/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return eventemitter3__WEBPACK_IMPORTED_MODULE_1___default.a; });
/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! earcut */ "./node_modules/earcut/src/earcut.js");
/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(earcut__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "earcut", function() { return earcut__WEBPACK_IMPORTED_MODULE_2___default.a; });
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url */ "./node_modules/url/url.js");
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "url", function() { return url__WEBPACK_IMPORTED_MODULE_3___default.a; });
/* harmony import */ var _pixi_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pixi/constants */ "./node_modules/@pixi/constants/lib/constants.es.js");
/*!
 * @pixi/utils - v5.1.3
 * Compiled Mon, 09 Sep 2019 04:51:53 UTC
 *
 * @pixi/utils is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */








/**
 * The prefix that denotes a URL is for a retina asset.
 *
 * @static
 * @name RETINA_PREFIX
 * @memberof PIXI.settings
 * @type {RegExp}
 * @default /@([0-9\.]+)x/
 * @example `@2x`
 */
_pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].RETINA_PREFIX = /@([0-9\.]+)x/;

/**
 * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.
 * For most scenarios this should be left as true, as otherwise the user may have a poor experience.
 * However, it can be useful to disable under certain scenarios, such as headless unit tests.
 *
 * @static
 * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT
 * @memberof PIXI.settings
 * @type {boolean}
 * @default true
 */
_pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = true;

var saidHello = false;
var VERSION = '5.1.3';

/**
 * Skips the hello message of renderers that are created after this is run.
 *
 * @function skipHello
 * @memberof PIXI.utils
 */
function skipHello()
{
    saidHello = true;
}

/**
 * Logs out the version and renderer information for this running instance of PIXI.
 * If you don't want to see this message you can run `PIXI.utils.skipHello()` before
 * creating your renderer. Keep in mind that doing that will forever make you a jerk face.
 *
 * @static
 * @function sayHello
 * @memberof PIXI.utils
 * @param {string} type - The string renderer type to log.
 */
function sayHello(type)
{
    if (saidHello)
    {
        return;
    }

    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)
    {
        var args = [
            ("\n %c %c %c PixiJS " + VERSION + " - ✰ " + type + " ✰  %c  %c  http://www.pixijs.com/  %c %c ♥%c♥%c♥ \n\n"),
            'background: #ff66a5; padding:5px 0;',
            'background: #ff66a5; padding:5px 0;',
            'color: #ff66a5; background: #030307; padding:5px 0;',
            'background: #ff66a5; padding:5px 0;',
            'background: #ffc3dc; padding:5px 0;',
            'background: #ff66a5; padding:5px 0;',
            'color: #ff2424; background: #fff; padding:5px 0;',
            'color: #ff2424; background: #fff; padding:5px 0;',
            'color: #ff2424; background: #fff; padding:5px 0;' ];

        window.console.log.apply(console, args);
    }
    else if (window.console)
    {
        window.console.log(("PixiJS " + VERSION + " - " + type + " - http://www.pixijs.com/"));
    }

    saidHello = true;
}

var supported;

/**
 * Helper for checking for WebGL support.
 *
 * @memberof PIXI.utils
 * @function isWebGLSupported
 * @return {boolean} Is WebGL supported.
 */
function isWebGLSupported()
{
    if (typeof supported === 'undefined')
    {
        supported = (function supported()
        {
            var contextOptions = {
                stencil: true,
                failIfMajorPerformanceCaveat: _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].FAIL_IF_MAJOR_PERFORMANCE_CAVEAT,
            };

            try
            {
                if (!window.WebGLRenderingContext)
                {
                    return false;
                }

                var canvas = document.createElement('canvas');
                var gl = canvas.getContext('webgl', contextOptions)
                    || canvas.getContext('experimental-webgl', contextOptions);

                var success = !!(gl && gl.getContextAttributes().stencil);

                if (gl)
                {
                    var loseContext = gl.getExtension('WEBGL_lose_context');

                    if (loseContext)
                    {
                        loseContext.loseContext();
                    }
                }

                gl = null;

                return success;
            }
            catch (e)
            {
                return false;
            }
        })();
    }

    return supported;
}

/**
 * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).
 *
 * @example
 * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]
 * @memberof PIXI.utils
 * @function hex2rgb
 * @param {number} hex - The hexadecimal number to convert
 * @param  {number[]} [out=[]] If supplied, this array will be used rather than returning a new one
 * @return {number[]} An array representing the [R, G, B] of the color where all values are floats.
 */
function hex2rgb(hex, out)
{
    out = out || [];

    out[0] = ((hex >> 16) & 0xFF) / 255;
    out[1] = ((hex >> 8) & 0xFF) / 255;
    out[2] = (hex & 0xFF) / 255;

    return out;
}

/**
 * Converts a hexadecimal color number to a string.
 *
 * @example
 * PIXI.utils.hex2string(0xffffff); // returns "#ffffff"
 * @memberof PIXI.utils
 * @function hex2string
 * @param {number} hex - Number in hex (e.g., `0xffffff`)
 * @return {string} The string color (e.g., `"#ffffff"`).
 */
function hex2string(hex)
{
    hex = hex.toString(16);
    hex = '000000'.substr(0, 6 - hex.length) + hex;

    return ("#" + hex);
}

/**
 * Converts a hexadecimal string to a hexadecimal color number.
 *
 * @example
 * PIXI.utils.string2hex("#ffffff"); // returns 0xffffff
 * @memberof PIXI.utils
 * @function string2hex
 * @param {string} The string color (e.g., `"#ffffff"`)
 * @return {number} Number in hexadecimal.
 */
function string2hex(string)
{
    if (typeof string === 'string' && string[0] === '#')
    {
        string = string.substr(1);
    }

    return parseInt(string, 16);
}

/**
 * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.
 *
 * @example
 * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff
 * @memberof PIXI.utils
 * @function rgb2hex
 * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.
 * @return {number} Number in hexadecimal.
 */
function rgb2hex(rgb)
{
    return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));
}

/**
 * Corrects PixiJS blend, takes premultiplied alpha into account
 *
 * @memberof PIXI.utils
 * @function mapPremultipliedBlendModes
 * @private
 * @param {Array<number[]>} [array] - The array to output into.
 * @return {Array<number[]>} Mapped modes.
 */
function mapPremultipliedBlendModes()
{
    var pm = [];
    var npm = [];

    for (var i = 0; i < 32; i++)
    {
        pm[i] = i;
        npm[i] = i;
    }

    pm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].NORMAL_NPM] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].NORMAL;
    pm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].ADD_NPM] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].ADD;
    pm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].SCREEN_NPM] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].SCREEN;

    npm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].NORMAL] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].NORMAL_NPM;
    npm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].ADD] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].ADD_NPM;
    npm[_pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].SCREEN] = _pixi_constants__WEBPACK_IMPORTED_MODULE_4__["BLEND_MODES"].SCREEN_NPM;

    var array = [];

    array.push(npm);
    array.push(pm);

    return array;
}

/**
 * maps premultiply flag and blendMode to adjusted blendMode
 * @memberof PIXI.utils
 * @const premultiplyBlendMode
 * @type {Array<number[]>}
 */
var premultiplyBlendMode = mapPremultipliedBlendModes();

/**
 * changes blendMode according to texture format
 *
 * @memberof PIXI.utils
 * @function correctBlendMode
 * @param {number} blendMode supposed blend mode
 * @param {boolean} premultiplied  whether source is premultiplied
 * @returns {number} true blend mode for this texture
 */
function correctBlendMode(blendMode, premultiplied)
{
    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];
}

/**
 * combines rgb and alpha to out array
 *
 * @memberof PIXI.utils
 * @function premultiplyRgba
 * @param {Float32Array|number[]} rgb input rgb
 * @param {number} alpha alpha param
 * @param {Float32Array} [out] output
 * @param {boolean} [premultiply=true] do premultiply it
 * @returns {Float32Array} vec4 rgba
 */
function premultiplyRgba(rgb, alpha, out, premultiply)
{
    out = out || new Float32Array(4);
    if (premultiply || premultiply === undefined)
    {
        out[0] = rgb[0] * alpha;
        out[1] = rgb[1] * alpha;
        out[2] = rgb[2] * alpha;
    }
    else
    {
        out[0] = rgb[0];
        out[1] = rgb[1];
        out[2] = rgb[2];
    }
    out[3] = alpha;

    return out;
}

/**
 * premultiplies tint
 *
 * @memberof PIXI.utils
 * @function premultiplyTint
 * @param {number} tint integer RGB
 * @param {number} alpha floating point alpha (0.0-1.0)
 * @returns {number} tint multiplied by alpha
 */
function premultiplyTint(tint, alpha)
{
    if (alpha === 1.0)
    {
        return (alpha * 255 << 24) + tint;
    }
    if (alpha === 0.0)
    {
        return 0;
    }
    var R = ((tint >> 16) & 0xFF);
    var G = ((tint >> 8) & 0xFF);
    var B = (tint & 0xFF);

    R = ((R * alpha) + 0.5) | 0;
    G = ((G * alpha) + 0.5) | 0;
    B = ((B * alpha) + 0.5) | 0;

    return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;
}

/**
 * converts integer tint and float alpha to vec4 form, premultiplies by default
 *
 * @memberof PIXI.utils
 * @function premultiplyTintToRgba
 * @param {number} tint input tint
 * @param {number} alpha alpha param
 * @param {Float32Array} [out] output
 * @param {boolean} [premultiply=true] do premultiply it
 * @returns {Float32Array} vec4 rgba
 */
function premultiplyTintToRgba(tint, alpha, out, premultiply)
{
    out = out || new Float32Array(4);
    out[0] = ((tint >> 16) & 0xFF) / 255.0;
    out[1] = ((tint >> 8) & 0xFF) / 255.0;
    out[2] = (tint & 0xFF) / 255.0;
    if (premultiply || premultiply === undefined)
    {
        out[0] *= alpha;
        out[1] *= alpha;
        out[2] *= alpha;
    }
    out[3] = alpha;

    return out;
}

/**
 * Generic Mask Stack data structure
 *
 * @memberof PIXI.utils
 * @function createIndicesForQuads
 * @param {number} size - Number of quads
 * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`
 * @return {Uint16Array|Uint32Array} - Resulting index buffer
 */
function createIndicesForQuads(size, outBuffer)
{
    if ( outBuffer === void 0 ) outBuffer = null;

    // the total number of indices in our array, there are 6 points per quad.
    var totalIndices = size * 6;

    outBuffer = outBuffer || new Uint16Array(totalIndices);

    if (outBuffer.length !== totalIndices)
    {
        throw new Error(("Out buffer length is incorrect, got " + (outBuffer.length) + " and expected " + totalIndices));
    }

    // fill the indices with the quads to draw
    for (var i = 0, j = 0; i < totalIndices; i += 6, j += 4)
    {
        outBuffer[i + 0] = j + 0;
        outBuffer[i + 1] = j + 1;
        outBuffer[i + 2] = j + 2;
        outBuffer[i + 3] = j + 0;
        outBuffer[i + 4] = j + 2;
        outBuffer[i + 5] = j + 3;
    }

    return outBuffer;
}

/**
 * Remove items from a javascript array without generating garbage
 *
 * @function removeItems
 * @memberof PIXI.utils
 * @param {Array<any>} arr Array to remove elements from
 * @param {number} startIdx starting index
 * @param {number} removeCount how many to remove
 */
function removeItems(arr, startIdx, removeCount)
{
    var length = arr.length;
    var i;

    if (startIdx >= length || removeCount === 0)
    {
        return;
    }

    removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);

    var len = length - removeCount;

    for (i = startIdx; i < len; ++i)
    {
        arr[i] = arr[i + removeCount];
    }

    arr.length = len;
}

var nextUid = 0;

/**
 * Gets the next unique identifier
 *
 * @memberof PIXI.utils
 * @function uid
 * @return {number} The next unique identifier to use.
 */
function uid()
{
    return ++nextUid;
}

/**
 * Returns sign of number
 *
 * @memberof PIXI.utils
 * @function sign
 * @param {number} n - the number to check the sign of
 * @returns {number} 0 if `n` is 0, -1 if `n` is negative, 1 if `n` is positive
 */
function sign(n)
{
    if (n === 0) { return 0; }

    return n < 0 ? -1 : 1;
}

// Taken from the bit-twiddle package

/**
 * Rounds to next power of two.
 *
 * @function nextPow2
 * @memberof PIXI.utils
 * @param {number} v input value
 * @return {number}
 */
function nextPow2(v)
{
    v += v === 0;
    --v;
    v |= v >>> 1;
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    v |= v >>> 16;

    return v + 1;
}

/**
 * Checks if a number is a power of two.
 *
 * @function isPow2
 * @memberof PIXI.utils
 * @param {number} v input value
 * @return {boolean} `true` if value is power of two
 */
function isPow2(v)
{
    return !(v & (v - 1)) && (!!v);
}

/**
 * Computes ceil of log base 2
 *
 * @function log2
 * @memberof PIXI.utils
 * @param {number} v input value
 * @return {number} logarithm base 2
 */
function log2(v)
{
    var r = (v > 0xFFFF) << 4;

    v >>>= r;

    var shift = (v > 0xFF) << 3;

    v >>>= shift; r |= shift;
    shift = (v > 0xF) << 2;
    v >>>= shift; r |= shift;
    shift = (v > 0x3) << 1;
    v >>>= shift; r |= shift;

    return r | (v >> 1);
}

/**
 * @todo Describe property usage
 *
 * @static
 * @name ProgramCache
 * @memberof PIXI.utils
 * @type {Object}
 */
var ProgramCache = {};

/**
 * @todo Describe property usage
 *
 * @static
 * @name TextureCache
 * @memberof PIXI.utils
 * @type {Object}
 */
var TextureCache = Object.create(null);

/**
 * @todo Describe property usage
 *
 * @static
 * @name BaseTextureCache
 * @memberof PIXI.utils
 * @type {Object}
 */

var BaseTextureCache = Object.create(null);
/**
 * Destroys all texture in the cache
 *
 * @memberof PIXI.utils
 * @function destroyTextureCache
 */
function destroyTextureCache()
{
    var key;

    for (key in TextureCache)
    {
        TextureCache[key].destroy();
    }
    for (key in BaseTextureCache)
    {
        BaseTextureCache[key].destroy();
    }
}

/**
 * Removes all textures from cache, but does not destroy them
 *
 * @memberof PIXI.utils
 * @function clearTextureCache
 */
function clearTextureCache()
{
    var key;

    for (key in TextureCache)
    {
        delete TextureCache[key];
    }
    for (key in BaseTextureCache)
    {
        delete BaseTextureCache[key];
    }
}

/**
 * Trim transparent borders from a canvas
 *
 * @memberof PIXI.utils
 * @function trimCanvas
 * @param {HTMLCanvasElement} canvas - the canvas to trim
 * @returns {object} Trim data
 */
function trimCanvas(canvas)
{
    // https://gist.github.com/remy/784508

    var width = canvas.width;
    var height = canvas.height;

    var context = canvas.getContext('2d');
    var imageData = context.getImageData(0, 0, width, height);
    var pixels = imageData.data;
    var len = pixels.length;

    var bound = {
        top: null,
        left: null,
        right: null,
        bottom: null,
    };
    var data = null;
    var i;
    var x;
    var y;

    for (i = 0; i < len; i += 4)
    {
        if (pixels[i + 3] !== 0)
        {
            x = (i / 4) % width;
            y = ~~((i / 4) / width);

            if (bound.top === null)
            {
                bound.top = y;
            }

            if (bound.left === null)
            {
                bound.left = x;
            }
            else if (x < bound.left)
            {
                bound.left = x;
            }

            if (bound.right === null)
            {
                bound.right = x + 1;
            }
            else if (bound.right < x)
            {
                bound.right = x + 1;
            }

            if (bound.bottom === null)
            {
                bound.bottom = y;
            }
            else if (bound.bottom < y)
            {
                bound.bottom = y;
            }
        }
    }

    if (bound.top !== null)
    {
        width = bound.right - bound.left;
        height = bound.bottom - bound.top + 1;
        data = context.getImageData(bound.left, bound.top, width, height);
    }

    return {
        height: height,
        width: width,
        data: data,
    };
}

/**
 * Creates a Canvas element of the given size to be used as a target for rendering to.
 *
 * @class
 * @memberof PIXI.utils
 */
var CanvasRenderTarget = function CanvasRenderTarget(width, height, resolution)
{
    /**
     * The Canvas object that belongs to this CanvasRenderTarget.
     *
     * @member {HTMLCanvasElement}
     */
    this.canvas = document.createElement('canvas');

    /**
     * A CanvasRenderingContext2D object representing a two-dimensional rendering context.
     *
     * @member {CanvasRenderingContext2D}
     */
    this.context = this.canvas.getContext('2d');

    this.resolution = resolution || _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].RESOLUTION;

    this.resize(width, height);
};

var prototypeAccessors = { width: { configurable: true },height: { configurable: true } };

/**
 * Clears the canvas that was created by the CanvasRenderTarget class.
 *
 * @private
 */
CanvasRenderTarget.prototype.clear = function clear ()
{
    this.context.setTransform(1, 0, 0, 1, 0, 0);
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
};

/**
 * Resizes the canvas to the specified width and height.
 *
 * @param {number} width - the new width of the canvas
 * @param {number} height - the new height of the canvas
 */
CanvasRenderTarget.prototype.resize = function resize (width, height)
{
    this.canvas.width = width * this.resolution;
    this.canvas.height = height * this.resolution;
};

/**
 * Destroys this canvas.
 *
 */
CanvasRenderTarget.prototype.destroy = function destroy ()
{
    this.context = null;
    this.canvas = null;
};

/**
 * The width of the canvas buffer in pixels.
 *
 * @member {number}
 */
prototypeAccessors.width.get = function ()
{
    return this.canvas.width;
};

prototypeAccessors.width.set = function (val) // eslint-disable-line require-jsdoc
{
    this.canvas.width = val;
};

/**
 * The height of the canvas buffer in pixels.
 *
 * @member {number}
 */
prototypeAccessors.height.get = function ()
{
    return this.canvas.height;
};

prototypeAccessors.height.set = function (val) // eslint-disable-line require-jsdoc
{
    this.canvas.height = val;
};

Object.defineProperties( CanvasRenderTarget.prototype, prototypeAccessors );

/**
 * Regexp for data URI.
 * Based on: {@link https://github.com/ragingwind/data-uri-regex}
 *
 * @static
 * @constant {RegExp|string} DATA_URI
 * @memberof PIXI
 * @example data:image/png;base64
 */
var DATA_URI = /^\s*data:(?:([\w-]+)\/([\w+.-]+))?(?:;charset=([\w-]+))?(?:;(base64))?,(.*)/i;

/**
 * Typedef for decomposeDataUri return object.
 *
 * @memberof PIXI.utils
 * @typedef {object} DecomposedDataUri
 * @property {string} mediaType Media type, eg. `image`
 * @property {string} subType Sub type, eg. `png`
 * @property {string} encoding Data encoding, eg. `base64`
 * @property {string} data The actual data
 */

/**
 * Split a data URI into components. Returns undefined if
 * parameter `dataUri` is not a valid data URI.
 *
 * @memberof PIXI.utils
 * @function decomposeDataUri
 * @param {string} dataUri - the data URI to check
 * @return {PIXI.utils.DecomposedDataUri|undefined} The decomposed data uri or undefined
 */
function decomposeDataUri(dataUri)
{
    var dataUriMatch = DATA_URI.exec(dataUri);

    if (dataUriMatch)
    {
        return {
            mediaType: dataUriMatch[1] ? dataUriMatch[1].toLowerCase() : undefined,
            subType: dataUriMatch[2] ? dataUriMatch[2].toLowerCase() : undefined,
            charset: dataUriMatch[3] ? dataUriMatch[3].toLowerCase() : undefined,
            encoding: dataUriMatch[4] ? dataUriMatch[4].toLowerCase() : undefined,
            data: dataUriMatch[5],
        };
    }

    return undefined;
}

var tempAnchor;

/**
 * Sets the `crossOrigin` property for this resource based on if the url
 * for this resource is cross-origin. If crossOrigin was manually set, this
 * function does nothing.
 * Nipped from the resource loader!
 *
 * @ignore
 * @param {string} url - The url to test.
 * @param {object} [loc=window.location] - The location object to test against.
 * @return {string} The crossOrigin value to use (or empty string for none).
 */
function determineCrossOrigin(url, loc)
{
    if ( loc === void 0 ) loc = window.location;

    // data: and javascript: urls are considered same-origin
    if (url.indexOf('data:') === 0)
    {
        return '';
    }

    // default is window.location
    loc = loc || window.location;

    if (!tempAnchor)
    {
        tempAnchor = document.createElement('a');
    }

    // let the browser determine the full href for the url of this resource and then
    // parse with the node url lib, we can't use the properties of the anchor element
    // because they don't work in IE9 :(
    tempAnchor.href = url;
    url = url__WEBPACK_IMPORTED_MODULE_3___default.a.parse(tempAnchor.href);

    var samePort = (!url.port && loc.port === '') || (url.port === loc.port);

    // if cross origin
    if (url.hostname !== loc.hostname || !samePort || url.protocol !== loc.protocol)
    {
        return 'anonymous';
    }

    return '';
}

/**
 * get the resolution / device pixel ratio of an asset by looking for the prefix
 * used by spritesheets and image urls
 *
 * @memberof PIXI.utils
 * @function getResolutionOfUrl
 * @param {string} url - the image path
 * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.
 * @return {number} resolution / device pixel ratio of an asset
 */
function getResolutionOfUrl(url, defaultValue)
{
    var resolution = _pixi_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].RETINA_PREFIX.exec(url);

    if (resolution)
    {
        return parseFloat(resolution[1]);
    }

    return defaultValue !== undefined ? defaultValue : 1;
}

// A map of warning messages already fired
var warnings = {};

/**
 * Helper for warning developers about deprecated features & settings.
 * A stack track for warnings is given; useful for tracking-down where
 * deprecated methods/properties/classes are being used within the code.
 *
 * @memberof PIXI.utils
 * @function deprecation
 * @param {string} version - The version where the feature became deprecated
 * @param {string} message - Message should include what is deprecated, where, and the new solution
 * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack
 *        this is mostly to ignore internal deprecation calls.
 */
function deprecation(version, message, ignoreDepth)
{
    if ( ignoreDepth === void 0 ) ignoreDepth = 3;

    // Ignore duplicat
    if (warnings[message])
    {
        return;
    }

    /* eslint-disable no-console */
    var stack = new Error().stack;

    // Handle IE < 10 and Safari < 6
    if (typeof stack === 'undefined')
    {
        console.warn('PixiJS Deprecation Warning: ', (message + "\nDeprecated since v" + version));
    }
    else
    {
        // chop off the stack trace which includes PixiJS internal calls
        stack = stack.split('\n').splice(ignoreDepth).join('\n');

        if (console.groupCollapsed)
        {
            console.groupCollapsed(
                '%cPixiJS Deprecation Warning: %c%s',
                'color:#614108;background:#fffbe6',
                'font-weight:normal;color:#614108;background:#fffbe6',
                (message + "\nDeprecated since v" + version)
            );
            console.warn(stack);
            console.groupEnd();
        }
        else
        {
            console.warn('PixiJS Deprecation Warning: ', (message + "\nDeprecated since v" + version));
            console.warn(stack);
        }
    }
    /* eslint-enable no-console */

    warnings[message] = true;
}

/**
 * Generalized convenience utilities for PIXI.
 * @example
 * // Extend PIXI's internal Event Emitter.
 * class MyEmitter extends PIXI.utils.EventEmitter {
 *   constructor() {
 *      super();
 *      console.log("Emitter created!");
 *   }
 * }
 *
 * // Get info on current device
 * console.log(PIXI.utils.isMobile);
 *
 * // Convert hex color to string
 * console.log(PIXI.utils.hex2string(0xff00ff)); // returns: "#ff00ff"
 * @namespace PIXI.utils
 */


//# sourceMappingURL=utils.es.js.map


/***/ }),

/***/ "./node_modules/earcut/src/earcut.js":
/*!*******************************************!*\
  !*** ./node_modules/earcut/src/earcut.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = earcut;
module.exports.default = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode || outerNode.next === outerNode.prev) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            removeNode(ear);

            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(ear, triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;

    while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return p;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize);
                earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m.next;

    while (p !== stop) {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    }

    return m;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    if ((equals(p1, q1) && equals(p2, q2)) ||
        (equals(p1, q2) && equals(p2, q1))) return true;
    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/ismobilejs/dist/isMobile.min.js":
/*!******************************************************!*\
  !*** ./node_modules/ismobilejs/dist/isMobile.min.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(e){var n=/iPhone/i,t=/iPod/i,r=/iPad/i,a=/\bAndroid(?:.+)Mobile\b/i,p=/Android/i,b=/\bAndroid(?:.+)SD4930UR\b/i,l=/\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,f=/Windows Phone/i,s=/\bWindows(?:.+)ARM\b/i,u=/BlackBerry/i,c=/BB10/i,h=/Opera Mini/i,v=/\b(CriOS|Chrome)(?:.+)Mobile/i,w=/Mobile(?:.+)Firefox\b/i;function m(e,i){return e.test(i)}function i(e){var i=e||("undefined"!=typeof navigator?navigator.userAgent:""),o=i.split("[FBAN");void 0!==o[1]&&(i=o[0]),void 0!==(o=i.split("Twitter"))[1]&&(i=o[0]);var d={apple:{phone:m(n,i)&&!m(f,i),ipod:m(t,i),tablet:!m(n,i)&&m(r,i)&&!m(f,i),device:(m(n,i)||m(t,i)||m(r,i))&&!m(f,i)},amazon:{phone:m(b,i),tablet:!m(b,i)&&m(l,i),device:m(b,i)||m(l,i)},android:{phone:!m(f,i)&&m(b,i)||!m(f,i)&&m(a,i),tablet:!m(f,i)&&!m(b,i)&&!m(a,i)&&(m(l,i)||m(p,i)),device:!m(f,i)&&(m(b,i)||m(l,i)||m(a,i)||m(p,i))||m(/\bokhttp\b/i,i)},windows:{phone:m(f,i),tablet:m(s,i),device:m(f,i)||m(s,i)},other:{blackberry:m(u,i),blackberry10:m(c,i),opera:m(h,i),firefox:m(w,i),chrome:m(v,i),device:m(u,i)||m(c,i)||m(h,i)||m(w,i)||m(v,i)}};return d.any=d.apple.device||d.android.device||d.windows.device||d.other.device,d.phone=d.apple.phone||d.android.phone||d.windows.phone,d.tablet=d.apple.tablet||d.android.tablet||d.windows.tablet,d} true&&module.exports&&"undefined"==typeof window?module.exports=i: true&&module.exports&&"undefined"!=typeof window?(module.exports=i(),module.exports.isMobile=i): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e.isMobile=i()),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined}(this);

/***/ }),

/***/ "./node_modules/punycode/punycode.js":
/*!*******************************************!*\
  !*** ./node_modules/punycode/punycode.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/UI.ts":
/*!*******************!*\
  !*** ./src/UI.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/** 工具类 */
var Utils = __webpack_require__(/*! ./utils/Utils */ "./src/utils/Utils.ts");
exports.Utils = Utils;
/** UI舞台，最顶级的层 展示所有UI组件 */
var Stage_1 = __webpack_require__(/*! ./core/Stage */ "./src/core/Stage.ts");
exports.Stage = Stage_1.Stage;
/** UI基础显示对象，一般不会直接使用，只作为类型推断 */
var DisplayObject_1 = __webpack_require__(/*! ./core/DisplayObject */ "./src/core/DisplayObject.ts");
exports.DisplayObject = DisplayObject_1.DisplayObject;
/** 心跳，需要在初始化完成后，启动心跳更新 */
var Ticker_1 = __webpack_require__(/*! ./core/Ticker */ "./src/core/Ticker.ts");
exports.TickerShared = Ticker_1.shared;
/**
 * 基础容器
 *
 * 设置checkGroup后，进行分组。 分组后，可理解为复选框。
 *
 * @example let container = new gui.Container();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestContainer
 */
var Container_1 = __webpack_require__(/*! ./display/Container */ "./src/display/Container.ts");
exports.Container = Container_1.Container;
/**
 * 滚动容器
 *
 * @example let scrollingContainer = new gui.ScrollingContainer();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestRect
 */
var ScrollingContainer_1 = __webpack_require__(/*! ./display/ScrollingContainer */ "./src/display/ScrollingContainer.ts");
exports.ScrollingContainer = ScrollingContainer_1.ScrollingContainer;
/**
 * 图片
 *
 * @example let image = new gui.Image();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestImage
 */
var Image_1 = __webpack_require__(/*! ./display/Image */ "./src/display/Image.ts");
exports.Image = Image_1.Image;
/**
 * 序列图动画
 *
 * 支持使用texturepacker导出以及处理轴点
 *
 * @example let spriteAnimated = new gui.SpriteAnimated();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestSpriteAnimated
 */
var SpriteAnimated_1 = __webpack_require__(/*! ./display/SpriteAnimated */ "./src/display/SpriteAnimated.ts");
exports.SpriteAnimated = SpriteAnimated_1.SpriteAnimated;
/**
 * 文本
 *
 * 中文换行特殊处理 xxxx.style.breakWords = true;
 *
 * 文本没有宽高，自适应
 *
 * @example let label = new gui.Label();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestLabel
 */
var Label_1 = __webpack_require__(/*! ./display/Label */ "./src/display/Label.ts");
exports.Label = Label_1.Label;
/**
 * 文本输入
 *
 * @example let textInput = new gui.TextInput(true|false);//单行或多行
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTextInput
 */
var TextInput_1 = __webpack_require__(/*! ./display/TextInput */ "./src/display/TextInput.ts");
exports.TextInput = TextInput_1.TextInput;
/**
 * 滑动条/进度条
 *
 * @example let slider = new gui.Slider();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestSlider
 */
var Slider_1 = __webpack_require__(/*! ./display/Slider */ "./src/display/Slider.ts");
exports.Slider = Slider_1.Slider;
/**
 * 按钮
 *
 * @example let button = new gui.Button();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestButton
 */
var Button_1 = __webpack_require__(/*! ./display/Button */ "./src/display/Button.ts");
exports.Button = Button_1.Button;
/**
 * 单选\复选框
 *
 * 设置checkGroup后，进行分组。 分组后，可理解为复选框。
 *
 * @example let checkBox = new gui.CheckBox();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestCheckBox
 */
var CheckBox_1 = __webpack_require__(/*! ./display/CheckBox */ "./src/display/CheckBox.ts");
exports.CheckBox = CheckBox_1.CheckBox;
/**
 * 绘制矩形或圆角矩形
 *
 * @example let rect = new gui.Rect();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestRect
 */
var Rect_1 = __webpack_require__(/*! ./display/Rect */ "./src/display/Rect.ts");
exports.Rect = Rect_1.Rect;
/**
 * 绘制矩形或圆角矩形
 *
 * @example let rect = new gui.Circle();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestCircle
 */
var Circle_1 = __webpack_require__(/*! ./display/Circle */ "./src/display/Circle.ts");
exports.Circle = Circle_1.Circle;
/**
 * 矢量绘制
 *
 * @example let graphics = new gui.Graphics();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTimeLine
 */
var Graphics_1 = __webpack_require__(/*! ./display/Graphics */ "./src/display/Graphics.ts");
exports.Graphics = Graphics_1.Graphics;
/**
 * 跟随划线（鼠标或触摸按下时）
 *
 * @example let graphics = new gui.FollowLine();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTimeLine
 */
var FollowLine_1 = __webpack_require__(/*! ./display/FollowLine */ "./src/display/FollowLine.ts");
exports.FollowLine = FollowLine_1.FollowLine;
/**
 * 连线组件
 *
 *
 * @example let connectLine = new gui.ConnectLine();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestConnectLine
 */
var ConnectLine_1 = __webpack_require__(/*! ./display/ConnectLine */ "./src/display/ConnectLine.ts");
exports.ConnectLine = ConnectLine_1.ConnectLine;
/**
 * 音频播放组件
 *
 * @example let sound = new gui.Sound();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestSound
 */
var Sound_1 = __webpack_require__(/*! ./display/Sound */ "./src/display/Sound.ts");
exports.Sound = Sound_1.Sound;
/**
 * 完整的缓动曲线列表
 *
 * @example gui.Easing.Linear.None;
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTween
 */
var Easing_1 = __webpack_require__(/*! ./tween/Easing */ "./src/tween/Easing.ts");
exports.Easing = Easing_1.Easing;
/**
 * 缓动动画
 *
 * @example let tween = new gui.Tween(myObject).to({width:'300px'}, 2000).start()
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTween
 */
var Tween_1 = __webpack_require__(/*! ./tween/Tween */ "./src/tween/Tween.ts");
exports.Tween = Tween_1.Tween;
/**
 * 基于帧的时间轴控制类
 *
 * @example let timeline = new gui.Timeline();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTimeLine
 */
var Timeline_1 = __webpack_require__(/*! ./tween/Timeline */ "./src/tween/Timeline.ts");
exports.Timeline = Timeline_1.Timeline;
/**
 * 事件绑定类，非继承于inputbase的组件是没有任何交互事件，需单独绑定
 */
var Interaction = __webpack_require__(/*! ./interaction/Index */ "./src/interaction/Index.ts");
exports.Interaction = Interaction;
/**
 * 事件名
 */
var Event = __webpack_require__(/*! ./event/Index */ "./src/event/Index.ts");
exports.Event = Event;
/**
 * 枚举
 */
var Enum = __webpack_require__(/*! ./enum/Index */ "./src/enum/Index.ts");
exports.Enum = Enum;


/***/ }),

/***/ "./src/core/ContainerBase.ts":
/*!***********************************!*\
  !*** ./src/core/ContainerBase.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/** 容器扩展类，后续便于做延时渲染 */
var ContainerBase = /** @class */ (function (_super) {
    __extends(ContainerBase, _super);
    function ContainerBase() {
        var _this = _super.call(this) || this;
        _this.isEmitRender = false;
        return _this;
    }
    ContainerBase.prototype.render = function (renderer) {
        if (this.isEmitRender) {
            this.emit("renderChange", renderer);
        }
        _super.prototype.render.call(this, renderer);
    };
    return ContainerBase;
}(PIXI.Container));
exports.ContainerBase = ContainerBase;


/***/ }),

/***/ "./src/core/DisplayLayoutAbstract.ts":
/*!*******************************************!*\
  !*** ./src/core/DisplayLayoutAbstract.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIKeys = __webpack_require__(/*! ./DisplayLayoutKeys */ "./src/core/DisplayLayoutKeys.ts");
var DisplayLayoutValidator_1 = __webpack_require__(/*! ./DisplayLayoutValidator */ "./src/core/DisplayLayoutValidator.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var DisplayObjectAbstract_1 = __webpack_require__(/*! ./DisplayObjectAbstract */ "./src/core/DisplayObjectAbstract.ts");
exports.$tempLocalBounds = new PIXI.Rectangle();
/**
 * UI 布局的基础属性类
 */
var DisplayLayoutAbstract = /** @class */ (function (_super) {
    __extends(DisplayLayoutAbstract, _super);
    function DisplayLayoutAbstract() {
        var _this = _super.call(this) || this;
        _this.isContainer = false;
        /**
         * @private
         */
        _this.$values = {};
        _this.includeInLayout = true;
        _this.initializeUIValues();
        return _this;
    }
    /**
     * @private
     * 定义的所有变量请不要添加任何初始值，必须统一在此处初始化。
     */
    DisplayLayoutAbstract.prototype.initializeUIValues = function () {
        var _a;
        this.$values = (_a = {},
            _a[UIKeys.invalidatePropertiesFlag] = true,
            _a[UIKeys.invalidateSizeFlag] = true,
            _a[UIKeys.invalidateDisplayListFlag] = true,
            _a[UIKeys.left] = NaN,
            _a[UIKeys.right] = NaN,
            _a[UIKeys.top] = NaN,
            _a[UIKeys.bottom] = NaN,
            _a[UIKeys.horizontalCenter] = NaN,
            _a[UIKeys.verticalCenter] = NaN,
            _a[UIKeys.percentWidth] = NaN,
            _a[UIKeys.percentHeight] = NaN,
            _a[UIKeys.explicitWidth] = NaN,
            _a[UIKeys.explicitHeight] = NaN,
            _a[UIKeys.width] = 0,
            _a[UIKeys.height] = 0,
            _a[UIKeys.minWidth] = 0,
            _a[UIKeys.maxWidth] = 100000,
            _a[UIKeys.minHeight] = 0,
            _a[UIKeys.maxHeight] = 100000,
            _a[UIKeys.measuredWidth] = 0,
            _a[UIKeys.measuredHeight] = 0,
            _a[UIKeys.oldPreferWidth] = NaN,
            _a[UIKeys.oldPreferHeight] = NaN,
            _a[UIKeys.x] = 0,
            _a[UIKeys.y] = 0,
            _a[UIKeys.oldX] = 0,
            _a[UIKeys.oldY] = 0,
            _a[UIKeys.oldWidth] = 0,
            _a[UIKeys.oldHeight] = 0,
            _a[UIKeys.scaleX] = 1,
            _a[UIKeys.scaleY] = 1,
            _a[UIKeys.pivotX] = 0,
            _a[UIKeys.pivotY] = 0,
            _a[UIKeys.rotation] = 0,
            _a[UIKeys.skewX] = 0,
            _a[UIKeys.skewY] = 0,
            _a[UIKeys.zIndex] = NaN,
            _a);
    };
    /**
     * @private
     * 检查属性失效标记并应用
     */
    DisplayLayoutAbstract.prototype.checkInvalidateFlag = function () {
        var values = this.$values;
        if (values[UIKeys.invalidatePropertiesFlag]) {
            DisplayLayoutValidator_1.default.invalidateProperties(this);
        }
        if (values[UIKeys.invalidateSizeFlag]) {
            DisplayLayoutValidator_1.default.invalidateSize(this);
        }
        if (values[UIKeys.invalidateDisplayListFlag]) {
            DisplayLayoutValidator_1.default.invalidateDisplayList(this);
        }
        this.validateSize();
    };
    /**
     * @private
     * 验证组件的属性
     */
    DisplayLayoutAbstract.prototype.validateProperties = function () {
        var values = this.$values;
        if (values[UIKeys.invalidatePropertiesFlag]) {
            this.commitProperties();
            values[UIKeys.invalidatePropertiesFlag] = false;
        }
    };
    /**
     * @private
     * 验证组件的尺寸
     */
    DisplayLayoutAbstract.prototype.validateSize = function (recursive) {
        if (recursive) {
            var children = this.uiChildren;
            if (children) {
                var length_1 = children.length;
                for (var i = 0; i < length_1; i++) {
                    var child = children[i];
                    child.validateSize(true);
                }
            }
        }
        var values = this.$values;
        if (values[UIKeys.invalidateSizeFlag]) {
            var changed = this.measureSizes();
            if (changed) {
                this.invalidateDisplayList();
                this.invalidateParentLayout();
            }
            if (this.parent == undefined) {
                return;
            }
            values[UIKeys.invalidateSizeFlag] = false;
        }
    };
    /**
     * @private
     * 验证子项的位置和大小，并绘制其他可视内容
     */
    DisplayLayoutAbstract.prototype.validateDisplayList = function () {
        if (this.parent == undefined) {
            return;
        }
        var values = this.$values;
        if (values[UIKeys.invalidateDisplayListFlag]) {
            this.updateSize();
            this.updateDisplayList(values[UIKeys.width], values[UIKeys.height]);
            values[UIKeys.invalidateDisplayListFlag] = false;
        }
    };
    /**
     * @private
     * 提交属性，子类在调用完invalidateProperties()方法后，应覆盖此方法以应用属性
     */
    DisplayLayoutAbstract.prototype.commitProperties = function () {
        //
    };
    /**
     * @private
     * 测量组件尺寸
     */
    DisplayLayoutAbstract.prototype.measure = function () {
        this.container.getLocalBounds(exports.$tempLocalBounds);
        this.setMeasuredSize(exports.$tempLocalBounds.width, exports.$tempLocalBounds.height);
    };
    /**
     * @private
     * 测量组件尺寸，返回尺寸是否发生变化
     */
    DisplayLayoutAbstract.prototype.measureSizes = function () {
        var changed = false;
        var values = this.$values;
        if (!values[UIKeys.invalidateSizeFlag])
            return changed;
        this.measure();
        var parentWidth = this.parent ? this.parent.width : 1;
        var parentHeight = this.parent ? this.parent.height : 1;
        var maxWidth = Utils_1.formatRelative(values[UIKeys.maxWidth], parentWidth);
        var maxHeight = Utils_1.formatRelative(values[UIKeys.maxHeight], parentHeight);
        var minWidth = Utils_1.formatRelative(values[UIKeys.minWidth], parentWidth);
        var minHeight = Utils_1.formatRelative(values[UIKeys.minHeight], parentHeight);
        //显示设置宽高，会忽略最大与最小值
        if (isNaN(values[UIKeys.explicitWidth]) || isNaN(values[UIKeys.explicitHeight])) {
            if (!isNaN(values[UIKeys.percentWidth])) {
                values[UIKeys.measuredWidth] = Math.ceil(values[UIKeys.percentWidth] * parentWidth);
            }
            if (!isNaN(values[UIKeys.percentHeight])) {
                values[UIKeys.measuredHeight] = Math.ceil(values[UIKeys.percentHeight] * parentHeight);
            }
            if (values[UIKeys.measuredWidth] < minWidth) {
                values[UIKeys.measuredWidth] = minWidth;
            }
            if (values[UIKeys.measuredWidth] > maxWidth) {
                values[UIKeys.measuredWidth] = maxWidth;
            }
            if (values[UIKeys.measuredHeight] < minHeight) {
                values[UIKeys.measuredHeight] = minHeight;
            }
            if (values[UIKeys.measuredHeight] > maxHeight) {
                values[UIKeys.measuredHeight] = maxHeight;
            }
        }
        else {
            if (values[UIKeys.explicitWidth] < minWidth) {
                values[UIKeys.explicitWidth] = minWidth;
            }
            if (values[UIKeys.explicitWidth] > maxWidth) {
                values[UIKeys.explicitWidth] = maxWidth;
            }
            if (values[UIKeys.explicitHeight] < minHeight) {
                values[UIKeys.explicitHeight] = minHeight;
            }
            if (values[UIKeys.explicitHeight] > maxHeight) {
                values[UIKeys.explicitHeight] = maxHeight;
            }
        }
        var preferredW = this.getPreferredUWidth();
        var preferredH = this.getPreferredUHeight();
        if (preferredW !== values[UIKeys.oldPreferWidth] ||
            preferredH !== values[UIKeys.oldPreferHeight]) {
            values[UIKeys.oldPreferWidth] = preferredW;
            values[UIKeys.oldPreferHeight] = preferredH;
            changed = true;
        }
        return changed;
    };
    /**
     * @private
     * 设置测量结果。
     * @param width 测量宽度
     * @param height 测量高度
     */
    DisplayLayoutAbstract.prototype.setMeasuredSize = function (width, height) {
        var values = this.$values;
        values[UIKeys.measuredWidth] = Math.ceil(+width || 0);
        values[UIKeys.measuredHeight] = Math.ceil(+height || 0);
    };
    /**
     * @private
     *
     * @returns
     */
    DisplayLayoutAbstract.prototype.getPreferredUWidth = function () {
        var values = this.$values;
        return isNaN(values[UIKeys.explicitWidth]) ?
            values[UIKeys.measuredWidth] : values[UIKeys.explicitWidth];
    };
    /**
     * @private
     */
    DisplayLayoutAbstract.prototype.getPreferredUHeight = function () {
        var values = this.$values;
        return isNaN(values[UIKeys.explicitHeight]) ?
            values[UIKeys.measuredHeight] : values[UIKeys.explicitHeight];
    };
    /**
     * @private
     * 获取组件的首选尺寸,常用于父级的measure()方法中
     * 按照：外部显式设置尺寸>测量尺寸 的优先级顺序返回尺寸，
     */
    DisplayLayoutAbstract.prototype.getPreferredBounds = function (bounds) {
        this.measureSizes();
        bounds.width = this.getPreferredUWidth();
        bounds.height = this.getPreferredUHeight();
        bounds.x = this.$values[UIKeys.x];
        bounds.y = this.$values[UIKeys.y];
        return bounds;
    };
    /**
    * @private
    * 标记提交过需要延迟应用的属性，以便在稍后屏幕更新期间调用该组件的 commitProperties() 方法。
    *
    * 例如，要更改文本颜色和大小，如果在更改颜色后立即进行更新，然后在设置大小后再更新大小，就有些浪费。
    * 同时更改两个属性后再使用新的大小和颜色一次性呈示文本，效率会更高。<p/>
    *
    * 通常，子类应覆盖 commitProperties() 方法，而不是覆盖此方法。
     */
    DisplayLayoutAbstract.prototype.invalidateProperties = function () {
        var values = this.$values;
        if (!values[UIKeys.invalidatePropertiesFlag]) {
            values[UIKeys.invalidatePropertiesFlag] = true;
            DisplayLayoutValidator_1.default.invalidateProperties(this);
        }
    };
    /**
    * @private
    * 标记提交过需要验证组件尺寸，以便在稍后屏幕更新期间调用该组件的 measure(),updatesize() 方法。
    */
    DisplayLayoutAbstract.prototype.invalidateSize = function () {
        var values = this.$values;
        if (!values[UIKeys.invalidateSizeFlag]) {
            values[UIKeys.invalidateSizeFlag] = true;
            DisplayLayoutValidator_1.default.invalidateSize(this);
        }
    };
    /**
    * @private
    * 标记需要验证显示列表，以便在稍后屏幕更新期间调用该组件的 updateDisplayList() 方法。
    */
    DisplayLayoutAbstract.prototype.invalidateDisplayList = function () {
        var values = this.$values;
        if (!values[UIKeys.invalidateDisplayListFlag]) {
            values[UIKeys.invalidateDisplayListFlag] = true;
            DisplayLayoutValidator_1.default.invalidateDisplayList(this);
        }
    };
    /**
     * @private
     * 标记父级容器的尺寸和显示列表为失效
     */
    DisplayLayoutAbstract.prototype.invalidateParentLayout = function () {
        var parent = this.parent;
        if (!parent) {
            return;
        }
        if (parent instanceof DisplayLayoutAbstract) {
            parent.invalidateSize();
            parent.invalidateDisplayList();
        }
    };
    /**
     * @private
     * 设置组件的布局位置
     */
    DisplayLayoutAbstract.prototype.setPosition = function (x, y) {
        var values = this.$values;
        values[UIKeys.x] = x;
        values[UIKeys.y] = y;
        this.updateTransform();
        this.emit(Index_1.ComponentEvent.MOVE, this);
    };
    /**
     * @private
     * 设置组件的宽高。此方法不同于直接设置width,height属性，
     * 不会影响显式标记尺寸属性
     */
    DisplayLayoutAbstract.prototype.setActualSize = function (w, h) {
        var change = false;
        var values = this.$values;
        if (values[UIKeys.width] !== w) {
            values[UIKeys.oldWidth] = values[UIKeys.width];
            values[UIKeys.width] = w;
            change = true;
        }
        if (values[UIKeys.height] !== h) {
            values[UIKeys.oldHeight] = values[UIKeys.height];
            values[UIKeys.height] = h;
            change = true;
        }
        if (change) {
            this.invalidateDisplayList();
            this.emit(Index_1.ComponentEvent.RESIZE, this);
        }
    };
    /**
     * @private
     * 更新最终的组件宽高
     */
    DisplayLayoutAbstract.prototype.updateSize = function () {
        var unscaledWidth = 0;
        var unscaledHeight = 0;
        var values = this.$values;
        if (!isNaN(values[UIKeys.explicitWidth])) {
            unscaledWidth = values[UIKeys.explicitWidth];
        }
        else if (!isNaN(values[UIKeys.measuredWidth])) {
            unscaledWidth = values[UIKeys.measuredWidth];
        }
        if (!isNaN(values[UIKeys.explicitHeight])) {
            unscaledHeight = values[UIKeys.explicitHeight];
        }
        else if (!isNaN(values[UIKeys.measuredHeight])) {
            unscaledHeight = values[UIKeys.measuredHeight];
        }
        this.setActualSize(unscaledWidth, unscaledHeight);
    };
    DisplayLayoutAbstract.prototype.updateTransform = function () {
        this.container.setTransform(this.x + this.pivotX, this.y + this.pivotY, this.scaleX, this.scaleY, this.rotation * (Math.PI / 180), this.skewX, this.skewY, this.pivotX, this.pivotY);
    };
    /**
     * 更新显示列表,子类重写，实现布局
     */
    DisplayLayoutAbstract.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        //
    };
    /**
     * @private
     * 立即应用组件及其子项的所有属性
     */
    DisplayLayoutAbstract.prototype.validateNow = function () {
        if (this.parent)
            DisplayLayoutValidator_1.default.validateClient(this);
    };
    /**
     * @private
    * 验证并更新此对象的属性和布局，如果需要的话重绘对象。
    *
    * 通常只有当脚本执行完毕后，才会处理要求进行大量计算的处理属性。<p/>
    *
    * 例如，对 width 属性的设置可能会延迟，因为此设置需要重新计算这些对象的子项或父项的宽度。
    * 如果脚本多次设置了 width 属性，则延迟处理可防止进行多次处理。此方法允许您手动覆盖此行为。
     */
    DisplayLayoutAbstract.prototype.validateSizeNow = function () {
        this.validateSize(true);
        this.updateSize();
    };
    Object.defineProperty(DisplayLayoutAbstract.prototype, "left", {
        /**
         * @private
         * 距父级容器离左边距离
         */
        get: function () {
            return this.$values[UIKeys.left];
        },
        set: function (value) {
            if (!value || typeof value == "number") {
                value = +value;
            }
            else {
                value = value.toString().trim();
            }
            var values = this.$values;
            if (values[UIKeys.left] === value)
                return;
            values[UIKeys.left] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "right", {
        /**
         * @private
         * 距父级容器右边距离
         */
        get: function () {
            return this.$values[UIKeys.right];
        },
        set: function (value) {
            if (!value || typeof value == "number") {
                value = +value;
            }
            else {
                value = value.toString().trim();
            }
            var values = this.$values;
            if (values[UIKeys.right] === value)
                return;
            values[UIKeys.right] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "top", {
        /**
         * @private
         * 距父级容器顶部距离
         */
        get: function () {
            return this.$values[UIKeys.top];
        },
        set: function (value) {
            if (!value || typeof value == "number") {
                value = +value;
            }
            else {
                value = value.toString().trim();
            }
            var values = this.$values;
            if (values[UIKeys.top] === value)
                return;
            values[UIKeys.top] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "bottom", {
        /**
         * @private
         * 距父级容器底部距离
         */
        get: function () {
            return this.$values[UIKeys.bottom];
        },
        set: function (value) {
            if (!value || typeof value == "number") {
                value = +value;
            }
            else {
                value = value.toString().trim();
            }
            var values = this.$values;
            if (values[UIKeys.bottom] == value)
                return;
            values[UIKeys.bottom] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "horizontalCenter", {
        /**
         * @private
         * 在父级容器中距水平中心位置的距离
         */
        get: function () {
            return this.$values[UIKeys.horizontalCenter];
        },
        set: function (value) {
            if (!value || typeof value == "number") {
                value = +value;
            }
            else {
                value = value.toString().trim();
            }
            var values = this.$values;
            if (values[UIKeys.horizontalCenter] === value)
                return;
            values[UIKeys.horizontalCenter] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "verticalCenter", {
        /**
         * @private
         * 在父级容器中距竖直中心位置的距离
         */
        get: function () {
            return this.$values[UIKeys.verticalCenter];
        },
        set: function (value) {
            if (!value || typeof value == "number") {
                value = +value;
            }
            else {
                value = value.toString().trim();
            }
            var values = this.$values;
            if (values[UIKeys.verticalCenter] === value)
                return;
            values[UIKeys.verticalCenter] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "percentWidth", {
        /**
         * @private
         * 相对父级容器宽度的百分比
         */
        get: function () {
            return this.$values[UIKeys.percentWidth];
        },
        set: function (value) {
            value = +value;
            var values = this.$values;
            if (values[UIKeys.percentWidth] === value)
                return;
            values[UIKeys.percentWidth] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "percentHeight", {
        /**
         * @private
         * 相对父级容器高度的百分比
         */
        get: function () {
            return this.$values[UIKeys.percentHeight];
        },
        set: function (value) {
            value = +value;
            var values = this.$values;
            if (values[UIKeys.percentHeight] === value)
                return;
            values[UIKeys.percentHeight] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "explicitWidth", {
        /**
         * @private
         * 外部显式指定的宽度
         */
        get: function () {
            return this.$values[UIKeys.explicitWidth];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "explicitHeight", {
        /**
         * @private
         * 外部显式指定的高度
         */
        get: function () {
            return this.$values[UIKeys.explicitHeight];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "_width", {
        get: function () {
            return this.$values[UIKeys.explicitWidth];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "_height", {
        get: function () {
            return this.$values[UIKeys.explicitHeight];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "width", {
        /**
         * @private
         * 组件宽度设置为undefined将使用组件的measure()方法自动计算尺寸
         */
        get: function () {
            //this.measureSizes();//不可以调用测量，有性能消耗，后期优化
            return this.getPreferredUWidth();
        },
        /**
         * @private
         *
         * @param value
         */
        set: function (value) {
            value = +value;
            var values = this.$values;
            if (value < 0 || values[UIKeys.width] === value && values[UIKeys.explicitWidth] === value)
                return;
            values[UIKeys.explicitWidth] = value;
            if (isNaN(value))
                this.invalidateSize();
            this.invalidateProperties();
            this.invalidateDisplayList();
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "height", {
        /**
         * @private
         * 组件高度,默认值为NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
         */
        get: function () {
            //this.validateSizeNow();
            //this.measureSizes();//不可以调用测量，有性能消耗，后期优化
            return this.getPreferredUHeight();
        },
        /**
         * @private
         *
         * @param value
         */
        set: function (value) {
            value = +value;
            var values = this.$values;
            if (value < 0 || values[UIKeys.height] === value && values[UIKeys.explicitHeight] === value)
                return;
            values[UIKeys.explicitHeight] = value;
            if (isNaN(value))
                this.invalidateSize();
            this.invalidateProperties();
            this.invalidateDisplayList();
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "minWidth", {
        /**
         * @private
         * 组件的最小宽度,此属性设置为大于maxWidth的值时无效。同时影响测量和自动布局的尺寸。
         */
        get: function () {
            return this.$values[UIKeys.minWidth];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (value < 0 || values[UIKeys.minWidth] === value) {
                return;
            }
            values[UIKeys.minWidth] = value;
            this.invalidateSize();
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "maxWidth", {
        /**
         * @private
         * 组件的最大高度。同时影响测量和自动布局的尺寸。
         */
        get: function () {
            return this.$values[UIKeys.maxWidth];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (value < 0 || values[UIKeys.maxWidth] === value) {
                return;
            }
            values[UIKeys.maxWidth] = value;
            this.invalidateSize();
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "minHeight", {
        /**
         * @private
         * 组件的最小高度,此属性设置为大于maxHeight的值时无效。同时影响测量和自动布局的尺寸。
         */
        get: function () {
            return this.$values[UIKeys.minHeight];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (value < 0 || values[UIKeys.minHeight] === value) {
                return;
            }
            values[UIKeys.minHeight] = value;
            this.invalidateSize();
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "maxHeight", {
        /**
         * @private
         * 组件的最大高度,同时影响测量和自动布局的尺寸。
         */
        get: function () {
            return this.$values[UIKeys.maxHeight];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (value < 0 || values[UIKeys.maxHeight] === value) {
                return;
            }
            values[UIKeys.maxHeight] = value;
            this.invalidateSize();
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "scaleX", {
        get: function () {
            return this.$values[UIKeys.scaleX];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.scaleX] === value) {
                return;
            }
            if (value !== this.container.scale.x) {
                values[UIKeys.scaleX] = value;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.invalidateParentLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "scaleY", {
        get: function () {
            return this.$values[UIKeys.scaleY];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.scaleY] === value) {
                return;
            }
            if (value !== this.container.scale.y) {
                values[UIKeys.scaleY] = value;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.invalidateParentLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "x", {
        get: function () {
            return this.$values[UIKeys.x];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.x] === value) {
                return;
            }
            values[UIKeys.x] = value;
            if (this.container.x !== value) {
                this.container.x = value;
                this.invalidateParentLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "y", {
        get: function () {
            return this.$values[UIKeys.y];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.y] === value) {
                return;
            }
            values[UIKeys.y] = value;
            if (value !== this.container.y) {
                this.container.y = value;
                this.invalidateParentLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "skewX", {
        get: function () {
            return this.$values[UIKeys.skewX];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.skewX] === value) {
                return;
            }
            values[UIKeys.skewX] = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "skewY", {
        get: function () {
            return this.$values[UIKeys.skewY];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.skewY] === value) {
                return;
            }
            values[UIKeys.skewY] = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "pivotX", {
        get: function () {
            return this.$values[UIKeys.pivotX];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.pivotX] === value) {
                return;
            }
            values[UIKeys.pivotX] = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "pivotY", {
        get: function () {
            return this.$values[UIKeys.pivotY];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.pivotY] === value) {
                return;
            }
            values[UIKeys.pivotY] = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "rotation", {
        get: function () {
            return this.$values[UIKeys.rotation];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.rotation] === value) {
                return;
            }
            values[UIKeys.rotation] = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayLayoutAbstract.prototype, "zIndex", {
        /**
         *  =不可用= 设置索引层级，每次父级变化时，会排序 （未实现）
         */
        get: function () {
            return this.$values[UIKeys.zIndex];
        },
        set: function (value) {
            value = +value || 0;
            var values = this.$values;
            if (values[UIKeys.zIndex] === value) {
                return;
            }
            values[UIKeys.zIndex] = value;
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    return DisplayLayoutAbstract;
}(DisplayObjectAbstract_1.DisplayObjectAbstract));
exports.DisplayLayoutAbstract = DisplayLayoutAbstract;


/***/ }),

/***/ "./src/core/DisplayLayoutKeys.ts":
/*!***************************************!*\
  !*** ./src/core/DisplayLayoutKeys.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//states
/** 标记属性失效 */
exports.invalidatePropertiesFlag = Symbol("invalidatePropertiesFlag");
/** 标记大小失效 */
exports.invalidateSizeFlag = Symbol("invalidateSizeFlag");
/** 标记显示失效 */
exports.invalidateDisplayListFlag = Symbol("invalidateDisplayListFlag");
//Properties
exports.explicitWidth = Symbol("explicitWidth");
exports.explicitHeight = Symbol("explicitHeight");
exports.width = Symbol("width");
exports.height = Symbol("height");
exports.minWidth = Symbol("minWidth");
exports.maxWidth = Symbol("maxWidth");
exports.minHeight = Symbol("minHeight");
exports.maxHeight = Symbol("maxHeight");
exports.percentWidth = Symbol("percentWidth");
exports.percentHeight = Symbol("percentHeight");
exports.scaleX = Symbol("scaleX");
exports.scaleY = Symbol("scaleY");
exports.x = Symbol("x");
exports.y = Symbol("y");
exports.skewX = Symbol("skewX");
exports.skewY = Symbol("skewY");
exports.pivotX = Symbol("pivotX");
exports.pivotY = Symbol("pivotY");
exports.rotation = Symbol("rotation");
exports.zIndex = Symbol("zIndex");
exports.measuredWidth = Symbol("measuredWidth");
exports.measuredHeight = Symbol("measuredHeight");
exports.oldPreferWidth = Symbol("oldPreferWidth");
exports.oldPreferHeight = Symbol("oldPreferHeight");
exports.oldX = Symbol("oldX");
exports.oldY = Symbol("oldY");
exports.oldWidth = Symbol("oldWidth");
exports.oldHeight = Symbol("oldHeight");
//Styles
exports.left = Symbol("left");
exports.right = Symbol("right");
exports.top = Symbol("top");
exports.bottom = Symbol("bottom");
exports.horizontalCenter = Symbol("horizontalCenter");
exports.verticalCenter = Symbol("verticalCenter");


/***/ }),

/***/ "./src/core/DisplayLayoutValidator.ts":
/*!********************************************!*\
  !*** ./src/core/DisplayLayoutValidator.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Ticker_1 = __webpack_require__(/*! ./Ticker */ "./src/core/Ticker.ts");
/**
 * @private
 * 列表项
 */
var DepthBin = /** @class */ (function () {
    function DepthBin() {
        this.map = {};
        this.items = [];
        this.length = 0;
    }
    DepthBin.prototype.insert = function (client) {
        var hashCode = client.uuid;
        if (this.map[hashCode]) {
            return;
        }
        this.map[hashCode] = true;
        this.length++;
        this.items.push(client);
    };
    DepthBin.prototype.pop = function () {
        var client = this.items.pop(); //使用pop会比shift有更高的性能，避免索引整体重置。
        if (client) {
            this.length--;
            if (this.length === 0) {
                this.map = {}; //清空所有key防止内存泄露
            }
            else {
                this.map[client.uuid] = false;
            }
        }
        return client;
    };
    DepthBin.prototype.remove = function (client) {
        var index = this.items.indexOf(client);
        if (index >= 0) {
            this.items.splice(index, 1);
            this.length--;
            if (this.length === 0) {
                this.map = {}; //清空所有key防止内存泄露
            }
            else {
                this.map[client.uuid] = false;
            }
        }
    };
    return DepthBin;
}());
/**
 * @private
 * 显示列表嵌套深度排序队列
 */
var DepthQueue = /** @class */ (function () {
    function DepthQueue() {
        /**
         * 深度队列
         */
        this.depthBins = {};
        /**
         * 最小深度
         */
        this.minDepth = 0;
        /**
         * 最大深度
         */
        this.maxDepth = -1;
    }
    /**
     * 移除所有
     */
    DepthQueue.prototype.removeAll = function () {
        var depthBins = this.depthBins;
        for (var key in depthBins) {
            var item = depthBins[key];
            item.items = [];
            item.map = {};
            item.length = 0;
        }
        this.minDepth = 0;
        this.maxDepth = -1;
    };
    /**
     * 插入一个元素
     */
    DepthQueue.prototype.insert = function (client) {
        var depth = client.$nestLevel;
        if (this.maxDepth < this.minDepth) {
            this.minDepth = this.maxDepth = depth;
        }
        else {
            if (depth < this.minDepth)
                this.minDepth = depth;
            if (depth > this.maxDepth)
                this.maxDepth = depth;
        }
        var bin = this.depthBins[depth];
        if (!bin) {
            bin = this.depthBins[depth] = new DepthBin();
        }
        bin.insert(client);
    };
    /**
     * 从队列尾弹出深度最大的一个对象
     */
    DepthQueue.prototype.pop = function () {
        var client;
        var minDepth = this.minDepth;
        if (minDepth <= this.maxDepth) {
            var bin = this.depthBins[this.maxDepth];
            while (!bin || bin.length === 0) {
                this.maxDepth--;
                if (this.maxDepth < minDepth)
                    return undefined;
                bin = this.depthBins[this.maxDepth];
            }
            client = bin.pop();
            while (!bin || bin.length == 0) {
                this.maxDepth--;
                if (this.maxDepth < minDepth)
                    break;
                bin = this.depthBins[this.maxDepth];
            }
        }
        return client;
    };
    /**
     * 从队列首弹出深度最小的一个对象
     */
    DepthQueue.prototype.shift = function () {
        var client;
        var maxDepth = this.maxDepth;
        if (this.minDepth <= maxDepth) {
            var bin = this.depthBins[this.minDepth];
            while (!bin || bin.length === 0) {
                this.minDepth++;
                if (this.minDepth > maxDepth)
                    return undefined;
                bin = this.depthBins[this.minDepth];
            }
            client = bin.pop();
            while (!bin || bin.length == 0) {
                this.minDepth++;
                if (this.minDepth > maxDepth)
                    break;
                bin = this.depthBins[this.minDepth];
            }
        }
        return client;
    };
    /**
     * 移除大于等于指定组件层级的元素中最大的元素
     */
    DepthQueue.prototype.removeLargestChild = function (client) {
        var hashCode = client.uuid;
        var nestLevel = client.$nestLevel;
        var max = this.maxDepth;
        var min = nestLevel;
        while (min <= max) {
            var bin = this.depthBins[max];
            if (bin && bin.length > 0) {
                if (max === nestLevel) {
                    if (bin.map[hashCode]) {
                        bin.remove(client);
                        return client;
                    }
                }
                else if (client["isContainer"]) {
                    var items = bin.items;
                    var length_1 = bin.length;
                    for (var i = 0; i < length_1; i++) {
                        var value = items[i];
                        if (client.contains(value)) {
                            bin.remove(value);
                            return value;
                        }
                    }
                }
                else {
                    break;
                }
                max--;
            }
            else {
                if (max == this.maxDepth) {
                    this.maxDepth--;
                }
                max--;
                if (max < min)
                    break;
            }
        }
        return undefined;
    };
    /**
     * 移除大于等于指定组件层级的元素中最小的元素
     */
    DepthQueue.prototype.removeSmallestChild = function (client) {
        var nestLevel = client.$nestLevel;
        var min = nestLevel;
        var max = this.maxDepth;
        var hashCode = client.uuid;
        while (min <= max) {
            var bin = this.depthBins[min];
            if (bin && bin.length > 0) {
                if (min === nestLevel) {
                    if (bin.map[hashCode]) {
                        bin.remove(client);
                        return client;
                    }
                }
                else if (client["isContainer"]) {
                    var items = bin.items;
                    var length_2 = bin.length;
                    for (var i = 0; i < length_2; i++) {
                        var value = items[i];
                        if (client.contains(value)) {
                            bin.remove(value);
                            return value;
                        }
                    }
                }
                else {
                    break;
                }
                min++;
            }
            else {
                if (min == this.minDepth)
                    this.minDepth++;
                min++;
                if (min > max)
                    break;
            }
        }
        return undefined;
    };
    /**
     * 队列是否为空
     */
    DepthQueue.prototype.isEmpty = function () {
        return this.minDepth > this.maxDepth;
    };
    return DepthQueue;
}());
/**
 * @private
 * 失效验证管理器
 */
var UIValidator = /** @class */ (function (_super) {
    __extends(UIValidator, _super);
    /**
     * @private
     * 创建一个Validator对象
     */
    function UIValidator() {
        var _this = _super.call(this) || this;
        /**
         * @private
         */
        _this.targetLevel = Infinity;
        /**
         * @private
         */
        _this.invalidatePropertiesFlag = false;
        /**
         * @private
         */
        _this.invalidateClientPropertiesFlag = false;
        /**
         * @private
         */
        _this.invalidatePropertiesQueue = new DepthQueue();
        /**
         * @private
         */
        _this.invalidateSizeFlag = false;
        /**
         * @private
         */
        _this.invalidateClientSizeFlag = false;
        /**
         * @private
         */
        _this.invalidateSizeQueue = new DepthQueue();
        /**
         * @private
         */
        _this.invalidateDisplayListFlag = false;
        /**
         * @private
         */
        _this.invalidateDisplayListQueue = new DepthQueue();
        /**
         * @private
         * 是否已经添加了事件监听
         */
        _this.listenersAttached = false;
        return _this;
    }
    /**
     * @private
     * 标记组件属性失效
     */
    UIValidator.prototype.invalidateProperties = function (target) {
        if (!this.invalidatePropertiesFlag) {
            this.invalidatePropertiesFlag = true;
            if (!this.listenersAttached)
                this.attachListeners();
        }
        if (this.targetLevel <= target.$nestLevel)
            this.invalidateClientPropertiesFlag = true;
        this.invalidatePropertiesQueue.insert(target);
    };
    /**
     * @private
     * 验证失效的属性
     */
    UIValidator.prototype.validateProperties = function () {
        var queue = this.invalidatePropertiesQueue;
        var target = queue.shift();
        while (target) {
            if (target.parent) {
                target.validateProperties();
            }
            target = queue.shift();
        }
        if (queue.isEmpty())
            this.invalidatePropertiesFlag = false;
    };
    /**
     * @private
     * 标记需要重新测量尺寸
     */
    UIValidator.prototype.invalidateSize = function (target) {
        if (!this.invalidateSizeFlag) {
            this.invalidateSizeFlag = true;
            if (!this.listenersAttached)
                this.attachListeners();
        }
        if (this.targetLevel <= target.$nestLevel)
            this.invalidateClientSizeFlag = true;
        this.invalidateSizeQueue.insert(target);
    };
    /**
     * @private
     * 测量尺寸
     */
    UIValidator.prototype.validateSize = function () {
        var queue = this.invalidateSizeQueue;
        var target = queue.pop();
        while (target) {
            if (target.parent) {
                target.validateSize();
            }
            target = queue.pop();
        }
        if (queue.isEmpty())
            this.invalidateSizeFlag = false;
    };
    /**
     * @private
     * 标记需要重新布局
     */
    UIValidator.prototype.invalidateDisplayList = function (client) {
        if (!this.invalidateDisplayListFlag) {
            this.invalidateDisplayListFlag = true;
            if (!this.listenersAttached)
                this.attachListeners();
        }
        this.invalidateDisplayListQueue.insert(client);
    };
    /**
     * @private
     * 重新布局
     */
    UIValidator.prototype.validateDisplayList = function () {
        var queue = this.invalidateDisplayListQueue;
        var client = queue.shift();
        while (client) {
            if (client.parent) {
                client.validateDisplayList();
            }
            client = queue.shift();
        }
        if (queue.isEmpty())
            this.invalidateDisplayListFlag = false;
    };
    /**
     * @private
     * 添加事件监听
     */
    UIValidator.prototype.attachListeners = function () {
        Ticker_1.default.addUpdateEvent(this.doPhasedInstantiationCallBack, this);
        this.listenersAttached = true;
    };
    /**
     * @private
     * 执行属性应用
     */
    UIValidator.prototype.doPhasedInstantiationCallBack = function () {
        Ticker_1.default.removeUpdateEvent(this.doPhasedInstantiationCallBack, this);
        this.doPhasedInstantiation();
    };
    /**
     * @private
     */
    UIValidator.prototype.doPhasedInstantiation = function () {
        if (this.invalidatePropertiesFlag) {
            this.validateProperties();
        }
        if (this.invalidateSizeFlag) {
            this.validateSize();
        }
        if (this.invalidateDisplayListFlag) {
            this.validateDisplayList();
        }
        if (this.invalidatePropertiesFlag ||
            this.invalidateSizeFlag ||
            this.invalidateDisplayListFlag) {
            this.attachListeners();
        }
        else {
            this.listenersAttached = false;
        }
    };
    /**
     * @private
     * 使大于等于指定组件层级的元素立即应用属性
     * @param target 要立即应用属性的组件
     */
    UIValidator.prototype.validateClient = function (target) {
        var obj;
        var done = false;
        var oldTargetLevel = this.targetLevel;
        if (this.targetLevel === Infinity)
            this.targetLevel = target.$nestLevel;
        var propertiesQueue = this.invalidatePropertiesQueue;
        var sizeQueue = this.invalidateSizeQueue;
        var displayListQueue = this.invalidateDisplayListQueue;
        while (!done) {
            done = true;
            obj = propertiesQueue.removeSmallestChild(target);
            while (obj) {
                if (obj.parent) {
                    obj.validateProperties();
                }
                obj = propertiesQueue.removeSmallestChild(target);
            }
            if (propertiesQueue.isEmpty()) {
                this.invalidatePropertiesFlag = false;
            }
            this.invalidateClientPropertiesFlag = false;
            obj = sizeQueue.removeLargestChild(target);
            while (obj) {
                if (obj.parent) {
                    obj.validateSize();
                }
                if (this.invalidateClientPropertiesFlag) {
                    obj = (propertiesQueue.removeSmallestChild(target));
                    if (obj) {
                        propertiesQueue.insert(obj);
                        done = false;
                        break;
                    }
                }
                obj = sizeQueue.removeLargestChild(target);
            }
            if (sizeQueue.isEmpty()) {
                this.invalidateSizeFlag = false;
            }
            this.invalidateClientPropertiesFlag = false;
            this.invalidateClientSizeFlag = false;
            obj = displayListQueue.removeSmallestChild(target);
            while (obj) {
                if (obj.parent) {
                    obj.validateDisplayList();
                }
                if (this.invalidateClientPropertiesFlag) {
                    obj = propertiesQueue.removeSmallestChild(target);
                    if (obj) {
                        propertiesQueue.insert(obj);
                        done = false;
                        break;
                    }
                }
                if (this.invalidateClientSizeFlag) {
                    obj = sizeQueue.removeLargestChild(target);
                    if (obj) {
                        sizeQueue.insert(obj);
                        done = false;
                        break;
                    }
                }
                obj = displayListQueue.removeSmallestChild(target);
            }
            if (displayListQueue.isEmpty()) {
                this.invalidateDisplayListFlag = false;
            }
        }
        if (oldTargetLevel === Infinity) {
            this.targetLevel = Infinity;
        }
    };
    UIValidator.prototype.removeDepthQueueAll = function () {
        this.invalidatePropertiesQueue.removeAll();
        this.invalidateDisplayListQueue.removeAll();
        this.invalidateSizeQueue.removeAll();
        this.doPhasedInstantiation();
    };
    return UIValidator;
}(PIXI.utils.EventEmitter));
var validatorShared = new UIValidator();
exports.default = validatorShared;


/***/ }),

/***/ "./src/core/DisplayObject.ts":
/*!***********************************!*\
  !*** ./src/core/DisplayObject.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var DisplayLayoutAbstract_1 = __webpack_require__(/*! ./DisplayLayoutAbstract */ "./src/core/DisplayLayoutAbstract.ts");
var CSSStyle_1 = __webpack_require__(/*! ../layout/CSSStyle */ "./src/layout/CSSStyle.ts");
var CSSLayout_1 = __webpack_require__(/*! ../layout/CSSLayout */ "./src/layout/CSSLayout.ts");
var UIBaseDrag_1 = __webpack_require__(/*! ./plugs/UIBaseDrag */ "./src/core/plugs/UIBaseDrag.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var UIClick_1 = __webpack_require__(/*! ./plugs/UIClick */ "./src/core/plugs/UIClick.ts");
var filter_outline_1 = __webpack_require__(/*! @pixi/filter-outline */ "./node_modules/@pixi/filter-outline/lib/filter-outline.esm.js");
/**
 * UI的顶级类，基础的UI对象
 *
 * @class
 * @since 1.0.0
 */
var DisplayObject = /** @class */ (function (_super) {
    __extends(DisplayObject, _super);
    /**
     * 构造函数
     */
    function DisplayObject() {
        var _this = _super.call(this) || this;
        /**
         * 插件列表
         */
        _this.plugs = new Map();
        /**
         * 拖动限制门槛,小于设置的数不执行拖动,防止点击与滚动
         */
        _this.dragThreshold = 0;
        /** 拖动时，事件流是否继续传输 */
        _this.dragStopPropagation = true;
        _this.grayscaleFilterValue = 0;
        /**
        *  在不同分辨率下保持像素稳定
        * @default
        */
        _this.pixelPerfect = true;
        /**
         * 动态属性，避免其他类注入
         */
        _this.attach = {};
        _this.container.name = _this.constructor.name;
        return _this;
    }
    Object.defineProperty(DisplayObject.prototype, "dragOption", {
        /**
         * 设置拖动
         */
        get: function () {
            if (this.plugs.has(UIBaseDrag_1.UIBaseDrag.key)) {
                return this.plugs.get(UIBaseDrag_1.UIBaseDrag.key);
            }
            return new UIBaseDrag_1.UIBaseDrag(this);
        },
        set: function (value) {
            var dragOption = this.dragOption;
            Utils_1.deepCopy(value, dragOption);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "isClick", {
        /** 是否开启鼠标或触摸点击，开启后，接收TouchMouseEvent */
        get: function () {
            var click = this.plugs.get(UIClick_1.UIClick.key);
            if (click) {
                return true;
            }
            return false;
        },
        set: function (value) {
            var click = this.plugs.get(UIClick_1.UIClick.key);
            if (value) {
                if (!click) {
                    new UIClick_1.UIClick(this);
                }
            }
            else {
                if (click) {
                    click.release();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "groupName", {
        get: function () {
            return this._groupName;
        },
        set: function (value) {
            if (value === undefined) {
                Index_1.GroupController.unRegistrerGroup(this);
            }
            if (this._groupName == value) {
                return;
            }
            this._groupName = value;
            Index_1.GroupController.registrerGroup(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "alpha", {
        /**
         * 透明度
         */
        get: function () {
            return this.container.alpha;
        },
        set: function (value) {
            this.container.alpha = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "tint", {
        get: function () {
            return this._tint;
        },
        set: function (value) {
            if (value === this._blendMode) {
                return;
            }
            this._tint = value;
            this.container.children.forEach(function (childrenItem) {
                if (childrenItem["tint"]) {
                    childrenItem["tint"] = value;
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "blendMode", {
        get: function () {
            return this._blendMode;
        },
        set: function (value) {
            if (value === this._blendMode) {
                return;
            }
            this._blendMode = value;
            this.container.children.forEach(function (childrenItem) {
                if (childrenItem instanceof PIXI.Sprite) {
                    childrenItem.blendMode = value || PIXI.BLEND_MODES.NORMAL;
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "filterBlur", {
        get: function () {
            return this.blurFilter ? this.blurFilter.blur : 0;
        },
        /**
         * 设置Blur XY的模糊强度
         *
         * 参数类型为number时，设置 blurX = blurY = value
         *
         */
        set: function (value) {
            var container = this.container;
            if (this.blurFilter === undefined) {
                this.blurFilter = new PIXI.filters.BlurFilter(8, 1, 1);
                container.filters = [this.blurFilter];
            }
            this.blurFilter.blur = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "filterGrayscale", {
        get: function () {
            return this.grayscaleFilterValue * 100;
        },
        set: function (value) {
            var container = this.container;
            if (this.grayscaleFilter === undefined) {
                this.grayscaleFilter = new PIXI.filters.ColorMatrixFilter();
                container.filters = [this.grayscaleFilter];
            }
            this.grayscaleFilterValue = value / 100;
            this.grayscaleFilter.greyscale(this.grayscaleFilterValue, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "filterOutline", {
        get: function () {
            var thickness, color;
            if (this.outlineFilter) {
                color = this.outlineFilter.color;
                thickness = this.outlineFilter.thickness;
            }
            return this.outlineFilter ? "outline(" + thickness + "," + color + ")" : '';
        },
        set: function (value) {
            var container = this.container;
            value = value.substring(value.indexOf('(') + 1, value.indexOf(')'));
            var parsedValue = value.split(',');
            if (this.outlineFilter === undefined) {
                this.outlineFilter = new filter_outline_1.OutlineFilter(0, 0xffffff, 1);
                container.filters = [this.outlineFilter];
            }
            this.outlineFilter.color = parsedValue[1];
            this.outlineFilter.thickness = parsedValue[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "style", {
        /**
         * 获取样式
         */
        get: function () {
            if (this._style == undefined) {
                this._style = new CSSStyle_1.CSSStyle(this);
            }
            return this._style;
        },
        set: function (value) {
            var style = this.style;
            Utils_1.deepCopy(value, style);
            this.invalidateParentLayout();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新显示列表,子类重写，实现布局
     */
    DisplayObject.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        if (this._style && this._style.display !== "none") {
            //console.log("displayStyle",unscaledWidth,unscaledHeight,this.left,this.right,this.x,this.y);
            CSSLayout_1.updateDisplayLayout(this, unscaledWidth, unscaledHeight);
        }
        else {
            //console.log("display",this.x + this.pivotX,this.y + this.pivotY,this.scaleX,this.scaleY,this.rotation*(Math.PI/180),this.skewX,this.skewY,this.pivotX,this.pivotY);
            this.updateTransform();
        }
    };
    DisplayObject.prototype.load = function () {
        this.initializeUIValues();
        _super.prototype.load.call(this);
    };
    DisplayObject.prototype.release = function () {
        var _a = this, container = _a.container, $mask = _a.$mask, $background = _a.$background;
        if (this._style) {
            this._style.release();
            this._style = undefined;
        }
        if ($mask) {
            container.mask = null;
            if ($mask instanceof DisplayObject) {
                $mask.release();
            }
            else {
                $mask.parent && $mask.parent.removeChild($mask).destroy();
            }
            this.$mask = undefined;
        }
        if ($background && $background.parent) {
            $background.parent.removeChild($background).destroy();
            this.$background = undefined;
        }
        this.plugs.forEach(function (value) {
            value.release();
        });
        Index_1.GroupController.unRegistrerGroup(this);
        _super.prototype.release.call(this);
    };
    DisplayObject.prototype.releaseAll = function () {
        this.offAll();
        this.release();
        while (this.uiChildren.length > 0) {
            if (this.uiChildren[0].uiChildren.length > 0) {
                this.uiChildren[0].uiChildren[0].releaseAll();
            }
            this.uiChildren[0].releaseAll();
        }
        this.uiChildren = [];
        this.container.removeAllListeners();
        this.container.removeChildren();
    };
    return DisplayObject;
}(DisplayLayoutAbstract_1.DisplayLayoutAbstract));
exports.DisplayObject = DisplayObject;


/***/ }),

/***/ "./src/core/DisplayObjectAbstract.ts":
/*!*******************************************!*\
  !*** ./src/core/DisplayObjectAbstract.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ContainerBase_1 = __webpack_require__(/*! ./ContainerBase */ "./src/core/ContainerBase.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/**
 *
 */
var DisplayObjectAbstract = /** @class */ (function (_super) {
    __extends(DisplayObjectAbstract, _super);
    function DisplayObjectAbstract() {
        var _this = _super.call(this) || this;
        /**
         * 自定义组价名
         */
        _this.name = "";
        /**
         * @private
         * 这个对象在显示列表中的嵌套深度，舞台为1，它的子项为2，子项的子项为3，以此类推。当对象不在显示列表中时此属性值为0.
         */
        _this.$nestLevel = 0;
        /**
         * 是否初始化
         * @default
         */
        _this.initialized = false;
        /**
         * 节点列表
         */
        _this.uiChildren = [];
        _this._interactive = true;
        _this._interactiveChildren = true;
        _this._enabled = true;
        /**
         * 是否可见
         */
        _this._visible = true;
        _this.uuid = Utils_1.uid();
        _this.container = new ContainerBase_1.ContainerBase();
        _this.container.on("added", _this.$onAddStage, _this);
        _this.container.on("removed", _this.$onRemoveStage, _this);
        return _this;
    }
    /** 添加显示对象，需集成Core */
    DisplayObjectAbstract.prototype.addChild = function (item) {
        if (this.container.children.length !== this.uiChildren.length) {
            return this.addChildAt(item, this.container.children.length);
        }
        else {
            return this.addChildAt(item, this.uiChildren.length);
        }
    };
    DisplayObjectAbstract.prototype.addChildAt = function (item, index) {
        if (item.parent) {
            item.parent.removeChild(item);
        }
        item.parent = this;
        item.$nestLevel = this.$nestLevel + 1;
        this.uiChildren.splice(index, 0, item);
        if (!item.initialized) {
            item.initialized = true;
            item.$onInit();
        }
        index = Math.min(index, this.container.children.length);
        this.emit(Index_1.ComponentEvent.ADD, this);
        this.container.addChildAt(item.container, index);
        return item;
    };
    DisplayObjectAbstract.prototype.getChildAt = function (index) {
        return this.uiChildren[index] || undefined;
    };
    /**
     * 移除已添加的UI组件
     * @param UIObject 要移除的UI组件
     */
    DisplayObjectAbstract.prototype.removeChild = function (item) {
        var index = this.uiChildren.indexOf(item);
        return this.removeChildAt(index);
    };
    DisplayObjectAbstract.prototype.removeChildAt = function (index) {
        index = Math.max(0, index);
        index = Math.min(this.uiChildren.length, index);
        var item = this.uiChildren[index];
        if (item) {
            item.container.parent.removeChild(item.container);
            this.uiChildren.splice(index, 1);
            item.parent = undefined;
        }
        return item;
    };
    DisplayObjectAbstract.prototype.removeChildren = function (beginIndex, endIndex) {
        var start = beginIndex ? beginIndex : 0;
        var end = endIndex ? endIndex : this.uiChildren.length;
        for (var i = start; i < end; i++) {
            this.removeChild(this.uiChildren[i]);
        }
    };
    Object.defineProperty(DisplayObjectAbstract.prototype, "renderable", {
        get: function () {
            return this.container.renderable;
        },
        /**
         * 是否绘制显示对象，如果false不进行绘制，不过仍然会进行相关的更新计算。
         * 只影响父级的递归调用。
         */
        set: function (value) {
            this.container.renderable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObjectAbstract.prototype, "cacheAsBitmap", {
        get: function () {
            return this.container.cacheAsBitmap;
        },
        /**
         * 缓存当前的显示对象，如果移除缓存，设置false即可
         * 在设置这个值时，请确保你的纹理位图已经加载
         */
        set: function (value) {
            this.container.cacheAsBitmap = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObjectAbstract.prototype, "interactive", {
        get: function () {
            return this.container.interactive;
        },
        /**
         * 对象是否可以接收事件
         */
        set: function (value) {
            this._interactive = value;
            if (!this._enabled) {
                return;
            }
            this.container.interactive = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObjectAbstract.prototype, "interactiveChildren", {
        get: function () {
            return this.container.interactiveChildren;
        },
        /**
         * 子对象是否可以接收事件，设置false后，会绕过HitTest方法的递归
         */
        set: function (value) {
            this._interactiveChildren = value;
            if (!this._enabled) {
                return;
            }
            this.container.interactiveChildren = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObjectAbstract.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            if (this._enabled === value) {
                return;
            }
            this._enabled = value;
            this.container.interactive = value;
            this.container.interactiveChildren = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DisplayObjectAbstract.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            if (this._visible === value) {
                return;
            }
            this._visible = value;
            this.container.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    /** 清除全部事件 */
    DisplayObjectAbstract.prototype.offAll = function (event) {
        return this.removeAllListeners(event);
    };
    Object.defineProperty(DisplayObjectAbstract.prototype, "stage", {
        get: function () {
            if (this.$stage == undefined) {
                this.$stage = Utils_1.getStage(this);
            }
            return this.$stage;
        },
        enumerable: true,
        configurable: true
    });
    DisplayObjectAbstract.prototype.checkInvalidateFlag = function () {
    };
    DisplayObjectAbstract.prototype.load = function () {
        this.$onLoad();
    };
    DisplayObjectAbstract.prototype.release = function () {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        this.$onRelease();
        this.$stage = undefined;
    };
    DisplayObjectAbstract.prototype.$onInit = function () {
        this.emit(Index_1.ComponentEvent.CREATION_COMPLETE, this);
    };
    DisplayObjectAbstract.prototype.$onLoad = function () { };
    DisplayObjectAbstract.prototype.$onRelease = function () { };
    DisplayObjectAbstract.prototype.$onAddStage = function () {
        this.checkInvalidateFlag();
        this.emit(Index_1.ComponentEvent.ADDED, this);
    };
    DisplayObjectAbstract.prototype.$onRemoveStage = function () {
        this.checkInvalidateFlag();
        this.parent = undefined;
        this.emit(Index_1.ComponentEvent.REMOVEED, this);
    };
    return DisplayObjectAbstract;
}(PIXI.utils.EventEmitter));
exports.DisplayObjectAbstract = DisplayObjectAbstract;


/***/ }),

/***/ "./src/core/Stage.ts":
/*!***************************!*\
  !*** ./src/core/Stage.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Ticker_1 = __webpack_require__(/*! ./Ticker */ "./src/core/Ticker.ts");
var DisplayLayoutAbstract_1 = __webpack_require__(/*! ./DisplayLayoutAbstract */ "./src/core/DisplayLayoutAbstract.ts");
var DisplayLayoutValidator_1 = __webpack_require__(/*! ./DisplayLayoutValidator */ "./src/core/DisplayLayoutValidator.ts");
/**
 * UI的舞台对象，展示所有UI组件
 *
 * @class
 * @param width {Number} 舞台宽度
 * @param height {Number} 舞台高度
 */
var Stage = /** @class */ (function (_super) {
    __extends(Stage, _super);
    function Stage(width, height, app) {
        var _this = _super.call(this) || this;
        _this._stageWidth = 0; //调整缩放后的值
        _this._stageHeight = 0; //调整缩放后的值
        _this.width = width;
        _this.height = height;
        _this._stageWidth = width;
        _this._stageWidth = height;
        _this.setActualSize(width, height);
        _this.container.name = "Stage";
        _this.container.hitArea = new PIXI.Rectangle(0, 0, width, height);
        _this.container.interactive = true;
        _this.container.interactiveChildren = true;
        _this.initialized = true;
        _this.$nestLevel = 1;
        _this.app = app;
        return _this;
    }
    Object.defineProperty(Stage.prototype, "stageWidth", {
        get: function () {
            return this._stageWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "stageHeight", {
        get: function () {
            return this._stageHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "scaleX", {
        get: function () {
            return this.container.scale.x;
        },
        set: function (value) {
            this.container.scale.x = value;
            this._stageWidth = value * this.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "scaleY", {
        get: function () {
            return this.container.scale.y;
        },
        set: function (value) {
            this.container.scale.y = value;
            this._stageHeight = value * this.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stage.prototype, "Scale", {
        set: function (value) {
            this.container.scale.copyFrom(value);
            this._stageWidth = value.x * this.width;
            this._stageHeight = value.y * this.height;
        },
        enumerable: true,
        configurable: true
    });
    Stage.prototype.release = function () {
        _super.prototype.release.call(this);
    };
    Stage.prototype.releaseAll = function () {
        for (var i = 0; i < this.uiChildren.length; i++) {
            var ui = this.uiChildren[i];
            ui.releaseAll();
        }
        this.uiChildren = [];
        this.container.removeAllListeners();
        this.container.removeChildren();
        Ticker_1.shared.removeAllListeners();
        DisplayLayoutValidator_1.default.removeAllListeners();
        DisplayLayoutValidator_1.default.removeDepthQueueAll();
    };
    Stage.prototype.resize = function () {
        this.container.hitArea = new PIXI.Rectangle(0, 0, this.width, this.height);
        //this.updateChildren();
    };
    return Stage;
}(DisplayLayoutAbstract_1.DisplayLayoutAbstract));
exports.Stage = Stage;


/***/ }),

/***/ "./src/core/Ticker.ts":
/*!****************************!*\
  !*** ./src/core/Ticker.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tween = __webpack_require__(/*! ../tween/private/index */ "./src/tween/private/index.ts");
/**
 * 心跳，需要UI库初始化后，进行实例调用注册
 */
var Ticker = /** @class */ (function (_super) {
    __extends(Ticker, _super);
    /**
     * 心跳构造函数
     * @param autoStart 是否自动开启心跳，默认false
     */
    function Ticker(autoStart) {
        var _this = _super.call(this) || this;
        _this._disabled = true;
        if (autoStart) {
            _this.disabled = false;
        }
        return _this;
    }
    Object.defineProperty(Ticker.prototype, "disabled", {
        /** 是否关闭心跳.默认false不关闭,关闭后，缓动等组件也将关闭 */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (value == this._disabled) {
                return;
            }
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Ticker.prototype.update = function (deltaTime, lastTime, elapsedMS) {
        if (this._disabled) {
            return;
        }
        tween.update(elapsedMS);
        this.emit("update", deltaTime, lastTime, elapsedMS);
    };
    /**
     * 增加更新监听器
     * @param fn 被调用的函数
     * @param context 当前域
     */
    Ticker.prototype.addUpdateEvent = function (fn, context) {
        return this.on("update", fn, context);
    };
    /**
     * 移除更新监听器
     * @param fn 被调用的函数
     * @param context 当前域
     */
    Ticker.prototype.removeUpdateEvent = function (fn, context) {
        return this.removeListener("update", fn, context);
    };
    return Ticker;
}(PIXI.utils.EventEmitter));
/**
 * Ticker 的实例
 */
exports.shared = new Ticker(true);
exports.tickerShared = exports.shared;
exports.default = exports.tickerShared;


/***/ }),

/***/ "./src/core/plugs/UIBaseDrag.ts":
/*!**************************************!*\
  !*** ./src/core/plugs/UIBaseDrag.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(/*! ../../interaction/Index */ "./src/interaction/Index.ts");
var DisplayObjectAbstract_1 = __webpack_require__(/*! ../DisplayObjectAbstract */ "./src/core/DisplayObjectAbstract.ts");
var Utils_1 = __webpack_require__(/*! ../../utils/Utils */ "./src/utils/Utils.ts");
/**
 *  组件的拖拽操作
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestDrop
 */
var UIBaseDrag = /** @class */ (function () {
    /**
     * 构造函数
     */
    function UIBaseDrag(target) {
        /**
         * 可拖动初始化
         *  @default
         */
        this.dragInitialized = false;
        /**
         * 可被掉落初始化
         * @default
        */
        this.dropInitialized = false;
        /**
         * 位置
         *
         */
        this._dragPosition = new PIXI.Point();
        /**
         * 是否拖动中
         * @default
         */
        this.dragging = false;
        /**
         * 是否设置边界
         * @default false
         */
        this.dragBoundary = false;
        /**
         * 是否启用回弹，在移动到非接收方时，回弹到原始位置
         */
        this.dragBounces = false;
        this.target = target;
        this.target.plugs.set(UIBaseDrag.key, this);
    }
    Object.defineProperty(UIBaseDrag.prototype, "dragDropEventId", {
        /**
         * 当前拖动组件的事件ID，用于处理DragDropController中多组件的选定
         */
        get: function () {
            if (this.target) {
                return this.target.attach.dragDropEventId;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBaseDrag.prototype, "draggable", {
        /**
         * 是否开启拖动
         * @default false
         */
        set: function (value) {
            if (value)
                this.initDraggable();
            else
                this.clearDraggable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBaseDrag.prototype, "dragRestrictAxis", {
        get: function () {
            return this._dragRestrictAxis;
        },
        set: function (value) {
            this._dragRestrictAxis = value;
            if (this.drag) {
                this.drag.dragRestrictAxis = this._dragRestrictAxis;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBaseDrag.prototype, "dragGroup", {
        /**
         * 拖动分组
         */
        get: function () {
            if (this.target) {
                return this.target.attach.dragGroup;
            }
            return "";
        },
        set: function (value) {
            if (this.target)
                this.target.attach.dragGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBaseDrag.prototype, "dragContainer", {
        get: function () {
            return this._dragContainer;
        },
        set: function (value) {
            this._dragContainer = Utils_1.getDisplayObject(value, this.target);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBaseDrag.prototype, "droppable", {
        /**
         * 是否开启拖动掉落接收
         */
        set: function (value) {
            if (value)
                this.initDroppable();
            else
                this.clearDroppable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBaseDrag.prototype, "droppableReparent", {
        get: function () {
            return this._droppableReparent;
        },
        set: function (value) {
            this._droppableReparent = Utils_1.getDisplayObject(value, this.target);
        },
        enumerable: true,
        configurable: true
    });
    UIBaseDrag.prototype.clearDraggable = function () {
        if (this.dragInitialized) {
            this.dragInitialized = false;
            this.drag && this.drag.stopEvent();
        }
    };
    UIBaseDrag.prototype.initDraggable = function () {
        var _this = this;
        if (this.target == undefined) {
            return;
        }
        if (!this.dragInitialized) {
            this.dragInitialized = true;
            var containerStart_1 = new PIXI.Point();
            var stageOffset_1 = new PIXI.Point();
            this._containerStart = containerStart_1;
            this._dragPosition.set(0, 0);
            this.drag = new Index_1.DragEvent(this.target);
            this.drag.dragRestrictAxis = this._dragRestrictAxis;
            this.drag.onDragStart = function (e) {
                if (_this.target == undefined) {
                    return;
                }
                var target = _this.target;
                _this.$targetParent = target.parent;
                if (_this._dragContainer == undefined && !_this.dragBoundary) {
                    _this._dragContainer = _this.target.stage;
                }
                var added = Index_1.DragDropController.add(target, e);
                if (!_this.dragging && added) {
                    target.emit(Index_1.ComponentEvent.DRAG_START_BEFORE, target, e);
                    _this.dragging = true;
                    target.interactive = false;
                    containerStart_1.copyFrom(target.container.position);
                    if (_this._dragContainer) {
                        var c = void 0;
                        if (_this._dragContainer instanceof DisplayObjectAbstract_1.DisplayObjectAbstract) {
                            c = _this._dragContainer;
                        }
                        if (c && target.parent) {
                            //_this.container._recursivePostUpdateTransform();
                            stageOffset_1.set(c.container.worldTransform.tx - target.parent.container.worldTransform.tx, c.container.worldTransform.ty - target.parent.container.worldTransform.ty);
                            c.addChild(target);
                            stageOffset_1.set(stageOffset_1.x / target.parent.scaleX, stageOffset_1.y / target.parent.scaleY);
                        }
                    }
                    else {
                        stageOffset_1.set(0);
                    }
                    target.emit(Index_1.ComponentEvent.DRAG_START, target, e);
                }
            };
            this.drag.onDragMove = function (e, offset) {
                if (_this.target == undefined) {
                    return;
                }
                var target = _this.target;
                if (_this.dragging && target.stage) {
                    var x = containerStart_1.x + (offset.x / target.stage.scaleX) - stageOffset_1.x;
                    var y = containerStart_1.y + (offset.y / target.stage.scaleY) - stageOffset_1.y;
                    if (_this.dragRestrictAxis == "x") {
                        _this._dragPosition.set(x, containerStart_1.y - stageOffset_1.y);
                    }
                    else if (_this.dragRestrictAxis == "y") {
                        _this._dragPosition.set(containerStart_1.x - stageOffset_1.x, y);
                    }
                    else {
                        _this._dragPosition.set(x, y);
                    }
                    if (_this.dragBoundary && target.parent) {
                        _this._dragPosition.x = Math.max(0, _this._dragPosition.x);
                        _this._dragPosition.x = Math.min(_this._dragPosition.x, target.parent.width - target.width);
                        _this._dragPosition.y = Math.max(0, _this._dragPosition.y);
                        _this._dragPosition.y = Math.min(_this._dragPosition.y, target.parent.height - target.height);
                    }
                    target.setPosition(_this._dragPosition.x, _this._dragPosition.y);
                    target.emit(Index_1.ComponentEvent.DRAG_MOVE, target, e);
                }
            };
            this.drag.onDragEnd = function (e) {
                if (_this.dragging) {
                    _this.dragging = false;
                    //如果没有可被放置掉落的容器，0秒后返回原容器
                    setTimeout(function () {
                        if (_this.target == undefined) {
                            return;
                        }
                        //dragBounces
                        var target = _this.target;
                        var parent = _this.$targetParent;
                        target.interactive = true;
                        var item = Index_1.DragDropController.getItem(target);
                        target.emit(Index_1.ComponentEvent.DRAG_END_BEFORE, target, e);
                        if (item && parent) {
                            if (target.parent !== parent && target.parent) {
                                parent.container.toLocal(target.container.position, target.container.parent, _this._dragPosition);
                                parent.addChild(target);
                                target.x = _this._dragPosition.x;
                                target.y = _this._dragPosition.y;
                            }
                            if (_this.dragBounces && _this._containerStart) {
                                target.x = _this._containerStart.x;
                                target.y = _this._containerStart.y;
                            }
                        }
                        target.emit(Index_1.ComponentEvent.DRAG_END, target, e);
                    }, 0);
                }
            };
        }
    };
    UIBaseDrag.prototype.clearDroppable = function () {
        if (this.target == undefined) {
            return;
        }
        var target = this.target;
        if (this.dropInitialized) {
            this.dropInitialized = false;
            target.container.off("mouseup" /* mouseup */, this.onDrop, this);
            target.container.off("touchend" /* touchend */, this.onDrop, this);
        }
    };
    UIBaseDrag.prototype.initDroppable = function () {
        if (this.target == undefined) {
            return;
        }
        var target = this.target;
        if (!this.dropInitialized) {
            this.dropInitialized = true;
            var container = target.container;
            //self = this;
            container.interactive = true;
            container.on("mouseup" /* mouseup */, this.onDrop, this);
            container.on("touchend" /* touchend */, this.onDrop, this);
        }
    };
    UIBaseDrag.prototype.onDrop = function (e) {
        if (this.target == undefined) {
            return;
        }
        var target = this.target;
        var item = Index_1.DragDropController.getEventItem(e, this.dropGroup);
        if (item && item.dragOption.dragging) {
            item.dragOption.dragging = false;
            item.interactive = true;
            var parent_1 = item.dragOption.droppableReparent !== undefined ? item.dragOption.droppableReparent : target;
            if (parent_1) {
                parent_1.container.toLocal(item.container.position, item.container.parent, this._dragPosition);
                item.x = this._dragPosition.x;
                item.y = this._dragPosition.y;
                if (parent_1 != item.parent) {
                    parent_1.addChild(item);
                    parent_1.emit(Index_1.ComponentEvent.DROP_TARGET, parent_1, item, e);
                }
                item.dragOption.$targetParent = parent_1;
            }
            item.emit(Index_1.ComponentEvent.DRAG_TARGET, item, e);
        }
    };
    UIBaseDrag.prototype.load = function () {
    };
    UIBaseDrag.prototype.release = function () {
        this.clearDraggable();
        this.clearDroppable();
        if (this.target) {
            this.target.plugs.delete(UIBaseDrag.key);
            this.target = undefined;
            this.$targetParent = undefined;
            this.dragContainer = undefined;
        }
    };
    UIBaseDrag.key = "UIBaseDrag";
    return UIBaseDrag;
}());
exports.UIBaseDrag = UIBaseDrag;


/***/ }),

/***/ "./src/core/plugs/UIClick.ts":
/*!***********************************!*\
  !*** ./src/core/plugs/UIClick.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(/*! ../../interaction/Index */ "./src/interaction/Index.ts");
/**
 *  组件的单击操作
 *
 */
var UIClick = /** @class */ (function () {
    /**
     * 构造函数
     */
    function UIClick(target) {
        this._target = target;
        this._target.plugs.set(UIClick.key, this);
        this._clickEvent = new Index_1.ClickEvent(target, true);
        ;
    }
    UIClick.prototype.load = function () {
    };
    UIClick.prototype.release = function () {
        this._clickEvent.remove();
        if (this._target) {
            this._target.plugs.delete(UIClick.key);
            this._target = undefined;
        }
    };
    UIClick.key = "UIClick";
    return UIClick;
}());
exports.UIClick = UIClick;


/***/ }),

/***/ "./src/display/Button.ts":
/*!*******************************!*\
  !*** ./src/display/Button.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Label_1 = __webpack_require__(/*! ./Label */ "./src/display/Label.ts");
var Image_1 = __webpack_require__(/*! ./Image */ "./src/display/Image.ts");
var InputBase_1 = __webpack_require__(/*! ./private/InputBase */ "./src/display/private/InputBase.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
/**
 * 按钮
 *
 * @example let button = new gui.Button();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestButton
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        var _this = _super.call(this) || this;
        _this._selectedStr = "";
        _this._oldState = "";
        /** 状态展示 */
        _this.img = new Image_1.Image();
        /** 文字展示 */
        _this.label = new Label_1.Label();
        _this._text = "";
        _this.container.buttonMode = true;
        _this.img.fillMode = "scale";
        _this.img.scale9Grid = [3, 3, 3, 3];
        _this.addChild(_this.img);
        _this.label.sprite.style.fontSize = 18;
        _this.addChild(_this.label);
        _this.on(Index_1.ComponentEvent.STATE_CHANGE, _this.onStateChange, _this);
        return _this;
    }
    Object.defineProperty(Button.prototype, "text", {
        /**
         * 设置按钮的文本内容
         */
        get: function () {
            return this.label.text;
        },
        set: function (value) {
            this._text = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
        this.container.hitArea = new PIXI.Rectangle(0, 0, unscaledWidth, unscaledHeight);
        var img = this.img;
        img.width = unscaledWidth;
        img.height = unscaledHeight;
        if (this.label.width !== unscaledWidth)
            this.label.width = unscaledWidth;
        if (this.label.height !== unscaledHeight)
            this.label.height = unscaledHeight;
        if (this.label.text !== this._text) {
            this.label.text = this._text;
        }
        this.onStateChange(this, this.currentState);
    };
    Button.prototype.release = function () {
        _super.prototype.release.call(this);
        this.offAll(Index_1.ComponentEvent.STATE_CHANGE);
        this.img.release();
        this.label.release();
    };
    Button.prototype.onStateChange = function (label, state) {
        if (this._oldState == state) {
            return;
        }
        this._oldState = state;
        this.img.src = this[state + this._selectedStr];
    };
    return Button;
}(InputBase_1.InputBase));
exports.Button = Button;


/***/ }),

/***/ "./src/display/CheckBox.ts":
/*!*********************************!*\
  !*** ./src/display/CheckBox.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Button_1 = __webpack_require__(/*! ./Button */ "./src/display/Button.ts");
/**
 * 单选\复选框
 *
 * 设置checkGroup后，进行分组。 分组后，可理解为复选框。
 *
 * @example let checkBox = new gui.CheckBox();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestCheckBox
 */
var CheckBox = /** @class */ (function (_super) {
    __extends(CheckBox, _super);
    function CheckBox() {
        var _this = _super.call(this) || this;
        /**
         * 设置值
         */
        _this._value = "";
        /**
         * 设置是否选中
         * */
        _this._checked = false;
        return _this;
    }
    Object.defineProperty(CheckBox.prototype, "selectedValue", {
        /**
         * 获取或设置当前选中的值
         */
        get: function () {
            if (this.checkGroup) {
                return Index_1.InputController.getCheckGroupSelectedValue(this.checkGroup);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckBox.prototype, "checkGroup", {
        /**
         * 设置分组名
         */
        get: function () {
            return this._groupName;
        },
        set: function (value) {
            if (value === undefined) {
                Index_1.InputController.unRegistrerCheckGroup(this);
            }
            if (this._groupName == value) {
                return;
            }
            this._groupName = value; //需要在registrerCheckGroup之前
            Index_1.InputController.registrerCheckGroup(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckBox.prototype, "value", {
        /**
         * 获取设置默认值
         */
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (value === this._value) {
                return;
            }
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckBox.prototype, "checked", {
        /**
         * 设置是否选中
         * @default false
         */
        get: function () {
            return this._checked;
        },
        set: function (value) {
            if (value !== this._checked) {
                if (this.checkGroup)
                    Index_1.InputController.updateCheckGroupSelected(this);
                this._oldState = "";
                if (value) {
                    this._selectedStr = "AndSelected";
                }
                else {
                    this._selectedStr = "";
                }
                this._checked = value;
                this.emit(Index_1.ComponentEvent.CHANGE, this);
                this.onStateChange(this, this.currentState);
            }
        },
        enumerable: true,
        configurable: true
    });
    CheckBox.prototype.onClick = function () {
        _super.prototype.onClick.call(this);
        if (this.checkGroup && this.checked)
            return;
        this.checked = !this.checked;
    };
    CheckBox.prototype.onLabelChange = function (label) {
        label.style.left = this.width;
        label.style.top = this.height - label.height >> 1;
    };
    return CheckBox;
}(Button_1.Button));
exports.CheckBox = CheckBox;


/***/ }),

/***/ "./src/display/Circle.ts":
/*!*******************************!*\
  !*** ./src/display/Circle.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
/**
 * 绘制圆形
 *
 * 不设置 lineWidth 或 color 圆形不可见
 *
 * @example let circle = new gui.Circle();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestCircle
 */
var Circle = /** @class */ (function (_super) {
    __extends(Circle, _super);
    function Circle() {
        var _this = _super.call(this) || this;
        /**
         * 半径
         */
        _this._radius = 0;
        /**
         * 线条颜色
         */
        _this._lineColor = 0;
        /**
         * 线条粗细
         */
        _this._lineWidth = 0;
        _this.graphics = new PIXI.Graphics();
        _this.container.addChild(_this.graphics);
        return _this;
    }
    /** 可以支持遮罩的组件 */
    Circle.prototype.maskSprite = function () {
        return this.graphics;
    };
    Object.defineProperty(Circle.prototype, "radius", {
        get: function () {
            return this._radius;
        },
        set: function (value) {
            this._radius = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "lineColor", {
        get: function () {
            return this._lineColor;
        },
        set: function (value) {
            this._lineColor = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "lineWidth", {
        get: function () {
            return this._lineWidth;
        },
        set: function (value) {
            this._lineWidth = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "anchorX", {
        get: function () {
            return this._anchorX;
        },
        set: function (value) {
            this._anchorX = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Circle.prototype, "anchorY", {
        get: function () {
            return this._anchorY;
        },
        set: function (value) {
            this._anchorY = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Circle.prototype.drawCircle = function () {
        var graphics = this.graphics;
        graphics.clear();
        graphics.lineStyle(this._lineWidth, this._lineColor);
        if (this._color !== undefined)
            graphics.beginFill(this._color);
        graphics.drawCircle(this._anchorX || 0, this._anchorY || 0, this._radius);
        graphics.endFill();
    };
    Circle.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.graphics.parent) {
            this.graphics.parent.removeChild(this.graphics).destroy();
        }
    };
    Circle.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        this.drawCircle();
        _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
    };
    return Circle;
}(DisplayObject_1.DisplayObject));
exports.Circle = Circle;


/***/ }),

/***/ "./src/display/ConnectLine.ts":
/*!************************************!*\
  !*** ./src/display/ConnectLine.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var Tween_1 = __webpack_require__(/*! ../tween/Tween */ "./src/tween/Tween.ts");
exports.play = Symbol("play");
/**
 * 连线组件
 *
 *
 * @example let connectLine = new gui.ConnectLine();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestConnectLine
 */
var ConnectLine = /** @class */ (function (_super) {
    __extends(ConnectLine, _super);
    function ConnectLine() {
        var _this = _super.call(this) || this;
        _this._lastStartPos = { x: NaN, y: NaN };
        _this._lastEndPos = { x: NaN, y: NaN };
        _this._play = 1;
        _this._autoPlay = true;
        _this._sourcePostion = [0, 0];
        _this._targetPostion = [0, 0];
        /**
         * 线条颜色
         */
        _this._lineColor = 0;
        /**
         * 线条粗细
         */
        _this._lineWidth = 1;
        _this._isAnimation = false;
        _this.line = new PIXI.Graphics();
        _this.container.addChild(_this.line);
        return _this;
    }
    Object.defineProperty(ConnectLine.prototype, "play", {
        /**
         *  触发画线操作
         *
         *  属性 play = 1 触发画线，线条从source->target.
         *  属性 play = 2 触发画线，线条从target->source.
         */
        get: function () {
            return this._play;
        },
        set: function (value) {
            this.$values[exports.play] = true;
            this._play = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "autoPlay", {
        /**
         *  默认 autoPlay = true
         *
         *  autoPlay = true时，组件在设置source,target,sourcePostion,targetPostion后自动触发画线，线条从source->target.
         *
         *  autoPlay = false时，设置source,target,sourcePostion,targetPostion后不会触发画线，需调用 play.
         */
        get: function () {
            return this._autoPlay;
        },
        set: function (value) {
            this._autoPlay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "source", {
        /**
         * 设置源显示对象
         */
        get: function () {
            return this._source;
        },
        set: function (value) {
            if (this._source === Utils_1.getDisplayObject(value, this)) {
                return;
            }
            this._source = Utils_1.getDisplayObject(value, this);
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "sourcePostion", {
        /**
         * 设置源显示对象位置
         */
        get: function () {
            return this._sourcePostion;
        },
        set: function (value) {
            if (this._sourcePostion === value) {
                return;
            }
            this._sourcePostion = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "target", {
        /**
         * 设置目标显示对象
         */
        get: function () {
            return this._target;
        },
        set: function (value) {
            if (this._target === Utils_1.getDisplayObject(value, this)) {
                return;
            }
            this._target = Utils_1.getDisplayObject(value, this);
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "targetPostion", {
        /**
         * 设置目标显示对象位置
         */
        get: function () {
            return this._targetPostion;
        },
        set: function (value) {
            if (this._targetPostion === value) {
                return;
            }
            this._targetPostion = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "lineColor", {
        get: function () {
            return this._lineColor;
        },
        set: function (value) {
            if (this._lineColor === value) {
                return;
            }
            this._lineColor = value;
            this.invalidateProperties();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "lineWidth", {
        get: function () {
            return this._lineWidth;
        },
        set: function (value) {
            if (this._lineWidth === value) {
                return;
            }
            this._lineWidth = value;
            this.invalidateProperties();
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectLine.prototype, "isAnimation", {
        /**
         * 线条位置改变时，是否有动画
         */
        get: function () {
            return this._isAnimation;
        },
        set: function (value) {
            if (this._isAnimation === value) {
                return;
            }
            this._isAnimation = value;
        },
        enumerable: true,
        configurable: true
    });
    ConnectLine.prototype.commitProperties = function () {
        this.line.lineStyle(this.lineWidth, this.lineColor, this.alpha);
    };
    ConnectLine.prototype.getLocalPos = function (_linePostion, display) {
        var pos = { x: 0, y: 0 };
        if (display) {
            if (display.container.position.x === 0 && display.container.position.y === 0) {
                display.validateNow();
            }
            var startPos = this.container.parent.toLocal(display.container.position, display.container.parent);
            switch (_linePostion) {
                case 'leftTop':
                    pos = Utils_1.pointPlus(startPos, { x: 0, y: 0 });
                    break;
                case 'leftCenter':
                    pos = Utils_1.pointPlus(startPos, { x: 0, y: display.height >> 1 });
                    break;
                case 'leftBottom':
                    pos = Utils_1.pointPlus(startPos, { x: 0, y: display.height });
                    break;
                case 'centerTop':
                    pos = Utils_1.pointPlus(startPos, { x: display.width >> 1, y: 0 });
                    break;
                case 'center':
                    pos = Utils_1.pointPlus(startPos, { x: display.width >> 1, y: display.height >> 1 });
                    break;
                case 'centerBottom':
                    pos = Utils_1.pointPlus(startPos, { x: display.width >> 1, y: display.height });
                    break;
                case 'rightTop':
                    pos = Utils_1.pointPlus(startPos, { x: display.width, y: 0 });
                    break;
                case "rightCenter":
                    pos = Utils_1.pointPlus(startPos, { x: display.width, y: display.height >> 1 });
                    break;
                case 'rightBottom':
                    pos = Utils_1.pointPlus(startPos, { x: display.width, y: display.height });
                    break;
                default:
                    pos.x = startPos.x + _linePostion[0];
                    pos.y = startPos.y + _linePostion[1];
            }
        }
        else {
            if (Array.isArray(_linePostion)) {
                pos.x = _linePostion[0];
                pos.y = _linePostion[1];
            }
        }
        return pos;
    };
    ConnectLine.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        var _a = this, _source = _a._source, _target = _a._target, _sourcePostion = _a._sourcePostion, _targetPostion = _a._targetPostion, _lastStartPos = _a._lastStartPos, _lastEndPos = _a._lastEndPos, line = _a.line;
        var startPos = this.getLocalPos(_sourcePostion, _source);
        var endPos = this.getLocalPos(_targetPostion, _target);
        if (_lastStartPos.x !== startPos.x ||
            _lastStartPos.y !== startPos.y ||
            _lastEndPos.x !== endPos.x ||
            _lastEndPos.y !== endPos.y) {
            this._lastStartPos = startPos;
            this._lastEndPos = endPos;
            if (this._autoPlay) {
                this.animation();
            }
        }
        if (this.$values[exports.play] === true && !this._autoPlay) {
            this.$values[exports.play] = false;
            this.animation();
        }
        //super.updateDisplayList(unscaledWidth, unscaledHeight);     
    };
    ConnectLine.prototype.animation = function () {
        var _this = this;
        var yoyo = this._play;
        var line = this.line;
        var startPos = yoyo === 1 ? this._lastStartPos : this._lastEndPos;
        var endPos = yoyo === 1 ? this._lastEndPos : this._lastStartPos;
        line.removeChildren();
        if (!this.isAnimation) {
            line.moveTo(startPos.x, startPos.y);
            line.lineTo(endPos.x, endPos.y);
            this.emit(Index_1.ComponentEvent.COMPLETE, this);
            return;
        }
        var distance = Utils_1.pointDistance(startPos, endPos);
        var lastPos = { x: startPos.x, y: startPos.y };
        var from = { dt: 0 };
        var to = { dt: distance };
        var tw = new Tween_1.Tween(from)
            .to(to, 500)
            .on(Tween_1.Tween.Event.update, function (obj) {
            var dt = Math.ceil(obj.dt);
            var x = (dt * (endPos.x - startPos.x)) / distance + startPos.x;
            var y = (dt * (endPos.y - startPos.y)) / distance + startPos.y;
            line.moveTo(lastPos.x, lastPos.y);
            line.lineTo(x, y);
            lastPos.x = x;
            lastPos.y = y;
        })
            .once(Tween_1.Tween.Event.complete, function (obj) {
            tw.removeAllListeners();
            tw.release();
            _this.emit(Index_1.ComponentEvent.COMPLETE, _this);
        })
            .start();
    };
    Object.defineProperty(ConnectLine.prototype, "isClear", {
        set: function (value) {
            this.clear();
        },
        enumerable: true,
        configurable: true
    });
    ConnectLine.prototype.clear = function () {
        var line = this.line;
        line.clear();
        this.commitProperties();
    };
    ConnectLine.prototype.release = function () {
        _super.prototype.release.call(this);
        this._source = undefined;
        this._target = undefined;
        var line = this.line;
        line.clear();
        if (line.parent) {
            line.parent.removeChild(line).destroy();
        }
        this.offAll(Index_1.ComponentEvent.CHANGE);
    };
    return ConnectLine;
}(DisplayObject_1.DisplayObject));
exports.ConnectLine = ConnectLine;


/***/ }),

/***/ "./src/display/Container.ts":
/*!**********************************!*\
  !*** ./src/display/Container.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
/**
 * 基础容器
 *
 * 设置checkGroup后，进行分组。 分组后，可理解为复选框。
 *
 * @example let container = new gui.Container();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestContainer
 */
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container() {
        var _this = _super.call(this) || this;
        _this.isContainer = true;
        return _this;
    }
    /**
     * 确定指定显示对象是 DisplayObjectContainer 实例的子项或该实例本身。搜索包括整个显示列表（其中包括此 DisplayObjectContainer 实例）。
     * 孙项、曾孙项等，每项都返回 true。
     * @param child 要测试的子对象。
     * @returns 如果 child 对象是 DisplayObjectContainer 的子项或容器本身，则为 true；否则为 false。
     */
    Container.prototype.contains = function (child) {
        while (child) {
            if (child == this) {
                return true;
            }
            if (child.parent instanceof DisplayObject_1.DisplayObject) {
                child = child.parent;
            }
            return false;
        }
        return false;
    };
    return Container;
}(DisplayObject_1.DisplayObject));
exports.Container = Container;


/***/ }),

/***/ "./src/display/FollowLine.ts":
/*!***********************************!*\
  !*** ./src/display/FollowLine.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var tempLocalBounds = new PIXI.Rectangle();
/** 验证是否触发的距离 */
var POS_DISTANCE = 7;
/** 优化曲率，小于这个弧度视为直线，把当前点优化掉 */
var MAX_ARC = 0.09; // 5度
/** 点数字转换成字符的数位 */
var DIGIT = 90;
/** 字符列表 ascii */
var NUMBER_TO_STR = "$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
/** 压缩比例，有损压缩 */
var COMPRESS_RATE = 2;
/** 最大宽度 */
var MAX_WIDTH = 1500;
/** 为了把点都变成正数所用 */
var POSITIVE = MAX_WIDTH / 2;
/** 线条最大数量 */
var MAX_LINES = 100;
var TeacherDrawColor = 0xcd0032;
var StudentDrawColor = 0x3200cd;
/** 将一个x，y坐标转换成3个字符，宽高不能超过MAX_WIDTH */
function getStrFromPos(x, y) {
    x = Math.min(Math.max(0, x), MAX_WIDTH);
    y = Math.min(Math.max(0, y), MAX_WIDTH);
    // 有损压缩
    var compX = Math.floor(x / COMPRESS_RATE);
    var compY = Math.floor(y / COMPRESS_RATE);
    var n1 = compX % DIGIT;
    var n2 = compY % DIGIT;
    var n3 = Math.floor(compX / DIGIT) * 10 + Math.floor(compY / DIGIT);
    return NUMBER_TO_STR[n1] + NUMBER_TO_STR[n2] + NUMBER_TO_STR[n3];
}
/** 将字符串转换成坐标数字列表 */
function getVecListFromStr(str, from, to) {
    var list = [];
    for (var index = from; index < to; index += 3) {
        var n1 = str.charCodeAt(index) - 36;
        var n2 = str.charCodeAt(index + 1) - 36;
        var n3 = str.charCodeAt(index + 2) - 36;
        var n12 = Math.floor(n3 / 10);
        var n22 = n3 % 10;
        var compX = n1 + n12 * DIGIT;
        var compY = n2 + n22 * DIGIT;
        var realX = compX * COMPRESS_RATE;
        var realY = compY * COMPRESS_RATE;
        list.push(realX);
        list.push(realY);
    }
    return list;
}
/**
 * 跟随鼠标或触摸绘制线条
 *
 * @example let graphics = new gui.FollowLine();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTimeLine
 */
var FollowLine = /** @class */ (function (_super) {
    __extends(FollowLine, _super);
    function FollowLine(bindDisplay) {
        var _this = _super.call(this) || this;
        /** 触摸的ID */
        _this._touchId = -1;
        /** 位置缓存，记录画线时候每一个点，最后画完优化 */
        _this._posCache = [];
        /** 保存已画线的key */
        _this._lineKeys = [];
        /** 开始偏移量 */
        _this.startOffset = new PIXI.Point();
        /**
         * 由老师触发的划线索引
         */
        _this._curLineIndex = 0;
        /**
         * 需要处理的消息列表
         */
        _this._messageCache = [];
        /**
         * 线条颜色
         */
        _this._lineColor = 0x000000;
        /**
         * 是否暂停，一些特殊情况，如拖拽时，可暂停
         */
        _this._isPause = false;
        /** 是否擦除中 */
        _this._isErasing = false;
        /** 角色状态 */
        _this._role = "T" /* teacher */;
        _this._lastPos = new PIXI.Point();
        _this._mouseOffset = new PIXI.Point();
        _this._lines = new Map();
        _this.container.interactiveChildren = false;
        if (bindDisplay) {
            _this.clickEvent = new Index_1.ClickEvent(bindDisplay, true);
        }
        else {
            _this.clickEvent = new Index_1.ClickEvent(_this, true);
        }
        _this.clickEvent.isOpenLocalPoint = true;
        return _this;
    }
    Object.defineProperty(FollowLine.prototype, "lineColor", {
        get: function () {
            return this._lineColor;
        },
        set: function (value) {
            this._lineColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FollowLine.prototype, "isPause", {
        get: function () {
            return this._isPause;
        },
        set: function (value) {
            this._isPause = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FollowLine.prototype, "isErasing", {
        get: function () {
            return this._isErasing;
        },
        set: function (value) {
            if (this._isErasing === value) {
                return;
            }
            this._isErasing = value;
            if (value) {
                this.clickEvent.getTarget().container.cursor = "grab";
            }
            else {
                this.clickEvent.getTarget().container.cursor = "auto";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FollowLine.prototype, "role", {
        get: function () {
            return this._role;
        },
        set: function (value) {
            this._role = value;
            if (value == "T" /* teacher */) {
                this._lineColor = TeacherDrawColor;
            }
            else {
                this._lineColor = StudentDrawColor;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * 提交属性，子类在调用完invalidateProperties()方法后，应覆盖此方法以应用属性
     */
    FollowLine.prototype.commitProperties = function () {
        this.onMessage();
        this.getCurLineByPos();
    };
    /**
     * 更新显示列表,子类重写，实现布局
     */
    FollowLine.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
        this.container.hitArea = new PIXI.Rectangle(0, 0, this.width, this.height);
    };
    FollowLine.prototype.$onInit = function () {
        //由于绑定的可能非当前显示对象，所以此处不可以使用this.on("xxxx")
        this.clickEvent.getTarget().on(Index_1.TouchMouseEvent.onPress, this.onPress, this);
        this.clickEvent.getTarget().on(Index_1.TouchMouseEvent.onMove, this.onMove, this);
    };
    FollowLine.prototype.$onRelease = function () {
        this.clickEvent.getTarget().off(Index_1.TouchMouseEvent.onPress, this.onPress, this);
        this.clickEvent.getTarget().off(Index_1.TouchMouseEvent.onMove, this.onMove, this);
        this.clickEvent.remove();
        this.clear();
    };
    FollowLine.prototype.onMessage = function () {
        var _messageCache = this._messageCache;
        if (_messageCache.length > 0) {
            var message = void 0;
            var data = void 0;
            var role = void 0;
            var operate = void 0;
            var lineId = void 0;
            while (_messageCache.length > 0) {
                message = _messageCache.pop();
                operate = message.charAt(0);
                var messageIndex = message.indexOf('|');
                role = message.charAt(1);
                lineId = message.substr(2, messageIndex - 2);
                switch (operate) {
                    case "1" /* add */:
                        data = message.substr(messageIndex + 1);
                        this.drawLine(lineId, data, 0, data.length, role);
                        break;
                    case "2" /* remove */:
                        this.removeLine(role + lineId);
                        break;
                    case "3" /* clear */:
                        this.clear();
                        break;
                }
            }
        }
    };
    FollowLine.prototype.onPress = function (e, thisObj, isPress) {
        if (this._isPause) {
            return;
        }
        e.stopPropagation();
        if (isPress) {
            if (this.parent === undefined)
                return;
            if (this._isErasing)
                return;
            if (this._touchId !== -1)
                return;
            this._touchId = e.data.identifier;
            var curLocal = this.container.toLocal(e.local, thisObj.container);
            this.startOffset.set(Math.floor(e.local.x - curLocal.x), Math.floor(e.local.y - curLocal.y));
            this._lastPos.copyFrom(curLocal);
            this._posCache = [this._lastPos.clone()];
            this._curLineIndex++;
        }
        else {
            // 清除操作
            if (this._isErasing && this._eraseLine) {
                var name_1 = this._eraseLine.name;
                this.removeLine(name_1);
                this.emitMsg("2" /* remove */, name_1.charAt(0), name_1.substr(1));
                this._eraseLine = undefined;
                return;
            }
            if (this._touchId === -1 || this._touchId != e.data.identifier)
                return;
            this._touchId = -1;
            if (this._posCache.length == 1) { //划线失败
                console.log('gui -> 移动距离过短，画线失败 >' + POS_DISTANCE);
                this._curLineIndex--;
                this._posCache.pop();
                return;
            }
            this.emitMsg("1" /* add */, this.role, this._curLineIndex.toString(), this.getDataStrByPosCache());
        }
    };
    FollowLine.prototype.onMove = function (e) {
        e.stopPropagation();
        this._mouseOffset.set(Math.floor(e.local.x) - this.startOffset.x, Math.floor(e.local.y) - this.startOffset.y);
        if (this._isErasing) {
            if (this._role == "T" /* teacher */) {
                this.invalidateProperties();
            }
            return;
        }
        if (this._touchId === -1 || !this._lastPos || this._touchId != e.data.identifier)
            return;
        var _a = this, _lastPos = _a._lastPos, _posCache = _a._posCache;
        var len = Utils_1.pointDistance(_lastPos, this._mouseOffset);
        if (len < POS_DISTANCE) {
            return;
        }
        var brush = this.getGraphics(this._curLineIndex.toString(), this.role);
        brush.moveTo(_lastPos.x, _lastPos.y);
        brush.lineTo(this._mouseOffset.x, this._mouseOffset.y);
        _lastPos.copyFrom(this._mouseOffset);
        _posCache.push(_lastPos.clone());
    };
    /**
     * 发送操作事件
     * @param operate   1添加 2删除 3重置
     * @param role  Role
     * @param lineIndex 线段 ID
     */
    FollowLine.prototype.emitMsg = function (operate, role, lineId, data) {
        if (data === void 0) { data = ''; }
        var dataStr = operate + role + lineId + '|' + data;
        this.emit(Index_1.ComponentEvent.COMPLETE, this, dataStr);
    };
    /**
     *
     * @param name (name = role + lineId)
     * @param role
     */
    FollowLine.prototype.getGraphics = function (name, role) {
        var key = role + name;
        if (this._lines.has(key)) {
            return this._lines.get(key);
        }
        if (this._lines.size > MAX_LINES) {
            this.removeLine(this._lineKeys.shift());
        }
        var graphics = new PIXI.Graphics();
        graphics.interactive = false;
        graphics.interactiveChildren = false;
        graphics.name = key;
        this.container.addChild(graphics);
        this._lineKeys.push(key);
        this._lines.set(key, graphics);
        graphics.lineStyle(3, this._lineColor);
        return graphics;
    };
    FollowLine.prototype.getCurLineByPos = function () {
        var _this = this;
        var _a = this, _lines = _a._lines, _mouseOffset = _a._mouseOffset;
        if (this._eraseLine) {
            this._eraseLine.tint = 0xFFFFFF;
            this._eraseLine = undefined;
        }
        if (!this.isErasing) {
            return;
        }
        var lastDistance = 10000;
        _lines.forEach(function (value) {
            value.getLocalBounds(tempLocalBounds);
            if (tempLocalBounds.contains(_mouseOffset.x, _mouseOffset.y)) {
                var distance = Utils_1.pointDistance(_mouseOffset, { x: tempLocalBounds.x + tempLocalBounds.width * 0.5, y: tempLocalBounds.y + tempLocalBounds.height * 0.5 });
                if (distance < lastDistance) {
                    lastDistance = distance;
                    _this._eraseLine = value;
                }
            }
        });
        if (this._eraseLine) {
            this._eraseLine.tint = 0x000000;
        }
    };
    FollowLine.prototype.getDataStrByPosCache = function () {
        var _posCache = this._posCache;
        if (_posCache.length == 0) {
            return;
        }
        // 稀疏位置点，通过曲率
        var finalX = [_posCache[0].x];
        var finalY = [_posCache[0].y];
        var lastLastPos = _posCache[0];
        var lastPos = _posCache[1];
        var sumAngle = 0;
        for (var index = 2; index < _posCache.length; index++) {
            var pos = _posCache[index];
            var pos1 = Utils_1.pointSub(lastPos, lastLastPos);
            var pos2 = Utils_1.pointSub(pos, lastPos);
            var angle = Utils_1.pointSignAngle(pos1, pos2);
            if (angle > MAX_ARC || angle < -MAX_ARC || sumAngle > MAX_ARC || sumAngle < -MAX_ARC) {
                finalX.push(lastPos.x);
                finalY.push(lastPos.y);
                sumAngle = 0;
            }
            else {
                sumAngle += angle;
            }
            lastLastPos = lastPos;
            lastPos = pos;
        }
        finalX.push(_posCache[_posCache.length - 1].x);
        finalY.push(_posCache[_posCache.length - 1].y);
        var finalStrList = [];
        for (var index = 0; index < finalX.length; index++) {
            var x = finalX[index] + POSITIVE;
            var y = finalY[index] + POSITIVE;
            var str = getStrFromPos(x, y);
            finalStrList.push(str);
        }
        var finalStr = finalStrList.join('');
        return finalStr;
    };
    FollowLine.prototype.drawLine = function (drawId, data, from, to, role) {
        var graphics = this.getGraphics(drawId, role);
        var posList = getVecListFromStr(data, from, to);
        this.draw(graphics, posList);
    };
    FollowLine.prototype.draw = function (graphics, posList) {
        var lastX = posList[0] - POSITIVE;
        var lastY = posList[1] - POSITIVE;
        graphics.moveTo(lastX, lastY);
        // 利用贝塞尔将线平滑化
        var realList = [];
        for (var index = 2; index < posList.length; index += 2) {
            var x = posList[index] - POSITIVE;
            var y = posList[index + 1] - POSITIVE;
            var halfX = lastX + (x - lastX) * 0.5;
            var halfY = lastY + (y - lastY) * 0.5;
            realList.push(halfX, halfY, x, y);
            lastX = x;
            lastY = y;
        }
        graphics.lineTo(realList[0], realList[1]);
        for (var index = 2; index < realList.length - 2; index += 4) {
            var cx = realList[index];
            var cy = realList[index + 1];
            var x = realList[index + 2];
            var y = realList[index + 3];
            graphics.quadraticCurveTo(cx, cy, x, y);
        }
        graphics.lineTo(realList[realList.length - 2], realList[realList.length - 1]);
    };
    FollowLine.prototype.removeLine = function (key) {
        var delKeyIndex = this._lineKeys.indexOf(key);
        if (delKeyIndex !== -1) {
            this._lineKeys.splice(delKeyIndex, 1);
        }
        var line = this._lines.get(key);
        if (line) {
            this._lines.delete(key);
            if (line.parent) {
                line.parent.removeChild(line);
                line.destroy();
            }
        }
    };
    FollowLine.prototype.clear = function () {
        this._lines.forEach(function (value, key) {
            if (value.parent) {
                value.parent.removeChild(value).destroy();
            }
        });
        this._lines.clear();
        this._curLineIndex = 0;
        this._posCache = [];
        this._lineKeys = [];
    };
    FollowLine.prototype.setData = function (data) {
        if (typeof data === 'string') {
            this._messageCache.push(data);
        }
        else {
            this._messageCache = this._messageCache.concat(data);
        }
        this.invalidateProperties();
    };
    FollowLine.prototype.reset = function () {
        this.emitMsg("3" /* clear */, this.role, "");
        this.clear();
    };
    return FollowLine;
}(DisplayObject_1.DisplayObject));
exports.FollowLine = FollowLine;


/***/ }),

/***/ "./src/display/Graphics.ts":
/*!*********************************!*\
  !*** ./src/display/Graphics.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
/**
 * 矢量绘制
 *
 * @example let graphics = new gui.Graphics();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTimeLine
 */
var Graphics = /** @class */ (function (_super) {
    __extends(Graphics, _super);
    function Graphics(geometry) {
        var _this = _super.call(this) || this;
        _this.graphics = new PIXI.Graphics(geometry);
        _this.container.addChild(_this.graphics);
        return _this;
    }
    return Graphics;
}(DisplayObject_1.DisplayObject));
exports.Graphics = Graphics;


/***/ }),

/***/ "./src/display/Image.ts":
/*!******************************!*\
  !*** ./src/display/Image.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
/**
 * 图片
 *
 * @example let image = new gui.Image();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestImage
 */
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        var _this = _super.call(this) || this;
        /**
         * 填充模式
         * 设置scale后，可设置scale9Grid进行调整缩放区域
         */
        _this._fillMode = "no-repeat";
        return _this;
    }
    /** 可以支持遮罩的组件 */
    Image.prototype.maskSprite = function () {
        return this._sprite;
    };
    Object.defineProperty(Image.prototype, "src", {
        get: function () {
            return this._src;
        },
        set: function (value) {
            this._src = value;
            this.srcSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "scale9Grid", {
        get: function () {
            return this._scale9Grid;
        },
        set: function (value) {
            this._scale9Grid = value;
            this.scale9GridSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "fillMode", {
        get: function () {
            return this._fillMode;
        },
        set: function (value) {
            this._fillMode = value;
            this._source = undefined;
            this.srcSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "anchorX", {
        get: function () {
            return this._anchorX;
        },
        set: function (value) {
            this._anchorX = value;
            this.anchorSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "anchorY", {
        get: function () {
            return this._anchorY;
        },
        set: function (value) {
            this._anchorY = value;
            this.anchorSystem();
        },
        enumerable: true,
        configurable: true
    });
    Image.prototype.release = function () {
        _super.prototype.release.call(this);
        this.offAll(Index_1.ComponentEvent.COMPLETE);
        if (this._sprite && this._sprite.parent) {
            this._sprite.parent.removeChild(this._sprite).destroy();
        }
    };
    /**
     * @private
     * 测量组件尺寸
     */
    Image.prototype.measure = function () {
    };
    Image.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        if (unscaledWidth === 0 && unscaledHeight === 0) {
            return;
        }
        if (this._sprite) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            this.scale9GridSystem();
            this._sprite.width = unscaledWidth;
            this._sprite.height = unscaledHeight;
            this.anchorSystem();
        }
    };
    Image.prototype.srcSystem = function () {
        var _this = this;
        var _a = this, container = _a.container, src = _a.src;
        if (src === undefined && this._sprite && this._sprite.parent) {
            container.removeChild(this._sprite);
            this._sprite.destroy();
        }
        if (this._texture) {
            this._texture.removeAllListeners();
        }
        if (src !== this._source) {
            this._source = src;
            var texture_1 = this._texture = Utils_1.getTexture(src);
            if (texture_1 === undefined) {
                return;
            }
            if (texture_1.frame.width > 1 && texture_1.frame.height > 1) {
                this.setMeasuredSize(texture_1.frame.width, texture_1.frame.height);
            }
            var invalidateDisplayList_1 = false;
            texture_1.once("update", function () {
                invalidateDisplayList_1 = true;
                _this.setMeasuredSize(texture_1.frame.width, texture_1.frame.height);
                _this.invalidateSize();
                _this.emit(Index_1.ComponentEvent.COMPLETE, _this);
            }, this);
            var sprite = this._sprite;
            if (!PIXI.utils.isWebGLSupported()) {
                sprite = PIXI.Sprite.from(texture_1);
            }
            else {
                if (this.fillMode === "no-repeat") {
                    if (sprite instanceof PIXI.Sprite) {
                        sprite.texture = texture_1;
                    }
                    else {
                        sprite = new PIXI.Sprite(texture_1);
                    }
                }
                else if (this.fillMode === "repeat") {
                    if (sprite instanceof PIXI.TilingSprite) {
                        sprite.texture = texture_1;
                    }
                    else {
                        sprite = new PIXI.TilingSprite(texture_1);
                    }
                }
                else if (this.fillMode === "scale") {
                    if (sprite instanceof PIXI.NineSlicePlane) {
                        sprite.texture = texture_1;
                    }
                    else {
                        sprite = new PIXI.NineSlicePlane(texture_1);
                    }
                }
            }
            if (sprite && sprite.parent == undefined) {
                this._sprite = container.addChild(sprite);
            }
            if (!invalidateDisplayList_1) {
                this.invalidateDisplayList();
                this.invalidateParentLayout();
            }
        }
    };
    Image.prototype.scale9GridSystem = function () {
        if (this._sprite === undefined || this.scale9Grid === undefined) {
            return;
        }
        var sprite = this._sprite;
        var scale9Grid = this.scale9Grid;
        if (sprite instanceof PIXI.TilingSprite) {
            sprite.tileScale.set(scale9Grid[0], scale9Grid[1]);
            sprite.tilePosition.set(scale9Grid[2], scale9Grid[3]);
        }
        else if (sprite instanceof PIXI.NineSlicePlane) {
            if (scale9Grid[0] !== undefined) {
                sprite.leftWidth = scale9Grid[0];
            }
            if (scale9Grid[1] !== undefined) {
                sprite.rightWidth = scale9Grid[1];
            }
            if (scale9Grid[2] !== undefined) {
                sprite.topHeight = scale9Grid[2];
            }
            if (scale9Grid[3] !== undefined) {
                sprite.bottomHeight = scale9Grid[3];
            }
        }
    };
    Image.prototype.anchorSystem = function () {
        if (this._sprite === undefined) {
            return;
        }
        var sprite = this._sprite;
        if (this.anchorX) {
            sprite.x = -Math.floor(sprite.width * this.anchorX);
        }
        if (this.anchorY) {
            sprite.y = -Math.floor(sprite.height * this.anchorY);
        }
    };
    return Image;
}(DisplayObject_1.DisplayObject));
exports.Image = Image;


/***/ }),

/***/ "./src/display/Label.ts":
/*!******************************!*\
  !*** ./src/display/Label.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var UIKeys = __webpack_require__(/*! ../core/DisplayLayoutKeys */ "./src/core/DisplayLayoutKeys.ts");
/**
 * 文本
 *
 * 中文换行特殊处理 xxxx.style.breakWords = true;
 *
 * 当文本容器设置宽高后，文字默认会根据文本容器宽高居中.
 *
 * 当文本容器设置宽高后，可通过 style.textAlign 进行文字位置调整
 *
 * @example let label = new gui.Label();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestLabel
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(text) {
        if (text === void 0) { text = ""; }
        var _this = _super.call(this) || this;
        _this.sprite = new PIXI.Text(text, { breakWords: true, fill: "#ffffff" });
        _this.container.addChild(_this.sprite);
        return _this;
    }
    Object.defineProperty(Label.prototype, "resolution", {
        /**
         * 设置分辨力比例
         */
        get: function () {
            return this.sprite.resolution;
        },
        set: function (value) {
            this.sprite.resolution = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "text", {
        /**
         * 文本内容
         */
        get: function () {
            return this.sprite.text;
        },
        set: function (value) {
            this.sprite.text = value;
            this.invalidateSize();
            this.invalidateDisplayList();
            this.emit(Index_1.ComponentEvent.CHANGE, this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "fontCssStyle", {
        set: function (value) {
            if (value.color) {
                value.fill = value.color;
            }
            value.breakWords = true;
            this.sprite.style = value;
            this.invalidateSize();
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Label.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
        var values = this.$values;
        if (!isNaN(values[UIKeys.explicitWidth])) {
            switch (this.style.textAlign) {
                case "left":
                    this.sprite.x = 0;
                    break;
                case "right":
                    this.sprite.x = values[UIKeys.explicitWidth] - this.sprite.width;
                    break;
                case "center":
                    this.sprite.x = values[UIKeys.explicitWidth] - this.sprite.width >> 1;
                    break;
            }
        }
        if (!isNaN(values[UIKeys.explicitHeight])) {
            this.sprite.y = values[UIKeys.explicitHeight] - this.sprite.height >> 1;
        }
    };
    Label.prototype.release = function () {
        _super.prototype.release.call(this);
        var sprite = this.sprite;
        if (sprite && sprite.parent) {
            sprite.parent.removeChild(sprite).destroy();
        }
        this.offAll(Index_1.ComponentEvent.CHANGE);
    };
    return Label;
}(DisplayObject_1.DisplayObject));
exports.Label = Label;


/***/ }),

/***/ "./src/display/Rect.ts":
/*!*****************************!*\
  !*** ./src/display/Rect.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
/**
 * 绘制矩形或圆角矩形
 *
 * 不设置 lineWidth 或 color 矩形不可见
 *
 * @example let rect = new gui.Rect();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestRect
 */
var Rect = /** @class */ (function (_super) {
    __extends(Rect, _super);
    function Rect() {
        var _this = _super.call(this) || this;
        /**
         * 圆角
         */
        _this._radius = 0;
        /**
         * 线条颜色
         */
        _this._lineColor = 0;
        /**
         * 线条粗细
         */
        _this._lineWidth = 0;
        _this.graphics = new PIXI.Graphics();
        _this.container.addChild(_this.graphics);
        return _this;
    }
    /** 可以支持遮罩的组件 */
    Rect.prototype.maskSprite = function () {
        return this.graphics;
    };
    Object.defineProperty(Rect.prototype, "radius", {
        get: function () {
            return this._radius;
        },
        set: function (value) {
            this._radius = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "lineColor", {
        get: function () {
            return this._lineColor;
        },
        set: function (value) {
            this._lineColor = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "lineWidth", {
        get: function () {
            return this._lineWidth;
        },
        set: function (value) {
            this._lineWidth = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "anchorX", {
        get: function () {
            return this._anchorX;
        },
        set: function (value) {
            this._anchorX = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "anchorY", {
        get: function () {
            return this._anchorY;
        },
        set: function (value) {
            this._anchorY = value;
            this.invalidateDisplayList();
        },
        enumerable: true,
        configurable: true
    });
    Rect.prototype.drawRoundedRect = function () {
        var graphics = this.graphics;
        graphics.clear();
        if (this._radius >= (this.width / 2)) {
            graphics.lineStyle(this._lineWidth, this._lineColor, 1, 1, true);
        }
        else {
            graphics.lineStyle(this._lineWidth, this._lineColor);
        }
        if (this._color !== undefined)
            graphics.beginFill(this._color);
        graphics.drawRoundedRect(this._anchorX ? -this._anchorX * this.width : 0, this._anchorY ? -this._anchorY * this.height : 0, this.width, this.height, this._radius);
        graphics.endFill();
    };
    Rect.prototype.release = function () {
        _super.prototype.release.call(this);
        if (this.graphics.parent) {
            this.graphics.parent.removeChild(this.graphics).destroy();
        }
    };
    Rect.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        this.drawRoundedRect();
        _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
    };
    return Rect;
}(DisplayObject_1.DisplayObject));
exports.Rect = Rect;


/***/ }),

/***/ "./src/display/ScrollingContainer.ts":
/*!*******************************************!*\
  !*** ./src/display/ScrollingContainer.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Container_1 = __webpack_require__(/*! ./Container */ "./src/display/Container.ts");
var Ticker = __webpack_require__(/*! ../core/Ticker */ "./src/core/Ticker.ts");
var Utils = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var DragEvent_1 = __webpack_require__(/*! ../interaction/DragEvent */ "./src/interaction/DragEvent.ts");
var MouseScrollEvent_1 = __webpack_require__(/*! ../interaction/MouseScrollEvent */ "./src/interaction/MouseScrollEvent.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var ContainerBase_1 = __webpack_require__(/*! ../core/ContainerBase */ "./src/core/ContainerBase.ts");
/**
 * 可滚动的容器
 *
 * @example let scrollingContainer = new gui.ScrollingContainer();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestRect
 */
var ScrollingContainer = /** @class */ (function (_super) {
    __extends(ScrollingContainer, _super);
    function ScrollingContainer() {
        var _this = _super.call(this) || this;
        /**
         * 是否启动拖拽滚动
         * @default true
         */
        _this._dragScrolling = true;
        /**
         * 滚动的阻力或柔度 (0-1)
         * @default 0.5
         */
        _this.softness = 0.5;
        /**
         * 滚动条的圆角半径 设置0时，滚动条为直角长方形
         * @default 0
         */
        _this.radius = 0;
        /**
         * 遮罩的扩充范围
         */
        _this.expandMask = 0;
        /**
         * 是否开启滚动动画
         * @default false
         */
        _this.animating = false;
        /**
         * 是否启用水平滚动
         * @default false
         */
        _this.scrollX = false;
        /**
         * 是否滚动中
         */
        _this.scrollY = false;
        /**
         * 内容容器
         * @private
         */
        _this._innerContainer = new ContainerBase_1.ContainerBase();
        /**
         * 内容的宽高
         */
        _this.innerBounds = new PIXI.Rectangle();
        /**
         * 拖动处理类
         */
        _this.dragEvent = new DragEvent_1.DragEvent(_this);
        /**
         * 鼠标滚动
         */
        _this.mouseScrollEvent = new MouseScrollEvent_1.MouseScrollEvent(_this, true);
        /**
         * 是否滚动中
         */
        _this.scrolling = false;
        /**
         * 临时方案，设置时间间隔，跳转容器宽高
         */
        _this._boundCached = Utils_1.now() - 1000;
        _this._lastWidth = 0;
        _this._lastHeight = 0;
        _this._isInitScrolling = false;
        _this._containerStart = new PIXI.Point();
        _this._targetPosition = new PIXI.Point();
        _this._lastPosition = new PIXI.Point();
        _this._Position = new PIXI.Point();
        _this._Speed = new PIXI.Point();
        _this._stop = false;
        _this.container.addChild(_this._innerContainer);
        _this.container.name = "ScrollingContainer";
        _this._innerContainer.name = "innerContainer";
        var _graphics = new PIXI.Graphics();
        _graphics.clear();
        _graphics.beginFill(0xffcc00);
        _graphics.drawRoundedRect(0, 0, 200, 200, 0);
        _graphics.endFill();
        _this.style.maskImage = _graphics;
        _this.dragEvent.onDragStart = function () {
            if (!_this.scrolling) {
                _this._containerStart.copyFrom(_this._innerContainer.position);
                _this._Position.copyFrom(_this._innerContainer.position);
                _this.scrolling = true;
                _this.setScrollPosition();
                Ticker.shared.addUpdateEvent(_this.updateScrollPosition, _this);
            }
        };
        _this.dragEvent.onDragMove = function (e, offset) {
            if (_this.scrollX)
                _this._targetPosition.x = _this._containerStart.x + offset.x;
            if (_this.scrollY)
                _this._targetPosition.y = _this._containerStart.y + offset.y;
        };
        _this.dragEvent.onDragEnd = function () {
            if (_this.scrolling) {
                _this.scrolling = false;
                Ticker.shared.removeUpdateEvent(_this.updateScrollPosition, _this);
            }
        };
        var scrollSpeed = new PIXI.Point();
        _this.mouseScrollEvent.onMouseScroll = function (e, delta) {
            scrollSpeed.set(-delta.x * 0.2, -delta.y * 0.2);
            _this.setScrollPosition(scrollSpeed);
        };
        return _this;
    }
    Object.defineProperty(ScrollingContainer.prototype, "dragScrolling", {
        get: function () {
            return this._dragScrolling;
        },
        set: function (value) {
            this._dragScrolling = value;
            //Drag scroll and Mouse scroll
            if (value) {
                this.mouseScrollEvent.startEvent();
                this.dragEvent.startEvent();
            }
            else {
                this.mouseScrollEvent.stopEvent();
                this.dragEvent.stopEvent();
            }
        },
        enumerable: true,
        configurable: true
    });
    ScrollingContainer.prototype.updateDisplayList = function (unscaledWidth, unscaledHeight) {
        if (this._lastWidth != unscaledWidth || this._lastHeight != unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            var _of = this.expandMask;
            this.style.maskPosition = [_of, _of];
            this._lastWidth = unscaledWidth;
            this._lastHeight = unscaledHeight;
            this.style.maskSize = [unscaledWidth, unscaledHeight];
            this.setScrollPosition();
        }
    };
    ScrollingContainer.prototype.setScrollPosition = function (speed) {
        if (speed) {
            this._Speed = speed;
        }
        if (!this.animating) {
            this.animating = true;
            this._lastPosition.copyFrom(this._innerContainer.position);
            this._targetPosition.copyFrom(this._innerContainer.position);
            this.updateScrollPosition(0);
        }
    };
    ScrollingContainer.prototype.addChildAt = function (item, index) {
        if (item.parent) {
            item.parent.removeChild(item);
        }
        item.parent = this;
        index = Math.min(this._innerContainer.children.length, index);
        this._innerContainer.addChildAt(item.container, index);
        this.uiChildren.splice(index, 0, item);
        this.getInnerBounds(true);
        return item;
    };
    ScrollingContainer.prototype.getInnerBounds = function (force) {
        //this is a temporary fix, because we cant rely on innercontainer height if the children is positioned > 0 y.
        if (force || Utils_1.now() - this._boundCached > 1000) {
            this._innerContainer.getLocalBounds(this.innerBounds);
            this.innerBounds.height = this.innerBounds.y + this._innerContainer.height;
            this.innerBounds.width = this.innerBounds.x + this._innerContainer.width;
            this._boundCached = Utils_1.now();
        }
        return this.innerBounds;
    };
    ScrollingContainer.prototype.$onInit = function () {
        _super.prototype.$onInit.call(this);
        this.initScrolling();
    };
    ScrollingContainer.prototype.initScrolling = function () {
        this._isInitScrolling = true;
        this.updateScrollBars();
    };
    ScrollingContainer.prototype.updateScrollBars = function () {
        this.emit(Index_1.ComponentEvent.CHANGE, this);
    };
    /**
     * 百分比设置位置
     * @param direction 方向
     * @param pct 百分比0-1
     */
    ScrollingContainer.prototype.forcePctPosition = function (direction, pct) {
        var bounds = this.getInnerBounds();
        if (this.scrollX && direction == "x") {
            this._innerContainer.position[direction] = -((bounds.width - this._width) * pct);
        }
        if (this.scrollY && direction == "y") {
            this._innerContainer[direction] = -((bounds.height - this._height) * pct);
        }
        this._Position[direction] = this._targetPosition[direction] = this._innerContainer.position[direction];
    };
    /** 根据焦点设置位置 */
    ScrollingContainer.prototype.focusPosition = function (pos) {
        var bounds = this.getInnerBounds();
        var dif;
        if (this.scrollX) {
            var x = Math.max(0, (Math.min(bounds.width, pos.x)));
            if (x + this._innerContainer.x > this._width) {
                dif = x - this._width;
                this._innerContainer.x = -dif;
            }
            else if (x + this._innerContainer.x < 0) {
                dif = x + this._innerContainer.x;
                this._innerContainer.x -= dif;
            }
        }
        if (this.scrollY) {
            var y = Math.max(0, (Math.min(bounds.height, pos.y)));
            if (y + this._innerContainer.y > this._height) {
                dif = y - this._height;
                this._innerContainer.y = -dif;
            }
            else if (y + this._innerContainer.y < 0) {
                dif = y + this._innerContainer.y;
                this._innerContainer.y -= dif;
            }
        }
        this._lastPosition.copyFrom(this._innerContainer.position);
        this._targetPosition.copyFrom(this._innerContainer.position);
        this._Position.copyFrom(this._innerContainer.position);
        this.updateScrollBars();
    };
    ScrollingContainer.prototype.updateScrollPosition = function (delta) {
        this._stop = true;
        if (this.scrollX)
            this.updateDirection("x", delta);
        if (this.scrollY)
            this.updateDirection("y", delta);
        if (stop) {
            this.animating = false;
        }
    };
    ScrollingContainer.prototype.updateDirection = function (direction, delta) {
        delta = delta * 0.001;
        var bounds = this.getInnerBounds();
        var min;
        if (direction == "y")
            min = Math.round(Math.min(0, this._height - bounds.height));
        else
            min = Math.round(Math.min(0, this._width - bounds.width));
        if (!this.scrolling && Math.round(this._Speed[direction]) !== 0) {
            this._targetPosition[direction] += this._Speed[direction];
            this._Speed[direction] = Utils.Lerp(this._Speed[direction], 0, (5 + 2.5 / Math.max(this.softness, 0.01)) * delta);
            if (this._targetPosition[direction] > 0) {
                this._targetPosition[direction] = 0;
            }
            else if (this._targetPosition[direction] < min) {
                this._targetPosition[direction] = min;
            }
        }
        if (!this.scrolling && Math.round(this._Speed[direction]) === 0 && (this._innerContainer[direction] > 0 || this._innerContainer[direction] < min)) {
            var target = this._Position[direction] > 0 ? 0 : min;
            this._Position[direction] = Utils.Lerp(this._Position[direction], target, (40 - (30 * this.softness)) * delta);
            this._stop = false;
        }
        else if (this.scrolling || Math.round(this._Speed[direction]) !== 0) {
            if (this.scrolling) {
                this._Speed[direction] = this._Position[direction] - this._lastPosition[direction];
                this._lastPosition.copyFrom(this._Position);
            }
            if (this._targetPosition[direction] > 0) {
                this._Speed[direction] = 0;
                this._Position[direction] = 100 * this.softness * (1 - Math.exp(this._targetPosition[direction] / -200));
            }
            else if (this._targetPosition[direction] < min) {
                this._Speed[direction] = 0;
                this._Position[direction] = min - (100 * this.softness * (1 - Math.exp((min - this._targetPosition[direction]) / -200)));
            }
            else {
                this._Position[direction] = this._targetPosition[direction];
            }
            this._stop = false;
        }
        this._innerContainer.position[direction] = Math.round(this._Position[direction]);
        this.updateScrollBars();
    };
    return ScrollingContainer;
}(Container_1.Container));
exports.ScrollingContainer = ScrollingContainer;


/***/ }),

/***/ "./src/display/Slider.ts":
/*!*******************************!*\
  !*** ./src/display/Slider.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Image_1 = __webpack_require__(/*! ./Image */ "./src/display/Image.ts");
var Utils = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Tween_1 = __webpack_require__(/*! ../tween/Tween */ "./src/tween/Tween.ts");
var Easing_1 = __webpack_require__(/*! ../tween/Easing */ "./src/tween/Easing.ts");
/**
 * 滑动条/进度条
 *
 * @example let slider = new gui.Slider();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestSlider
 */
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider() {
        var _this = _super.call(this) || this;
        /**
         * 当前值
         */
        _this._amt = 0;
        /**
         * 小数的保留位，0不保留
         * @default 0
         */
        _this._decimals = 0;
        _this._startValue = 0;
        _this._maxPosition = 0;
        _this._localMousePosition = new PIXI.Point();
        _this._lastChange = 0;
        _this._lastChanging = 0;
        _this._thumbDrag = new Index_1.DragEvent(_this);
        _this._trackDrag = new Index_1.DragEvent(_this);
        /** 状态展示 */
        _this.trackImg = new Image_1.Image();
        _this.thumbImg = new Image_1.Image();
        _this.tracklightImg = new Image_1.Image();
        _this._value = 0;
        /**
         * 最小值
         */
        _this._minValue = 0;
        /**
         * 最大值
         */
        _this._maxValue = 100;
        /**
         * 是否垂直,滑块方向
         */
        _this._vertical = false;
        _this.isExcValueSystem = false;
        _this._thumbDrag.onDragPress = _this.onPress;
        _this._thumbDrag.onDragStart = _this.onDragStart;
        _this._thumbDrag.onDragMove = _this.onDragMove;
        _this._thumbDrag.onDragEnd = _this.onDragEnd;
        _this._trackDrag.onDragPress = _this.onPress;
        _this._trackDrag.onDragStart = _this.onDragStart;
        _this._trackDrag.onDragMove = _this.onDragMove;
        _this._trackDrag.onDragEnd = _this.onDragEnd;
        _this.thumbImg.container.name = "thumbImg";
        _this.thumbImg.anchorX = 0.5;
        _this.thumbImg.anchorY = 0.5;
        _this.thumbImg.on(Index_1.ComponentEvent.COMPLETE, _this.onImgload, _this);
        _this.trackImg.container.name = "trackImg";
        _this.trackImg.fillMode = "scale";
        _this.trackImg.scale9Grid = [2, 2, 2, 2];
        _this.trackImg.style.width = "100%";
        _this.trackImg.style.height = "100%";
        _this.trackImg.on(Index_1.ComponentEvent.COMPLETE, _this.onImgload, _this);
        _this.tracklightImg.container.name = "tracklightImg";
        _this.tracklightImg.fillMode = "scale";
        _this.tracklightImg.scale9Grid = [2, 2, 2, 2];
        _this.addChild(_this.trackImg);
        _this.addChild(_this.tracklightImg);
        _this.addChild(_this.thumbImg);
        return _this;
    }
    Object.defineProperty(Slider.prototype, "value", {
        /**
         * 当前值
         */
        get: function () {
            return Utils.Round(Utils.Lerp(this.minValue, this.maxValue, this._amt), this._decimals);
        },
        set: function (value) {
            this._value = value;
            this.valueSystem();
        },
        enumerable: true,
        configurable: true
    });
    Slider.prototype.valueSystem = function () {
        this._amt = (Math.max(this.minValue, Math.min(this.maxValue, this._value)) - this.minValue) / (this.maxValue - this.minValue);
        this.updatePosition();
        this.triggerValueChange();
        this.triggerValueChanging();
    };
    Object.defineProperty(Slider.prototype, "minValue", {
        get: function () {
            return this._minValue;
        },
        set: function (value) {
            this._minValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "maxValue", {
        get: function () {
            return this._maxValue;
        },
        set: function (value) {
            this._maxValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "vertical", {
        get: function () {
            return this._vertical;
        },
        set: function (value) {
            this._vertical = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "track", {
        get: function () {
            return this._track;
        },
        set: function (value) {
            if (value !== this._track) {
                this._track = value;
                this.trackImg.src = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "thumb", {
        get: function () {
            return this._thumb;
        },
        set: function (value) {
            if (value !== this._thumb) {
                this._thumb = value;
                this.thumbImg.src = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "tracklight", {
        get: function () {
            return this._tracklight;
        },
        set: function (value) {
            if (value !== this._tracklight) {
                this._tracklight = value;
                this.tracklightImg.src = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Slider.prototype.setActualSize = function (w, h) {
        _super.prototype.setActualSize.call(this, w, h);
        if (this.trackImg.width !== w) {
            this.trackImg.width = w;
        }
        if (this.trackImg.height !== w) {
            this.trackImg.height = h;
        }
        if (!this.isExcValueSystem) {
            this.valueSystem();
            this.isExcValueSystem = true;
        }
    };
    Slider.prototype.release = function () {
        _super.prototype.release.call(this);
        this.trackImg.release();
        this.thumbImg.release();
        this.tracklightImg.release();
    };
    Slider.prototype.onImgload = function () {
        this.updateLayout();
    };
    Slider.prototype.updateLayout = function () {
        var thumbImg = this.thumbImg;
        var tracklightImg = this.tracklightImg;
        if (this.vertical) {
            //thumbImg.style.top =this._amt; 
            thumbImg.x = this._width >> 1;
            tracklightImg.width = this._width;
            //tracklightImg.style.height = this._amt * this.height;
        }
        else {
            thumbImg.y = this._height >> 1;
            //thumbImg.style.left = this._amt; 
            tracklightImg.height = this._height;
            //tracklightImg.style.width =  this._amt * this.width;
        }
    };
    Slider.prototype.updatePosition = function (soft) {
        var val = 0;
        var thumbImg = this.thumbImg;
        var tracklightImg = this.tracklightImg;
        if (this.vertical) {
            val = this._height * this._amt;
            if (soft) {
                Tween_1.Tween.to({ y: thumbImg.y, height: tracklightImg.height }, { y: val, height: val }, 300).easing(Easing_1.Easing.Linear.None)
                    .on(Tween_1.Tween.Event.update, function (obj) {
                    thumbImg.y = obj.y;
                    tracklightImg.height = obj.height;
                }).start();
            }
            else {
                thumbImg.y = val;
                tracklightImg.height = val;
            }
        }
        else {
            val = this._width * this._amt;
            if (soft) {
                Tween_1.Tween.to({ x: thumbImg.x, width: tracklightImg.width }, { x: val, width: val }, 300).easing(Easing_1.Easing.Linear.None)
                    .on(Tween_1.Tween.Event.update, function (obj) {
                    thumbImg.x = obj.x;
                    tracklightImg.width = obj.width;
                }).start();
            }
            else {
                thumbImg.x = val;
                tracklightImg.width = val;
            }
        }
    };
    Slider.prototype.onPress = function (event, isPressed, dragEvent) {
        event.stopPropagation();
        if (this._trackDrag == dragEvent && this._trackDrag.id == event.data.identifier) {
            if (isPressed) {
                this.updatePositionToMouse(event.data.global, true);
            }
        }
    };
    Slider.prototype.onDragStart = function (event) {
        if (this._thumbDrag.id == event.data.identifier) {
            this._startValue = this._amt;
            this._maxPosition = this.vertical ? this._height : this._width;
        }
    };
    Slider.prototype.onDragMove = function (event, offset) {
        if (this._thumbDrag.id == event.data.identifier) {
            this._amt = !this._maxPosition ? 0 : Math.max(0, Math.min(1, this._startValue + ((this.vertical ? offset.y : offset.x) / this._maxPosition)));
            this.triggerValueChanging();
            this.updatePosition();
        }
        else if (this._trackDrag && this._trackDrag.id == event.data.identifier) {
            this.updatePositionToMouse(event.data.global, false);
        }
    };
    Slider.prototype.onDragEnd = function (event) {
        if (this._thumbDrag.id == event.data.identifier) {
            this.triggerValueChange();
            this.updatePosition();
        }
        else if (this._trackDrag && this._trackDrag.id == event.data.identifier) {
            this.triggerValueChange();
        }
    };
    Slider.prototype.updatePositionToMouse = function (mousePosition, soft) {
        this.trackImg.container.toLocal(mousePosition, undefined, this._localMousePosition, true);
        var newPos = this.vertical ? this._localMousePosition.y : this._localMousePosition.x;
        var maxPos = this.vertical ? this._height : this._width;
        this._amt = !maxPos ? 0 : Math.max(0, Math.min(1, newPos / maxPos));
        this.updatePosition(soft);
        this.triggerValueChanging();
    };
    Slider.prototype.triggerValueChange = function () {
        var value = this.value;
        this.emit(Index_1.ComponentEvent.CHANGE, this, value, this._lastChange);
        if (this._lastChange != value) {
            this._lastChange = value;
        }
    };
    Slider.prototype.triggerValueChanging = function () {
        var value = this.value;
        this.emit(Index_1.ComponentEvent.CHANGEING, this, value, this._lastChanging);
        if (this._lastChanging != value) {
            this._lastChanging = value;
        }
    };
    return Slider;
}(DisplayObject_1.DisplayObject));
exports.Slider = Slider;


/***/ }),

/***/ "./src/display/Sound.ts":
/*!******************************!*\
  !*** ./src/display/Sound.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var SpriteAnimated_1 = __webpack_require__(/*! ./SpriteAnimated */ "./src/display/SpriteAnimated.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var InputBase_1 = __webpack_require__(/*! ./private/InputBase */ "./src/display/private/InputBase.ts");
exports.$sounds = new Map();
/**
 * 音频播放组件
 *
 * @example let sound = new gui.Sound();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestSound
 */
var Sound = /** @class */ (function (_super) {
    __extends(Sound, _super);
    function Sound() {
        var _this = _super.call(this) || this;
        /**
         * 状态展示
         */
        _this.spriteAnimated = new SpriteAnimated_1.SpriteAnimated();
        /**
         * 是否自动播放
         * @default false
         */
        _this._autoPlay = false;
        _this._speed = 1;
        _this._volume = 100;
        _this._loop = false;
        _this._curProgress = 0;
        _this._playing = false;
        var sp = _this.spriteAnimated;
        sp.loop = true;
        _this.addChild(sp);
        _this.container.buttonMode = true;
        return _this;
    }
    Object.defineProperty(Sound.prototype, "autoPlay", {
        get: function () {
            return this._autoPlay;
        },
        set: function (value) {
            this._autoPlay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "sheetSkin", {
        get: function () {
            return this._sheetSkin;
        },
        set: function (value) {
            this._sheetSkin = value;
            this.spriteAnimated.src = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "duration", {
        get: function () {
            if (this._sound) {
                return this._sound.duration;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "src", {
        /**
         * 音频源
         */
        get: function () {
            return this._src;
        },
        set: function (src) {
            if (src === this.src) {
                return;
            }
            this._src = src;
            this.invalidateProperties();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "animationSpeed", {
        /**
         * 动画速度
         */
        get: function () {
            return this.spriteAnimated.animationSpeed;
        },
        set: function (value) {
            this.spriteAnimated.animationSpeed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "speed", {
        /**
         * 设置播放速度
         */
        get: function () {
            return this._speed;
        },
        set: function (value) {
            this._speed = value;
            if (this._sound) {
                this._sound.speed = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "volume", {
        /**
         * 音量
         * @default 100
         */
        get: function () {
            return this._volume;
        },
        set: function (value) {
            this._volume = value;
            if (this._sound) {
                this._sound.volume = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "loop", {
        /**
         * 是否循环
         * @default false
         */
        get: function () {
            return this._loop;
        },
        set: function (value) {
            this._loop = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "isPlaying", {
        get: function () {
            if (this._sound) {
                return this._sound.isPlaying;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "startTime", {
        get: function () {
            return this._startTime;
        },
        set: function (value) {
            this._startTime = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "endTime", {
        get: function () {
            return this._endTime;
        },
        set: function (value) {
            this._endTime = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sound.prototype, "isPlay", {
        get: function () {
            return this.isPlaying;
        },
        set: function (value) {
            if (this._sound == undefined) {
                console.warn("curent sound initialization not complete;");
                return;
            }
            if (value) {
                this.play();
            }
            else {
                this.stop();
            }
        },
        enumerable: true,
        configurable: true
    });
    Sound.prototype.commitProperties = function () {
        this.releaseSound();
        if (this.src) {
            var sound = this._sound = Utils_1.getSound(this.src);
            sound.volume = this.volume;
            sound.speed = this.speed;
            if (this.autoPlay) {
                this.play();
            }
            else {
                this.stop();
            }
            this.container.hitArea = new PIXI.Rectangle(0, 0, this.width / this.scaleX, this.height / this.scaleY);
        }
    };
    Sound.prototype.play = function (start, end) {
        if (start === void 0) { start = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var uiObjects, key, sound, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.startTime) {
                            start = this.startTime;
                        }
                        if (this.endTime) {
                            end = this.endTime;
                        }
                        if (this._sound && this._sound.isPlaying) {
                            return [2 /*return*/];
                        }
                        uiObjects = Index_1.GroupController.getGroup(this.groupName);
                        if (uiObjects) {
                            for (key in uiObjects) {
                                if (uiObjects[key] instanceof Sound) {
                                    uiObjects[key].stop();
                                }
                            }
                        }
                        if (this._mediaInstance) {
                            this._mediaInstance.off('progress', this.onProgress, this);
                            this._mediaInstance.off('end', this.onEnd, this);
                        }
                        if (!this._sound) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this._sound.play({
                                start: start,
                                end: end
                            })];
                    case 1:
                        sound = _a._mediaInstance = _b.sent();
                        sound.on('progress', this.onProgress, this);
                        sound.on('end', this.onEnd, this);
                        _b.label = 2;
                    case 2:
                        this._playing = true;
                        if (this._sheetSkin) {
                            this.spriteAnimated.animationName = "play";
                            this.spriteAnimated.play();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Sound.prototype.stop = function () {
        if (this._sound) {
            this._sound.stop();
        }
        this._playing = false;
        if (this._sheetSkin) {
            this.spriteAnimated.animationName = "stop";
            this.spriteAnimated.stop();
        }
    };
    /**
     * 恢复播放
     */
    Sound.prototype.resume = function () {
        this.play(this._curProgress);
    };
    /**
     * 暂停播放
     */
    Sound.prototype.pause = function () {
        if (this._mediaInstance && this._sound) {
            this._curProgress = this._mediaInstance.progress * this._sound.duration;
        }
        this.stop();
    };
    Sound.prototype.release = function () {
        _super.prototype.release.call(this);
        this.releaseSound();
        this.offAll();
        this.spriteAnimated.release();
    };
    Sound.prototype.releaseSound = function () {
        if (this._mediaInstance) {
            this._mediaInstance.off('progress', this.onProgress, this);
            this._mediaInstance.off('end', this.onEnd, this);
        }
        if (this._sound) {
            this._sound.stop();
            this._sound.destroy();
            this._sound = undefined;
        }
    };
    Sound.prototype.onProgress = function (progress, duration) {
        this._curProgress = progress * duration;
        if (this.listenerCount(Index_1.ComponentEvent.CHANGEING) > 0) {
            this.emit(Index_1.ComponentEvent.CHANGEING, this, this._curProgress);
        }
    };
    Sound.prototype.onEnd = function () {
        if (this.loop) {
            this.play();
            this.emit(Index_1.ComponentEvent.LOOP, this);
        }
        else {
            this.stop();
            this.emit(Index_1.ComponentEvent.COMPLETE, this);
        }
    };
    Sound.prototype.onClick = function () {
        if (this.isPlaying) {
            this.stop();
        }
        else {
            this.play();
        }
    };
    return Sound;
}(InputBase_1.InputBase));
exports.Sound = Sound;


/***/ }),

/***/ "./src/display/SpriteAnimated.ts":
/*!***************************************!*\
  !*** ./src/display/SpriteAnimated.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
/**
 * 序列图动画
 *
 * 支持使用texturepacker导出以及处理轴点
 *
 * @example let spriteAnimated = new gui.SpriteAnimated();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestSpriteAnimated
 */
var SpriteAnimated = /** @class */ (function (_super) {
    __extends(SpriteAnimated, _super);
    function SpriteAnimated() {
        var _this = _super.call(this) || this;
        _this._lastAnimatedName = "";
        _this._curFrameNumber = 0;
        _this._setTimeoutId = -1;
        /**
         * 要播放的动作名
         */
        _this._animationName = "default";
        /**
         * 动画速度
         */
        _this._animationSpeed = 0.1;
        /**
         * 是的循环
         */
        _this._loop = false;
        _this._playCount = 0;
        /**
         * 循环次数
         */
        _this._loopCount = 0;
        /**
         * 是否播放中
         */
        _this._playing = false;
        /**
         * 锚点，调整位图的坐标中点 0-1, 可通过 TexturePacker输出sheet图并设置好 anchor
         */
        _this._anchorX = 0;
        /**
         * 锚点，调整位图的坐标中点 0-1, 可通过 TexturePacker输出sheet图并设置好 anchor
         */
        _this._anchorY = 0;
        _this._animatedSprites = new Map();
        return _this;
    }
    Object.defineProperty(SpriteAnimated.prototype, "animationName", {
        get: function () {
            return this._animationName;
        },
        set: function (value) {
            if (this._animationName == value) {
                return;
            }
            this._animationName = value;
            this.animatedNameSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "src", {
        get: function () {
            return this._src;
        },
        set: function (value) {
            this._src = value;
            if (value === undefined) {
                this.releaseAnimate();
            }
            else {
                this.srcSystem();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "animationSpeed", {
        get: function () {
            return this._animationSpeed;
        },
        set: function (value) {
            this._animationSpeed = value;
            this.attribSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "loop", {
        get: function () {
            return this._loop;
        },
        set: function (value) {
            this._loop = value;
            this.attribSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "loopCount", {
        get: function () {
            return this._loopCount;
        },
        set: function (value) {
            this._loopCount = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "playing", {
        get: function () {
            return this._playing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "anchorX", {
        get: function () {
            return this._anchorX;
        },
        set: function (value) {
            this._anchorX = value;
            this.attribSystem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "anchorY", {
        get: function () {
            return this._anchorY;
        },
        set: function (value) {
            this._anchorY = value;
            this.attribSystem();
        },
        enumerable: true,
        configurable: true
    });
    /** 跳转到第N帧并播放 */
    SpriteAnimated.prototype.gotoAndPlay = function (frameNumber) {
        this._curFrameNumber = frameNumber;
        this._playing = true;
        this.playSystem();
    };
    /** 跳转到第N帧并停止 */
    SpriteAnimated.prototype.gotoAndStop = function (frameNumber) {
        this._curFrameNumber = frameNumber;
        this._playing = false;
        this.playSystem();
    };
    /** 停止 */
    SpriteAnimated.prototype.stop = function () {
        this._playCount = 0;
        this._curFrameNumber = 0;
        this._playing = false;
        this.playSystem();
    };
    /** 播放 */
    SpriteAnimated.prototype.play = function () {
        this._playCount = 0;
        this._curFrameNumber = 0;
        this._playing = true;
        this.playSystem();
    };
    Object.defineProperty(SpriteAnimated.prototype, "autoPlay", {
        get: function () {
            return this._playing;
        },
        set: function (value) {
            this._playing = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteAnimated.prototype, "isPlay", {
        set: function (value) {
            if (value) {
                this.play();
            }
            else {
                this.stop();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 添加动画
     */
    SpriteAnimated.prototype.addAnimated = function (animationName, textures) {
        var sp = this._animatedSprites.get(animationName);
        if (sp) {
            if (sp.parent)
                sp.parent.removeChild(sp);
            sp.removeAllListeners();
            sp.destroy();
        }
        this._animatedSprites.set(animationName, new PIXI.AnimatedSprite(textures));
    };
    SpriteAnimated.prototype.release = function () {
        if (this._setTimeoutId) {
            clearTimeout(this._setTimeoutId);
        }
        _super.prototype.release.call(this);
        this.releaseAnimate();
        this.src = undefined;
    };
    SpriteAnimated.prototype.releaseAnimate = function () {
        this._animatedSprites.forEach(function (element) {
            if (element.parent) {
                element.parent.removeChild(element);
            }
            element.removeAllListeners();
            element.destroy();
        });
        this._animatedSprites.clear();
    };
    SpriteAnimated.prototype.srcSystem = function () {
        this.releaseAnimate();
        var src = Utils_1.getSheet(this.src);
        if (src) {
            if (Array.isArray(src)) {
                var textures_1 = [];
                src.forEach(function (value) {
                    textures_1.push(Utils_1.getTexture(value));
                });
                this.addAnimated("default", textures_1);
            }
            else {
                for (var key in src.animations) {
                    this.addAnimated(key, src.animations[key]);
                }
            }
            this.animatedNameSystem();
        }
    };
    SpriteAnimated.prototype.animatedNameSystem = function () {
        var _this = this;
        if (this._animatedSprites.size == 0) {
            return;
        }
        if (this.animationName === this._lastAnimatedName) {
            return;
        }
        var animatedSp = this._animatedSprites.get(this.animationName);
        if (animatedSp == undefined) {
            Utils_1.log("Warning SpriteAnimated -> _animatedSprites[" + this.animationName + "] == undefined");
            return;
        }
        var lastAnimated = this._animatedSprites.get(this._lastAnimatedName);
        animatedSp.onLoop = function () {
            _this.emit(Index_1.ComponentEvent.LOOP, _this);
            _this._playCount++;
            if (_this._loopCount !== 0 && _this._playCount >= _this._loopCount) {
                _this.stop();
            }
        };
        animatedSp.onComplete = function () {
            _this.emit(Index_1.ComponentEvent.COMPLETE, _this);
        };
        if (animatedSp.parent == undefined) {
            clearTimeout(this._setTimeoutId);
            this._setTimeoutId = setTimeout(function () {
                //绘制会闪烁，与下一帧渲染有关，先临时解决，设置setTimeout
                _this.container.addChild(animatedSp);
            }, 0);
        }
        if (lastAnimated && lastAnimated.parent) {
            lastAnimated.stop();
            lastAnimated.parent.removeChild(lastAnimated);
        }
        this._lastAnimatedName = this.animationName;
        this._curFrameNumber = 0;
        this.emit(Index_1.ComponentEvent.CHANGE, this, this.animationName);
        this.attribSystem();
        this.playSystem();
    };
    SpriteAnimated.prototype.playSystem = function () {
        var animatedSp = this._animatedSprites.get(this.animationName);
        if (animatedSp) {
            if (this.playing) {
                animatedSp.gotoAndPlay(this._curFrameNumber);
            }
            else {
                animatedSp.gotoAndStop(this._curFrameNumber);
            }
        }
    };
    SpriteAnimated.prototype.attribSystem = function () {
        var animatedSp = this._animatedSprites.get(this.animationName);
        if (animatedSp) {
            animatedSp.loop = this.loop;
            animatedSp.animationSpeed = this.animationSpeed;
            animatedSp.anchor.set(this.anchorX, this.anchorY);
        }
    };
    return SpriteAnimated;
}(DisplayObject_1.DisplayObject));
exports.SpriteAnimated = SpriteAnimated;


/***/ }),

/***/ "./src/display/TextInput.ts":
/*!**********************************!*\
  !*** ./src/display/TextInput.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HtmlInput_1 = __webpack_require__(/*! ./private/HtmlInput */ "./src/display/private/HtmlInput.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var InputBase_1 = __webpack_require__(/*! ./private/InputBase */ "./src/display/private/InputBase.ts");
var Image_1 = __webpack_require__(/*! ./Image */ "./src/display/Image.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
/**
 * 文本输入
 *
 * @example let textInput = new gui.TextInput(true|false);//单行或多行
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTextInput
 */
var TextInput = /** @class */ (function (_super) {
    __extends(TextInput, _super);
    function TextInput(multiline) {
        if (multiline === void 0) { multiline = false; }
        var _this = _super.call(this) || this;
        _this._oldState = "";
        _this._resolution = 1;
        _this._previous = {};
        /**
         * 预览文字的样式
         */
        _this.placeholderColor = 0xa9a9a9;
        _this._domVisible = true;
        _this.state = 'DEFAULT';
        /**
         * 预览文字
         */
        _this._placeholder = '';
        /**
         * 设置最大可输入
         */
        _this._maxLength = 99999;
        /**
         * 状态展示
        */
        _this.img = new Image_1.Image();
        _this._inputStyle = Object.assign({
            position: 'absolute',
            background: 'none',
            border: 'none',
            outline: 'none',
            transformOrigin: '0 0',
            padding: '5px 8px',
            color: '#26272e',
            lineHeight: '1',
            fontSize: "25px"
        }, {
            multiline: multiline
        });
        _this.htmlInputShared = new HtmlInput_1.default(_this._inputStyle.multiline);
        _this.htmlInputShared.setStyle(_this._inputStyle);
        _this.htmlInputShared.on("input" /* input */, _this._onInputInput, _this);
        _this.htmlInputShared.on('focus', _this._onFocused, _this);
        _this.htmlInputShared.on('blur', _this._onBlurred, _this);
        _this.img.fillMode = "scale";
        _this.img.scale9Grid = [3, 3, 3, 3];
        _this.addChild(_this.img);
        _this._textHitbox = new PIXI.Graphics();
        _this._textHitbox.name = "_textHitbox";
        _this._textHitbox.alpha = 0;
        _this._textHitbox.interactive = true;
        _this._textHitbox.cursor = 'text';
        _this._textHitbox.on('pointerdown', _this._ontextFocus, _this);
        _this.container.addChild(_this._textHitbox);
        _this._textMask = new PIXI.Graphics();
        _this._textMask.name = "_textMask";
        _this.container.addChild(_this._textMask);
        _this._text = new PIXI.Text('', {});
        _this._text.name = "_text";
        _this._text.visible = false;
        _this.container.addChild(_this._text);
        _this._text.mask = _this._textMask;
        _this._domVisible = false;
        _this.container.interactiveChildren = true;
        _this.on(Index_1.ComponentEvent.STATE_CHANGE, _this.onStateChange, _this);
        _this.container.isEmitRender = false;
        _this.container.on("renderChange", _this.updateSystem, _this);
        return _this;
    }
    Object.defineProperty(TextInput.prototype, "text", {
        /**
         * 设置文本
         */
        get: function () {
            return this._text.text;
        },
        set: function (value) {
            this._text.text = value;
            this.container.isEmitRender = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextInput.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (value) {
            this._placeholder = value;
            this.container.isEmitRender = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextInput.prototype, "maxLength", {
        get: function () {
            return this._maxLength;
        },
        set: function (value) {
            this._maxLength = value;
            this.container.isEmitRender = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextInput.prototype, "restrict", {
        get: function () {
            return this._restrict;
        },
        set: function (value) {
            this._restrict = value;
            this.container.isEmitRender = true;
        },
        enumerable: true,
        configurable: true
    });
    // GETTERS & SETTERS
    TextInput.prototype.updateSystem = function (renderer) {
        if (renderer === undefined) {
            return;
        }
        var htmlInputShared = this.htmlInputShared;
        htmlInputShared.maxlength = this.maxLength;
        htmlInputShared.placeholder = this.placeholder;
        htmlInputShared.disabled = !this.enabled;
        htmlInputShared.restrict = this.restrict;
        this.setInputStyle("fontFamily", this.style.fontFamily);
        this.setInputStyle("fontSize", this.style.fontSize);
        this.setInputStyle("color", this.style.color);
        this.setInputStyle("width", this._width + "px");
        this.setInputStyle("height", this._height + "px");
        this.render(renderer);
        this.onStateChange(this, this.currentState);
        this.container.isEmitRender = false;
    };
    /**
     * 设置焦点
     */
    TextInput.prototype.focus = function () {
        this.htmlInputShared.focus();
    };
    /**
     * 失去焦点
     */
    TextInput.prototype.blur = function () {
        this.htmlInputShared.blur();
    };
    /**
     * 设置css style样式
     * @param key 健
     * @param value 值
     */
    TextInput.prototype.setInputStyle = function (key, value) {
        if (key === "fontSize") {
            value = value + "px";
        }
        if (key === "color") {
            value = "#" + Utils_1.componentToHex(value);
        }
        this._inputStyle[key] = value;
        this.htmlInputShared.setStyleValue(key, value);
    };
    TextInput.prototype.onStateChange = function (ui, state) {
        if (this._oldState == state) {
            return;
        }
        if (!this.enabled) {
            this.currentState = "disabled";
        }
        this._oldState = state;
        var img = this.img;
        img.src = this[state];
    };
    // SETUP
    TextInput.prototype._onInputInput = function () {
        this._updateSubstitution();
    };
    TextInput.prototype._onFocused = function () {
        this._setState('FOCUSED');
    };
    TextInput.prototype._onBlurred = function () {
        this._setState('DEFAULT');
    };
    TextInput.prototype._setState = function (state) {
        this.state = state;
        this._updateSubstitution();
    };
    TextInput.prototype._updateSubstitution = function () {
        if (this.state === 'FOCUSED') {
            this._domVisible = true;
            this._text.visible = false;
        }
        else {
            this._domVisible = false;
            this._text.visible = true;
        }
        this._updateDOMInput();
        this._updatetext();
    };
    // RENDER & UPDATE
    // for pixi v5
    TextInput.prototype.render = function (renderer) {
        this._renderInternal(renderer);
    };
    TextInput.prototype._renderInternal = function (renderer) {
        this._resolution = renderer.resolution;
        this._lastRenderer = renderer;
        this._canvasBounds = this._getCanvasBounds();
        if (this._needsUpdate()) {
            this._updateSubstitution();
        }
    };
    TextInput.prototype._updateDOMInput = function () {
        if (!this._canvasBounds)
            return;
        var cb = this._canvasBounds;
        var transform = this._pixiMatrixToCSS(this._getDOMRelativeWorldTransform());
        this.htmlInputShared.updatePostion(cb.top, cb.left, transform, this.container.worldAlpha);
        this.htmlInputShared.visible = this.container.worldVisible && this._domVisible;
        this._previous.canvasBounds = this._canvasBounds;
        this._previous.worldTransform = this.container.worldTransform.clone();
        this._previous.worldAlpha = this.container.worldAlpha;
        this._previous.worldVisible = this.container.worldVisible;
    };
    // STATE COMPAIRSON (FOR PERFORMANCE BENEFITS)
    TextInput.prototype._needsUpdate = function () {
        return (!this._comparePixiMatrices(this.container.worldTransform, this._previous.worldTransform)
            || !this._compareClientRects(this._canvasBounds, this._previous.canvasBounds)
            || this.container.worldAlpha != this._previous.worldAlpha
            || this.container.worldVisible != this._previous.worldVisible);
    };
    TextInput.prototype._updatetext = function () {
        var padding = this._derivetextPadding();
        var inputBounds = this.htmlInputShared.getDOMInputBounds();
        this._text.style = this._derivetextStyle();
        this._text.style.padding = Math.max.apply(Math, padding);
        this._text.y = this._inputStyle.multiline ? padding[0] : (inputBounds.height - this._text.height) / 2;
        this._text.x = padding[3];
        if (this._inputStyle.multiline) {
            this._text.style.wordWrap = true;
            this._text.style.wordWrapWidth = inputBounds.width;
            this._text.style.breakWords = true;
        }
        this._text.text = this._derivetextText();
        this._textHitbox.clear();
        this._textHitbox.beginFill(0);
        this._textHitbox.drawRect(0, 0, inputBounds.width, inputBounds.height);
        this._textHitbox.endFill();
        this._textHitbox.interactive = this.enabled;
        this._textMask.clear();
        this._textMask.beginFill(0);
        this._textMask.drawRect(padding[3], 0, inputBounds.width - padding[3] - padding[1], inputBounds.height);
        this._textMask.endFill();
        this.img.width = inputBounds.width;
        this.img.height = inputBounds.height;
    };
    TextInput.prototype._ontextFocus = function () {
        this.htmlInputShared.visible = true;
        //sometimes the input is not being focused by the mouseclick
        setTimeout(this._ensureFocus.bind(this), 10);
    };
    TextInput.prototype._ensureFocus = function () {
        if (!this._hasFocus())
            this.focus();
    };
    TextInput.prototype._derivetextStyle = function () {
        var style = new PIXI.TextStyle();
        for (var key in this._inputStyle) {
            switch (key) {
                case 'color':
                    style.fill = this._inputStyle.color;
                    break;
                case 'fontFamily':
                case 'fontSize':
                case 'fontWeight':
                case 'fontVariant':
                case 'fontStyle':
                    style[key] = this._inputStyle[key];
                    break;
                case 'letterSpacing':
                    style.letterSpacing = parseFloat(this._inputStyle.letterSpacing);
                    break;
            }
        }
        if (this._inputStyle.multiline) {
            style.lineHeight = parseFloat(style.fontSize);
            style.wordWrap = true;
            style.wordWrapWidth = this.htmlInputShared.getDOMInputBounds().width;
        }
        if (this.htmlInputShared.value.length === 0)
            style.fill = this.placeholderColor;
        return style;
    };
    TextInput.prototype._derivetextPadding = function () {
        var indent = this._inputStyle.textIndent ? parseFloat(this._inputStyle.textIndent) : 0;
        if (this._inputStyle.padding && this._inputStyle.padding.length > 0) {
            var components = this._inputStyle.padding.trim().split(' ');
            if (components.length == 1) {
                var padding = parseFloat(components[0]);
                return [padding, padding, padding, padding + indent];
            }
            else if (components.length == 2) {
                var paddingV = parseFloat(components[0]);
                var paddingH = parseFloat(components[1]);
                return [paddingV, paddingH, paddingV, paddingH + indent];
            }
            else if (components.length == 4) {
                var padding = components.map(function (component) {
                    return parseFloat(component);
                });
                padding[3] += indent;
                return padding;
            }
        }
        return [0, 0, 0, indent];
    };
    TextInput.prototype._derivetextText = function () {
        return this.htmlInputShared.value.length === 0 ? this.placeholder : this.htmlInputShared.value;
    };
    // private _updateFontMetrics() {
    //     const style = this._derivetextStyle();
    //     const font = style.toFontString();
    //     this._fontMetrics = PIXI.TextMetrics.measureFont(font);
    // }
    // HELPER FUNCTIONS
    TextInput.prototype._hasFocus = function () {
        return document.activeElement === this.htmlInputShared.domInput;
    };
    TextInput.prototype._getCanvasBounds = function () {
        if (this._lastRenderer) {
            var rect = this._lastRenderer.view.getBoundingClientRect();
            var bounds = { top: rect.top, left: rect.left, width: rect.width, height: rect.height };
            bounds.left += window.scrollX;
            bounds.top += window.scrollY;
            return bounds;
        }
        return undefined;
    };
    TextInput.prototype._getDOMRelativeWorldTransform = function () {
        if (this._lastRenderer) {
            var canvasBounds = this._lastRenderer.view.getBoundingClientRect();
            var matrix = this.container.worldTransform.clone();
            matrix.scale(this._resolution, this._resolution);
            matrix.scale(canvasBounds.width / this._lastRenderer.width, canvasBounds.height / this._lastRenderer.height);
            return matrix;
        }
    };
    TextInput.prototype._pixiMatrixToCSS = function (m) {
        return 'matrix(' + [m.a, m.b, m.c, m.d, m.tx, m.ty].join(',') + ')';
    };
    TextInput.prototype._comparePixiMatrices = function (m1, m2) {
        if (!m1 || !m2)
            return false;
        return (m1.a == m2.a
            && m1.b == m2.b
            && m1.c == m2.c
            && m1.d == m2.d
            && m1.tx == m2.tx
            && m1.ty == m2.ty);
    };
    TextInput.prototype._compareClientRects = function (r1, r2) {
        if (!r1 || !r2)
            return false;
        return (r1.left == r2.left
            && r1.top == r2.top
            && r1.width == r2.width
            && r1.height == r2.height);
    };
    TextInput.prototype.release = function () {
        _super.prototype.release.call(this);
        this.container.removeChild(this._text);
        this.container.removeChild(this._textHitbox);
        this.img.release();
        this._text.destroy();
        this._textHitbox && this._textHitbox.destroy();
        this.htmlInputShared.release();
        this.container.off("renderChange", this.updateSystem, this);
        this.offAll(Index_1.ComponentEvent.STATE_CHANGE);
    };
    return TextInput;
}(InputBase_1.InputBase));
exports.TextInput = TextInput;


/***/ }),

/***/ "./src/display/private/HtmlInput.ts":
/*!******************************************!*\
  !*** ./src/display/private/HtmlInput.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 私有的，由于PIXIJS不支持文本输入，这里以HTML方式实现
 */
var HtmlInput = /** @class */ (function (_super) {
    __extends(HtmlInput, _super);
    function HtmlInput(multiline) {
        var _this = _super.call(this) || this;
        _this._selection = [0, 0];
        _this._restrict_value = '';
        console.log("创建HtmlInput");
        _this._domInput = _this.addDom(multiline);
        _this.visible = false;
        document.body.appendChild(_this._domInput);
        return _this;
    }
    Object.defineProperty(HtmlInput.prototype, "domInput", {
        get: function () {
            return this._domInput;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlInput.prototype, "visible", {
        get: function () {
            if (this._domInput.style.display === 'block')
                return true;
            return false;
        },
        set: function (value) {
            this._domInput.style.display = value ? 'block' : 'none';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlInput.prototype, "value", {
        get: function () {
            return this._domInput.value;
        },
        set: function (value) {
            this._domInput.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlInput.prototype, "placeholder", {
        set: function (value) {
            this._domInput.placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlInput.prototype, "disabled", {
        set: function (value) {
            this._domInput.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlInput.prototype, "maxlength", {
        get: function () {
            return this._domInput.maxLength;
        },
        set: function (value) {
            this._domInput.maxLength = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlInput.prototype, "restrict", {
        /* 输入郑泽斌表达式 */
        get: function () {
            return this._restrictRegex;
        },
        set: function (regex) {
            if (regex === undefined) {
                return;
            }
            if (regex instanceof RegExp) {
                var str = regex.toString().slice(1, -1);
                if (str.charAt(0) !== '^')
                    str = '^' + str;
                if (str.charAt(str.length - 1) !== '$')
                    str = str + '$';
                regex = new RegExp(str);
            }
            else {
                regex = new RegExp('^[' + regex + ']*$');
            }
            this._restrictRegex = regex;
        },
        enumerable: true,
        configurable: true
    });
    HtmlInput.prototype.setStyle = function (style) {
        for (var key in style) {
            this._domInput.style[key] = style[key];
        }
        //this._domInput.setAttribute("style", stylestr);
    };
    HtmlInput.prototype.setStyleValue = function (key, value) {
        this._domInput.style[key] = value;
    };
    HtmlInput.prototype.select = function () {
        this._domInput.select();
    };
    /** 测量，需要对象添加到body中 */
    HtmlInput.prototype.getDOMInputBounds = function () {
        var org_transform = this._domInput.style.transform;
        var org_display = this._domInput.style.display;
        this._domInput.style.transform = '';
        this._domInput.style.display = 'block';
        var bounds = this._domInput.getBoundingClientRect();
        this._domInput.style.transform = org_transform;
        this._domInput.style.display = org_display;
        return bounds;
    };
    HtmlInput.prototype.updatePostion = function (top, left, transform, opacity) {
        this._domInput.style.top = top + 'px';
        this._domInput.style.left = left + 'px';
        this._domInput.style.transform = transform;
        if (opacity)
            this._domInput.style.opacity = opacity.toString();
    };
    HtmlInput.prototype.addDom = function (multiline) {
        if (multiline) {
            this._domInput = document.createElement('textarea');
            this._domInput.style.resize = 'none';
        }
        else {
            this._domInput = document.createElement('input');
            this._domInput.type = 'text';
        }
        this.addEvent();
        document.body.appendChild(this._domInput);
        return this._domInput;
    };
    HtmlInput.prototype.removeDom = function () {
        if (this._domInput) {
            document.body.removeChild(this._domInput);
        }
    };
    HtmlInput.prototype.release = function () {
        this.removeDom();
        this.removeEvent();
        this.removeAllListeners();
    };
    HtmlInput.prototype.addEvent = function () {
        if (this._onInputKeyDownBind) {
            return;
        }
        this._onInputKeyDownBind = this._onInputKeyDown.bind(this);
        this._onInputInputBind = this._onInputInput.bind(this);
        this._onInputKeyUpBind = this._onInputKeyUp.bind(this);
        this._onFocusedBind = this._onFocused.bind(this);
        this._onBlurredBind = this._onBlurred.bind(this);
        this._domInput.addEventListener('keydown', this._onInputKeyDownBind, { passive: false });
        this._domInput.addEventListener('input', this._onInputInputBind, { passive: false });
        this._domInput.addEventListener('keyup', this._onInputKeyUpBind, { passive: false });
        this._domInput.addEventListener('focus', this._onFocusedBind, { passive: false });
        this._domInput.addEventListener('blur', this._onBlurredBind, { passive: false });
    };
    HtmlInput.prototype.removeEvent = function () {
        if (this._onInputKeyDownBind) {
            this._domInput.removeEventListener('keydown', this._onInputKeyDownBind);
            this._domInput.removeEventListener('input', this._onInputInputBind);
            this._domInput.removeEventListener('keyup', this._onInputKeyUpBind);
            this._domInput.removeEventListener('focus', this._onFocusedBind);
            this._domInput.removeEventListener('blur', this._onBlurredBind);
            this._onInputKeyDownBind = undefined;
            this._onInputInputBind = undefined;
            this._onInputKeyUpBind = undefined;
            this._onFocusedBind = undefined;
            this._onBlurredBind = undefined;
        }
    };
    HtmlInput.prototype._applyRestriction = function () {
        if (this._restrictRegex) {
            if (this._restrictRegex.test(this.value)) {
                this._restrict_value = this.value;
            }
            else {
                this.value = this._restrict_value;
                this._domInput.setSelectionRange(this._selection[0], this._selection[1]);
            }
        }
    };
    HtmlInput.prototype._onInputKeyDown = function (e) {
        this._selection = [
            this._domInput.selectionStart || 0,
            this._domInput.selectionEnd || 0
        ];
        this.emit("keydown" /* keydown */, this, e.keyCode);
        //e.preventDefault();
    };
    HtmlInput.prototype._onInputInput = function (e) {
        if (e.data != null) {
            if (this._restrictRegex)
                this._applyRestriction();
        }
        this.emit("input" /* input */, this.value);
        e.preventDefault();
    };
    HtmlInput.prototype._onInputKeyUp = function (e) {
        this.emit("keyup" /* keyup */, this.value);
        e.preventDefault();
    };
    HtmlInput.prototype._onFocused = function (e) {
        this.emit('focus');
        e.preventDefault();
    };
    HtmlInput.prototype._onBlurred = function (e) {
        this.emit('blur');
        e.preventDefault();
    };
    HtmlInput.prototype.focus = function () {
        document.body.removeChild(this._domInput);
        document.body.appendChild(this._domInput);
        this._domInput.focus();
    };
    HtmlInput.prototype.blur = function () {
        this._domInput.blur();
    };
    return HtmlInput;
}(PIXI.utils.EventEmitter));
exports.default = HtmlInput;


/***/ }),

/***/ "./src/display/private/InputBase.ts":
/*!******************************************!*\
  !*** ./src/display/private/InputBase.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DisplayObject_1 = __webpack_require__(/*! ../../core/DisplayObject */ "./src/core/DisplayObject.ts");
var Index_1 = __webpack_require__(/*! ../../interaction/Index */ "./src/interaction/Index.ts");
/**
 * 输入对象的基础类
 */
var InputBase = /** @class */ (function (_super) {
    __extends(InputBase, _super);
    function InputBase() {
        var _this = _super.call(this) || this;
        _this.clickEvent = new Index_1.ClickEvent(_this, true);
        _this._currentState = "up";
        _this._focused = false;
        _this._useTab = true;
        _this._usePrev = true;
        _this._useNext = true;
        _this._down = false;
        //this.container.interactive = true;
        _this.container.interactiveChildren = false;
        _this.on(Index_1.TouchMouseEvent.onMove, _this.onMove, _this);
        _this.on(Index_1.TouchMouseEvent.onHover, _this.onHover, _this);
        _this.on(Index_1.TouchMouseEvent.onPress, _this.onPress, _this);
        _this.on(Index_1.TouchMouseEvent.onClick, _this.onClick, _this);
        return _this;
    }
    ;
    Object.defineProperty(InputBase.prototype, "currentState", {
        get: function () {
            return this._currentState;
        },
        set: function (value) {
            if (this._currentState == value) {
                return;
            }
            this._currentState = value;
            this.emit(Index_1.ComponentEvent.STATE_CHANGE, this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputBase.prototype, "clickSound", {
        get: function () {
            return this._clickSound;
        },
        set: function (value) {
            if (this._clickSound === value) {
                return;
            }
            this._clickSound = value;
        },
        enumerable: true,
        configurable: true
    });
    InputBase.prototype.onMove = function () {
        if (this._down) {
            return;
        }
        this.currentState = "move";
    };
    //e: InteractionEvent,thisObj: DisplayObject,over: boolean
    InputBase.prototype.onHover = function () {
        this.currentState = "up";
    };
    InputBase.prototype.onPress = function (e, thisObj, isPress) {
        this._down = isPress;
        if (isPress) {
            this.focus();
            this.currentState = "down";
        }
        else {
            this.currentState = "up";
        }
    };
    InputBase.prototype.onClick = function () {
        if (this._clickSound) {
            this.emit(Index_1.ComponentEvent.PLAY_AUDIO, { name: this._clickSound, mode: 'effect' });
            console.log("aaa");
        }
    };
    InputBase.prototype.keyDownEvent = function (event) {
        var e = event;
        if (e.which === 9) {
            if (this._useTab) {
                Index_1.InputController.fireTab();
                e.preventDefault();
            }
        }
        else if (e.which === 38) {
            if (this._usePrev) {
                Index_1.InputController.firePrev();
                e.preventDefault();
            }
        }
        else if (e.which === 40) {
            if (this._useNext) {
                Index_1.InputController.fireNext();
                e.preventDefault();
            }
        }
    };
    InputBase.prototype.documentMouseDown = function () {
        if (this.currentState !== "down") {
            this.blur();
        }
    };
    InputBase.prototype._bindEvents = function () {
        if (this.stage) {
            this.stage.on("pointerdown", this.documentMouseDown, this);
            this.keyDownEventBind = this.keyDownEvent.bind(this);
            document.addEventListener("keydown", this.keyDownEventBind);
        }
    };
    InputBase.prototype._clearEvents = function () {
        if (this.stage) {
            this.stage.off("pointerdown", this.documentMouseDown, this);
            document.removeEventListener("keydown", this.keyDownEventBind);
        }
    };
    InputBase.prototype.focus = function () {
        if (!this._focused) {
            this._focused = true;
            this._bindEvents();
            Index_1.InputController.set(this);
            this.emit("focusChanged", true);
            this.emit("focus");
        }
    };
    InputBase.prototype.blur = function () {
        if (this._focused) {
            Index_1.InputController.clear();
            this._focused = false;
            this._clearEvents();
            this.emit("focusChanged", false);
            this.emit("blur");
        }
    };
    InputBase.prototype.release = function () {
        _super.prototype.release.call(this);
        this.off(Index_1.TouchMouseEvent.onMove, this.onMove, this);
        this.off(Index_1.TouchMouseEvent.onHover, this.onHover, this);
        this.off(Index_1.TouchMouseEvent.onPress, this.onPress, this);
        this.off(Index_1.TouchMouseEvent.onClick, this.onClick, this);
        if (this.keyDownEventBind)
            document.removeEventListener("keydown", this.keyDownEventBind);
        if (this.documentMouseDown && this.stage)
            this.stage.off("pointerdown", this.documentMouseDown, this);
    };
    InputBase.prototype.setTabIndex = function (index, group) {
        this._tabIndex = index;
        this._tabGroup = group;
        if (index !== undefined && group !== undefined) {
            Index_1.InputController.registrer(this, index, group);
        }
    };
    return InputBase;
}(DisplayObject_1.DisplayObject));
exports.InputBase = InputBase;


/***/ }),

/***/ "./src/enum/FollowLineEnum.ts":
/*!************************************!*\
  !*** ./src/enum/FollowLineEnum.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
;
;


/***/ }),

/***/ "./src/enum/Index.ts":
/*!***************************!*\
  !*** ./src/enum/Index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FollowLineEnum = __webpack_require__(/*! ./FollowLineEnum */ "./src/enum/FollowLineEnum.ts");
exports.FollowLineEnum = FollowLineEnum;


/***/ }),

/***/ "./src/event/ComponentEvent.ts":
/*!*************************************!*\
  !*** ./src/event/ComponentEvent.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 特定属性改变时,通常为了去系统事件区分，UI组件的事件名为大写
 * 1. CheckBox 的 checked 改变时
 * 2. Label 的 text 改变时
 * 3. SpriteAnimated 的 animationName 改变时
 * 4. Button 文字改变
 * 5. ScrollingContainer 拖动改变时
 * 6. Slider 滑动改变后
 * 7. SpriteAnimated 动画改变后
 * 8. ConnectLine 连线完成时
 */
exports.CHANGE = "CHANGE";
/**
 * 状态改变中
 *
 * slider 滑动时
 */
exports.CHANGEING = "CHANGEING";
/**
 * 状态切换完成时
 *
 * 1. SpriteAnimated 每次播放完时，触发(loop = false时)
 * 2. Image 图片加载完成时
 * 3. Slider 滑动完成
 * 4. Timeline  每次播放完时，触发(loop = false时)
 * 5. FollowLine 完成一次划线
 */
exports.COMPLETE = "COMPLETE";
/**
 * 状态发生改变时
 */
exports.STATE_CHANGE = "STATE_CHANGE";
/**
 * 状态切换完成时
 *
 * SpriteAnimated 每次播放完时，，触发(loop = true时)
 */
exports.LOOP = "LOOP";
/**
 * 组件被添加前
 */
exports.ADD = "add";
/**
 * 组件被添加时
 */
exports.ADDED = "added";
/**
 * 组件被移除时
 */
exports.REMOVEED = "removed";
/**
 * 组件大小改变后
 */
exports.RESIZE = "RESIZE";
/**
 * 组件位置移动
 */
exports.MOVE = "MOVE";
/**
 * 组件创建完成后
 */
exports.CREATION_COMPLETE = "CREATION_COMPLETE";
/**
 * 组件拖动开始之前
 */
exports.DRAG_START_BEFORE = "DRAG_START_BEFORE";
/**
 * 组件拖动开始时
 */
exports.DRAG_START = "DRAG_START";
/**
 * 组件拖动结束之前
 */
exports.DRAG_END_BEFORE = "DRAG_END_BEFORE";
/**
 * 组件拖动结束时 （如果绑定接收容器并拖动到接收容器中，不会触发此事件）
 */
exports.DRAG_END = "DRAG_END";
/**
 * 组件拖动中
 */
exports.DRAG_MOVE = "DRAG_MOVE";
/**
 * 组件拖动到接收目标中之前
 */
exports.DRAG_TARGET_BEFORE = "DRAG_TARGET_BEFORE";
/**
 * 组件拖动到接收目标中
 */
exports.DRAG_TARGET = "DRAG_TARGET";
/**
 * 有拖拽物掉落到此容器时触发
 */
exports.DROP_TARGET = "DROP_TARGET";
/**
 * 播放音效 {name,mode}
 */
exports.PLAY_AUDIO = "PLAY_AUDIO";


/***/ }),

/***/ "./src/event/Index.ts":
/*!****************************!*\
  !*** ./src/event/Index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ComponentEvent = __webpack_require__(/*! ./ComponentEvent */ "./src/event/ComponentEvent.ts");
exports.ComponentEvent = ComponentEvent;
var InteractionEvent_1 = __webpack_require__(/*! ./InteractionEvent */ "./src/event/InteractionEvent.ts");
exports.InteractionEvent = InteractionEvent_1.InteractionEvent;
//import {KeyEvent} from "./KeyEvent";
var TouchMouseEvent_1 = __webpack_require__(/*! ./TouchMouseEvent */ "./src/event/TouchMouseEvent.ts");
exports.TouchMouseEvent = TouchMouseEvent_1.TouchMouseEvent;
var TweenEvent_1 = __webpack_require__(/*! ./TweenEvent */ "./src/event/TweenEvent.ts");
exports.TweenEvent = TweenEvent_1.TweenEvent;


/***/ }),

/***/ "./src/event/InteractionEvent.ts":
/*!***************************************!*\
  !*** ./src/event/InteractionEvent.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tempLocal = new PIXI.Point(0, 0);
/**
 * 事件的基础类
 *
 * 触摸或鼠标操作事件 可查看 -> TouchEventEnum.TouchEnum
 *
 * import InteractionEvent from "../interaction/InteractionEvent",
 */
var InteractionEvent = /** @class */ (function (_super) {
    __extends(InteractionEvent, _super);
    function InteractionEvent() {
        var _this = _super.call(this) || this;
        _this.local = tempLocal;
        return _this;
    }
    return InteractionEvent;
}(PIXI.interaction.InteractionEvent));
exports.InteractionEvent = InteractionEvent;


/***/ }),

/***/ "./src/event/TouchMouseEvent.ts":
/*!**************************************!*\
  !*** ./src/event/TouchMouseEvent.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 对外，封装的点击触摸事件
 *
 * import InteractionEvent,{Mouse} from "../interaction/InteractionEvent",
 */
exports.TouchMouseEvent = {
    /**
     * 移出
     *
     * (e: InteractionEvent,thisObj:DisplayObject,over: boolean)=>{}
     */
    onHover: "hover",
    /**
     * 按下
     *
     * (e: InteractionEvent,thisObj:DisplayObject, isPressed: boolean)=>void
     */
    onPress: "press",
    /**
     * 按下
     */
    onDown: "down",
    /**
     * 弹起
     */
    onUp: "up",
    /**
     * 点击
     *
     * (e: InteractionEvent,thisObj:DisplayObject)=>void
     */
    onClick: "click",
    /**
     * 移动
     *
     * (e: InteractionEvent,thisObj:DisplayObject)=>void
     */
    onMove: "move",
};


/***/ }),

/***/ "./src/event/TweenEvent.ts":
/*!*********************************!*\
  !*** ./src/event/TweenEvent.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 缓动事件
 */
exports.TweenEvent = {
    /**
     *
     */
    Callback: 'Callback',
    /**
     * 每次改变
     */
    update: 'update',
    /**
     * 完成
     */
    complete: 'complete',
    /**
     * 开始时
     */
    start: 'start',
    /**
     * 每次重复时
     */
    repeat: 'repeat',
    /**
     * 反向时
     */
    reverse: 'reverse',
    /**
     * 暂停时
     */
    pause: 'pause',
    /**
     * 播放时
     */
    play: 'play',
    /**
     * 重新开始时
     */
    restart: 'restart',
    /**
     * 停止时
     */
    stop: 'stop'
};


/***/ }),

/***/ "./src/interaction/ClickEvent.ts":
/*!***************************************!*\
  !*** ./src/interaction/ClickEvent.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TouchMouseEvent_1 = __webpack_require__(/*! ../event/TouchMouseEvent */ "./src/event/TouchMouseEvent.ts");
/**
 * 点击触摸相关的事件处理订阅类,UI组件内部可以创建此类实现点击相关操作
 *
 *  可侦听事件:
 * ```
 *  {InteractionEvent}.TouchEvent.onHover
 *  {InteractionEvent}.TouchEvent.onPress
 *  {InteractionEvent}.TouchEvent.onClick
 *  {InteractionEvent}.TouchEvent.onMove
 * ```
 *  可赋值方法:
 * ```
 *  onHover: ((e: InteractionEvent,thisOBj:DisplayObject,over: boolean) => void) | undefined
 *  onPress: ((e: InteractionEvent,thisOBj:DisplayObject, isPressed: boolean) => void) | undefined;
 *  onClick: ((e: InteractionEvent,thisOBj:DisplayObject) => void) | undefined
 *  onMove: ((e: InteractionEvent,thisOBj:DisplayObject) => void) | undefined
 * ```
 *
 * @example 可查看 `TestSliceSprite` 示例
 *
 * @since 1.0.0
 */
var ClickEvent = /** @class */ (function () {
    /**
     * ClickEvent 构造函数
     * @param obj 调用的显示对象
     * @param isOpenEmitEvent 是否开启事件派发，默认false，开启后，父类可以监听InteractionEvent下的TouchEvent
     * @param includeHover 是否监听鼠标移上与移出，默认true
     * @param rightMouseButton 是否开启鼠标右键点击，默认false
     * @param doubleClick 是否开启鼠标双击,默认false
     */
    function ClickEvent(obj, isOpenEmitEvent, includeHover, rightMouseButton, doubleClick) {
        this.id = 0;
        /** 是否基于事件派发，开启后，可以侦听相关的事件 InteractionEvent.TouchEvent | gui.Interaction.TouchEvent */
        this.isOpenEmitEvent = false;
        /** 是否开启本地坐标转换，开启后，事件InteractionEvent中的localX localY为本地坐标，false情况下为0 */
        this.isOpenLocalPoint = false;
        this.localOffset = new PIXI.Point();
        this.offset = new PIXI.Point();
        this.movementX = 0;
        this.movementY = 0;
        this.ishover = false;
        this.mouse = new PIXI.Point();
        this.bound = false;
        this.right = false;
        this.hover = true;
        this.double = false;
        this.time = 0;
        this.eventnameMousedown = "mousedown" /* mousedown */;
        this.eventnameMouseup = "mouseup" /* mouseup */;
        this.eventnameMouseupoutside = "mouseupoutside" /* mouseupoutside */;
        this.isStop = true;
        this.obj = obj;
        if (isOpenEmitEvent !== undefined) {
            this.isOpenEmitEvent = isOpenEmitEvent;
        }
        if (includeHover !== undefined) {
            this.right = includeHover;
        }
        if (rightMouseButton !== undefined) {
            this.hover = rightMouseButton;
        }
        if (doubleClick !== undefined) {
            this.double = doubleClick;
        }
        if (this.right) {
            this.eventnameMousedown = "rightdown" /* mouseRightDown */;
            this.eventnameMouseup = "rightup" /* mouseRightup */;
            this.eventnameMouseupoutside = "rightupoutside" /* mouseRightupoutside */;
        }
        obj.interactive = true;
        this.startEvent();
    }
    ClickEvent.prototype.getTarget = function () {
        return this.obj;
    };
    ClickEvent.prototype.startEvent = function () {
        if (this.isStop) {
            this.obj.container.on(this.eventnameMousedown, this._onMouseDown, this);
            if (!this.right)
                this.obj.container.on("touchstart" /* touchstart */, this._onMouseDown, this);
            if (this.hover) {
                this.obj.container.on("mouseover" /* mouseover */, this._onMouseOver, this);
                this.obj.container.on("mouseout" /* mouseout */, this._onMouseOut, this);
            }
            this.isStop = false;
        }
    };
    /** 清除拖动 */
    ClickEvent.prototype.stopEvent = function () {
        if (this.bound) {
            this.obj.container.off(this.eventnameMouseup, this._onMouseUp, this);
            this.obj.container.off(this.eventnameMouseupoutside, this._onMouseUpOutside, this);
            if (!this.right) {
                this.obj.container.off("touchend" /* touchend */, this._onMouseUp, this);
                this.obj.container.off("touchendoutside" /* touchendoutside */, this._onMouseUpOutside, this);
            }
            this.bound = false;
        }
        this.obj.container.off(this.eventnameMousedown, this._onMouseDown, this);
        if (!this.right)
            this.obj.container.off("touchstart" /* touchstart */, this._onMouseDown, this);
        if (this.hover) {
            this.obj.container.off("mouseover" /* mouseover */, this._onMouseOver, this);
            this.obj.container.off("mouseout" /* mouseout */, this._onMouseOut, this);
            this.obj.container.off("mousemove" /* mousemove */, this._onMouseMove, this);
            this.obj.container.off("touchmove" /* touchmove */, this._onMouseMove, this);
        }
        this.isStop = true;
    };
    ClickEvent.prototype._onMouseDown = function (e) {
        this.setLocalPoint(e);
        this.mouse.copyFrom(e.data.global);
        this.id = e.data.identifier;
        this.onPress && this.onPress.call(this.obj, e, this.obj, true), this.obj;
        this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onPress, e, true);
        if (this.obj.listenerCount(TouchMouseEvent_1.TouchMouseEvent.onDown) > 0) {
            this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onDown, e);
        }
        if (!this.bound) {
            this.obj.container.on(this.eventnameMouseup, this._onMouseUp, this);
            this.obj.container.on(this.eventnameMouseupoutside, this._onMouseUpOutside, this);
            if (!this.right) {
                this.obj.container.on("touchend" /* touchend */, this._onMouseUp, this);
                this.obj.container.on("touchendoutside" /* touchendoutside */, this._onMouseUpOutside, this);
            }
            this.bound = true;
        }
        if (this.double) {
            var now = performance.now();
            if (now - this.time < 210) {
                this.onClick && this.onClick.call(this.obj, e, this.obj);
                this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onClick, e);
            }
            else {
                this.time = now;
            }
        }
        e.data.originalEvent.preventDefault();
    };
    ClickEvent.prototype.emitTouchEvent = function (event, e) {
        var _a;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (this.isOpenEmitEvent) {
            e.type = event.toString();
            (_a = this.obj).emit.apply(_a, [e.type, e, this.obj].concat(args));
        }
    };
    ClickEvent.prototype._mouseUpAll = function (e) {
        if (e.data.identifier !== this.id)
            return;
        this.offset.set(e.data.global.x - this.mouse.x, e.data.global.y - this.mouse.y);
        if (this.bound) {
            this.obj.container.off(this.eventnameMouseup, this._onMouseUp, this);
            this.obj.container.off(this.eventnameMouseupoutside, this._onMouseUpOutside, this);
            if (!this.right) {
                this.obj.container.off("touchend" /* touchend */, this._onMouseUp, this);
                this.obj.container.off("touchendoutside" /* touchendoutside */, this._onMouseUpOutside, this);
            }
            this.bound = false;
        }
        this.onPress && this.onPress.call(this.obj, e, this.obj, false);
        if (this.obj.listenerCount(TouchMouseEvent_1.TouchMouseEvent.onUp) > 0) {
            this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onUp, e);
        }
        this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onPress, e, false);
    };
    ClickEvent.prototype._onMouseUp = function (e) {
        if (e.data.identifier !== this.id)
            return;
        this._mouseUpAll(e);
        //prevent clicks with scrolling/dragging objects
        if (this.obj.dragThreshold) {
            this.movementX = Math.abs(this.offset.x);
            this.movementY = Math.abs(this.offset.y);
            if (Math.max(this.movementX, this.movementY) > this.obj.dragThreshold)
                return;
        }
        if (!this.double) {
            this.onClick && this.onClick.call(this.obj, e, this.obj);
            this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onClick, e, false);
        }
    };
    ClickEvent.prototype._onMouseUpOutside = function (e) {
        if (e.data.identifier !== this.id)
            return;
        this._mouseUpAll(e);
    };
    ClickEvent.prototype._onMouseOver = function (e) {
        if (!this.ishover) {
            this.ishover = true;
            this.obj.container.on("mousemove" /* mousemove */, this._onMouseMove, this);
            this.obj.container.on("touchmove" /* touchmove */, this._onMouseMove, this);
            this.onHover && this.onHover.call(this.obj, e, this.obj, true);
            this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onHover, e, true);
        }
    };
    ClickEvent.prototype._onMouseOut = function (e) {
        if (this.ishover) {
            this.ishover = false;
            this.obj.container.off("mousemove" /* mousemove */, this._onMouseMove, this);
            this.obj.container.off("touchmove" /* touchmove */, this._onMouseMove, this);
            this.onHover && this.onHover.call(this.obj, e, this.obj, false);
            this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onHover, e, false);
        }
    };
    ClickEvent.prototype._onMouseMove = function (e) {
        this.setLocalPoint(e);
        this.onMove && this.onMove.call(this.obj, e, this.obj);
        this.emitTouchEvent(TouchMouseEvent_1.TouchMouseEvent.onMove, e);
    };
    ClickEvent.prototype.setLocalPoint = function (e) {
        if (this.isOpenLocalPoint) {
            this.obj.container.toLocal(e.data.global, undefined, this.localOffset);
            e.local = this.localOffset;
        }
    };
    ClickEvent.prototype.remove = function () {
        this.stopEvent();
        this.onPress = undefined;
        this.onHover = undefined;
        this.onClick = undefined;
        this.onMove = undefined;
        this.obj.container.interactive = false;
    };
    return ClickEvent;
}());
exports.ClickEvent = ClickEvent;


/***/ }),

/***/ "./src/interaction/DragDropController.ts":
/*!***********************************************!*\
  !*** ./src/interaction/DragDropController.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 记录当前正在拖动的UI组件列表
 * @private
 */
exports._items = [];
/**
 * 添加拖动组件到控制器
 * @param item 要添加的UI组件
 * @param e 传送的事件
 * @returns true|false
 * @since 1.0.0
 */
function add(item, e) {
    item.attach.dragDropEventId = e.data.identifier;
    if (exports._items.indexOf(item) === -1) {
        exports._items.push(item);
        return true;
    }
    return false;
}
exports.add = add;
/**
 * 获取正在拖动组件
 * @param item 要获取的UI组件
 * @returns flase | item
 */
function getItem(item) {
    var index;
    for (var i = 0; i < exports._items.length; i++) {
        if (exports._items[i] === item) {
            index = i;
            break;
        }
    }
    if (index !== undefined) {
        exports._items.splice(index, 1);
        return item;
    }
    else {
        return false;
    }
}
exports.getItem = getItem;
/**
 * 根据事件对象与分组名获取拖动项
 * @param e 事件对象
 * @param group 分组名
 */
function getEventItem(e, group) {
    var item = null, index;
    var id = e.data.identifier;
    for (var i = 0; i < exports._items.length; i++) {
        if (exports._items[i].attach.dragDropEventId === id) {
            if (group !== exports._items[i].attach.dragGroup && exports._items[i].attach.dragGroup !== "") {
                return false;
            }
            item = exports._items[i];
            index = i;
            break;
        }
    }
    if (index !== undefined) {
        exports._items.splice(index, 1);
        return item;
    }
    else {
        return false;
    }
}
exports.getEventItem = getEventItem;


/***/ }),

/***/ "./src/interaction/DragEvent.ts":
/*!**************************************!*\
  !*** ./src/interaction/DragEvent.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 多拽相关的事件处理类
 *
 *  可侦听事件:
 * ```
 *  {InteractionEvent}.DraggableEvent.onDragPress
 *  {InteractionEvent}.DraggableEvent.onDragStart
 *  {InteractionEvent}.DraggableEvent.onDragMove
 *  {InteractionEvent}.DraggableEvent.onDragEnd
 * ```
 *  可赋值方法:
 * ```
 * onPress: ((e: InteractionEvent, isPressed: boolean,dragObj?: DragEvent) => void) | undefined;
 * onDragEnd: ((e: InteractionEvent,dragObj?: DragEvent) => void) | undefined
 * onDragMove: ((e: InteractionEvent, offset: PIXI.Point,dragObj?: DragEvent) => void) | undefined
 * onDragStart: ((e: InteractionEvent,dragObj?: DragEvent) => void) | undefined
 * ```
 *
 * @example 可查看 `Slider` 源码
 *
 * @since 1.0.0
 */
var DragEvent = /** @class */ (function () {
    function DragEvent(obj) {
        this.id = 0;
        this.offset = new PIXI.Point();
        this.movementX = 0;
        this.movementY = 0;
        this.bound = false;
        this.start = new PIXI.Point();
        this.mouse = new PIXI.Point();
        this.cancel = false;
        this.dragging = false;
        this.isStop = true;
        this.obj = obj;
        obj.interactive = true;
        this.startEvent();
    }
    DragEvent.prototype.startEvent = function () {
        if (this.isStop) {
            this.obj.container.on("mousedown" /* mousedown */, this._onDragStart, this);
            this.obj.container.on("touchstart" /* touchstart */, this._onDragStart, this);
            this.isStop = false;
        }
    };
    DragEvent.prototype._onDragStart = function (e) {
        if (this.obj.dragStopPropagation)
            e.stopPropagation();
        this.id = e.data.identifier;
        this.onDragPress && this.onDragPress.call(this.obj, e, true, this);
        if (!this.bound && this.obj.parent && this.obj.stage) {
            var stage = this.obj.stage.container;
            this.start.copyFrom(e.data.global);
            stage.on("mousemove" /* mousemove */, this._onDragMove, this);
            stage.on("touchmove" /* touchmove */, this._onDragMove, this);
            stage.on("mouseup" /* mouseup */, this._onDragEnd, this);
            stage.on("mouseupoutside" /* mouseupoutside */, this._onDragEnd, this);
            stage.on("touchend" /* touchend */, this._onDragEnd, this);
            stage.on("touchendoutside" /* touchendoutside */, this._onDragEnd, this);
            stage.on("touchcancel" /* touchcancel */, this._onDragEnd, this);
            this.bound = true;
        }
        e.data.originalEvent.preventDefault();
    };
    DragEvent.prototype._onDragMove = function (e) {
        if (e.data.identifier !== this.id)
            return;
        this.mouse.copyFrom(e.data.global);
        this.offset.set(this.mouse.x - this.start.x, this.mouse.y - this.start.y);
        if (!this.dragging) {
            this.movementX = Math.abs(this.offset.x);
            this.movementY = Math.abs(this.offset.y);
            if (this.movementX === 0 && this.movementY === 0 || Math.max(this.movementX, this.movementY) < this.obj.dragThreshold)
                return; //thresshold
            if (this.dragRestrictAxis !== undefined) {
                this.cancel = false;
                if (this.dragRestrictAxis == "x" && this.movementY > this.movementX)
                    this.cancel = true;
                else if (this.dragRestrictAxis == "y" && this.movementY <= this.movementX)
                    this.cancel = true;
                if (this.cancel) {
                    this._onDragEnd(e);
                    return;
                }
            }
            this.onDragStart && this.onDragStart.call(this.obj, e, this);
            this.dragging = true;
        }
        this.onDragMove && this.onDragMove.call(this.obj, e, this.offset, this);
    };
    DragEvent.prototype._onDragEnd = function (e) {
        if (e.data.identifier !== this.id)
            return;
        if (this.bound && this.obj.stage) {
            var stage = this.obj.stage.container;
            stage.off("mousemove" /* mousemove */, this._onDragMove, this);
            stage.off("touchmove" /* touchmove */, this._onDragMove, this);
            stage.off("mouseup" /* mouseup */, this._onDragEnd, this);
            stage.off("mouseupoutside" /* mouseupoutside */, this._onDragEnd, this);
            stage.off("touchend" /* touchend */, this._onDragEnd, this);
            stage.off("touchendoutside" /* touchendoutside */, this._onDragEnd, this);
            stage.off("touchcancel" /* touchcancel */, this._onDragEnd, this);
            this.dragging = false;
            this.bound = false;
            this.onDragEnd && this.onDragEnd.call(this.obj, e, this);
            this.onDragPress && this.onDragPress.call(this.obj, e, false, this);
        }
    };
    /** 清除拖动 */
    DragEvent.prototype.stopEvent = function () {
        if (this.bound && this.obj.stage) {
            var stage = this.obj.stage.container;
            stage.off("mousemove" /* mousemove */, this._onDragMove, this);
            stage.off("touchmove" /* touchmove */, this._onDragMove, this);
            stage.off("mouseup" /* mouseup */, this._onDragEnd, this);
            stage.off("mouseupoutside" /* mouseupoutside */, this._onDragEnd, this);
            stage.off("touchend" /* touchend */, this._onDragEnd, this);
            stage.off("touchendoutside" /* touchendoutside */, this._onDragEnd, this);
            this.bound = false;
        }
        this.obj.container.off("mousedown" /* mousedown */, this._onDragStart, this);
        this.obj.container.off("touchstart" /* touchstart */, this._onDragStart, this);
        this.isStop = true;
    };
    DragEvent.prototype.remove = function () {
        this.stopEvent();
        this.onDragPress = undefined;
        this.onDragEnd = undefined;
        this.onDragMove = undefined;
        this.onDragStart = undefined;
        this.obj.interactive = false;
    };
    return DragEvent;
}());
exports.DragEvent = DragEvent;


/***/ }),

/***/ "./src/interaction/GroupController.ts":
/*!********************************************!*\
  !*** ./src/interaction/GroupController.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @private
 */
exports._GroupObject = new Map();
/**
 * 注册分组，
 */
function registrerGroup(ui) {
    if (ui.groupName) {
        var group = exports._GroupObject.get(ui.groupName);
        if (!group) {
            group = {};
            exports._GroupObject.set(ui.groupName, group);
        }
        group[ui.uuid] = ui;
    }
}
exports.registrerGroup = registrerGroup;
/**
 * 注销指定分组或指定分组的子项
 */
function unRegistrerGroup(ui) {
    if (ui.groupName) {
        var group = exports._GroupObject.get(ui.groupName);
        if (group) {
            delete group[ui.uuid];
        }
        var isKey = false;
        for (var key in group) {
            isKey = true;
            break;
        }
        if (isKey) {
            exports._GroupObject.delete(ui.groupName);
        }
    }
}
exports.unRegistrerGroup = unRegistrerGroup;
/** 设置选中 */
function getGroup(name) {
    if (name == undefined) {
        return undefined;
    }
    return exports._GroupObject.get(name);
}
exports.getGroup = getGroup;


/***/ }),

/***/ "./src/interaction/Index.ts":
/*!**********************************!*\
  !*** ./src/interaction/Index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ClickEvent_1 = __webpack_require__(/*! ./ClickEvent */ "./src/interaction/ClickEvent.ts");
exports.ClickEvent = ClickEvent_1.ClickEvent;
var DragDropController = __webpack_require__(/*! ./DragDropController */ "./src/interaction/DragDropController.ts");
exports.DragDropController = DragDropController;
var DragEvent_1 = __webpack_require__(/*! ./DragEvent */ "./src/interaction/DragEvent.ts");
exports.DragEvent = DragEvent_1.DragEvent;
var InputController = __webpack_require__(/*! ./InputController */ "./src/interaction/InputController.ts");
exports.InputController = InputController;
var MouseScrollEvent_1 = __webpack_require__(/*! ./MouseScrollEvent */ "./src/interaction/MouseScrollEvent.ts");
exports.MouseScrollEvent = MouseScrollEvent_1.MouseScrollEvent;
var InteractionEvent_1 = __webpack_require__(/*! ../event/InteractionEvent */ "./src/event/InteractionEvent.ts");
exports.InteractionEvent = InteractionEvent_1.InteractionEvent;
var TouchMouseEvent_1 = __webpack_require__(/*! ../event/TouchMouseEvent */ "./src/event/TouchMouseEvent.ts");
exports.TouchMouseEvent = TouchMouseEvent_1.TouchMouseEvent;
var ComponentEvent = __webpack_require__(/*! ../event/ComponentEvent */ "./src/event/ComponentEvent.ts");
exports.ComponentEvent = ComponentEvent;
var GroupController = __webpack_require__(/*! ./GroupController */ "./src/interaction/GroupController.ts");
exports.GroupController = GroupController;


/***/ }),

/***/ "./src/interaction/InputController.ts":
/*!********************************************!*\
  !*** ./src/interaction/InputController.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 记录当前正在拖动的UI组件列表
 * @private
 */
var _currentItem;
/**
 *
 * @private
 */
exports.tabGroups = {};
/**
 *
 * @private
 */
exports._checkGroupObject = {
    groups: {},
    values: {}
};
/**
 * 注册组件
 * @param item
 * @param tabIndex 切换位置
 * @param tabGroup 分组名
 * @returns 依据tabIndex返回是否需要排序 0，-1，1
 */
function registrer(item, tabIndex, tabGroup) {
    var groupName = tabGroup || "default";
    var items = exports.tabGroups[groupName];
    if (!items)
        items = exports.tabGroups[groupName] = [];
    var i = items.indexOf(item);
    if (i === -1) {
        item.attach._tabIndex = tabIndex !== undefined ? tabIndex : -1;
        item.attach._tabGroup = items;
        items.push(item);
        items.sort(function (a, b) {
            if (a.attach._tabIndex < b.attach._tabIndex)
                return -1;
            if (a.attach._tabIndex > b.attach._tabIndex)
                return 1;
            return 0;
        });
    }
}
exports.registrer = registrer;
/** 失去焦点时 */
function blur() {
    var obj = _currentItem;
    if (obj) {
        if (obj.blur && typeof obj.blur == "function") {
            obj.blur();
        }
    }
}
exports.blur = blur;
/** 设置当前输入组件 */
function set(item) {
    blur();
    _currentItem = item;
}
exports.set = set;
/** 清楚当前设置的组件 */
function clear() {
    _currentItem = undefined;
}
exports.clear = clear;
/** 一般再按下键盘tab健执行 焦点获取与设置 */
function fireTab() {
    if (_currentItem) {
        var _tabGroup = _currentItem.attach._tabGroup;
        var i = _tabGroup.indexOf(_currentItem) + 1;
        if (i >= _tabGroup.length)
            i = 0;
        var obj = _tabGroup[i];
        if (obj.focus)
            obj.focus();
    }
}
exports.fireTab = fireTab;
/** 一般再按下键盘向下箭头执行 焦点获取与设置 */
function fireNext() {
    if (_currentItem) {
        var _tabGroup = _currentItem.attach._tabGroup;
        var i = _tabGroup.indexOf(_currentItem) + 1;
        if (i >= _tabGroup.length)
            i = _tabGroup.length - 1;
        var obj = _tabGroup[i];
        if (obj.focus)
            obj.focus();
    }
}
exports.fireNext = fireNext;
/** 一般再按下键盘向上箭头执行 焦点获取与设置 */
function firePrev() {
    if (_currentItem) {
        var _tabGroup = _currentItem.attach._tabGroup;
        var i = _tabGroup.indexOf(_currentItem) - 1;
        if (i < 0)
            i = 0;
        var obj = _tabGroup[i];
        if (obj.focus)
            obj.focus();
    }
}
exports.firePrev = firePrev;
/**
 * 注册分组，一般用于checkBox组件的分组操作
 *
 *  ==== 目前没有实现卸载，如果无限制创建checkbox并设置分组可能引发泄露 ====
 *
 * checkGroups = [key]:{["value"]:cb}
 */
function registrerCheckGroup(cb) {
    var name = cb.checkGroup;
    if (name) {
        var group = exports._checkGroupObject.groups[name];
        if (!group)
            group = exports._checkGroupObject.groups[name] = {};
        group[cb.uuid.toString()] = cb;
        if (cb.checked)
            exports._checkGroupObject.values[name] = cb.uuid.toString();
    }
}
exports.registrerCheckGroup = registrerCheckGroup;
/**
 * 注销指定分组或指定分组的子项
 * @param cb CheckBox
 */
function unRegistrerCheckGroup(cb) {
    if (cb.checkGroup && exports._checkGroupObject.groups[cb.checkGroup]) {
        delete exports._checkGroupObject.groups[cb.checkGroup][cb.uuid.toString()];
        var isKey = false;
        for (var key in exports._checkGroupObject.groups[cb.checkGroup]) {
            if (key)
                isKey = true;
            break;
        }
        if (!isKey) {
            delete exports._checkGroupObject.groups[name];
        }
        if (cb.checked)
            exports._checkGroupObject.values[name] = undefined;
    }
}
exports.unRegistrerCheckGroup = unRegistrerCheckGroup;
/** 更新分组中选中的checkbox组件  */
function updateCheckGroupSelected(cb) {
    if (cb.checkGroup) {
        var group = exports._checkGroupObject.groups[cb.checkGroup];
        for (var val in group) {
            var b = group[val];
            if (b !== cb)
                b.checked = false;
        }
        exports._checkGroupObject.values[cb.checkGroup] = cb.uuid.toString();
    }
}
exports.updateCheckGroupSelected = updateCheckGroupSelected;
/** 获取分组中选中的checkbox值 */
function getCheckGroupSelectedValue(name) {
    var uuid = exports._checkGroupObject.values[name];
    if (uuid) {
        var cb = exports._checkGroupObject.groups[name][uuid.toString()];
        return cb.value;
    }
    return undefined;
}
exports.getCheckGroupSelectedValue = getCheckGroupSelectedValue;
/** 设置选中 */
function setCheckGroupSelectedValue(name, uuid) {
    var group = exports._checkGroupObject.groups[name];
    if (group) {
        var cb = group[uuid];
        if (cb) {
            cb.checked = true;
        }
    }
}
exports.setCheckGroupSelectedValue = setCheckGroupSelectedValue;


/***/ }),

/***/ "./src/interaction/MouseScrollEvent.ts":
/*!*********************************************!*\
  !*** ./src/interaction/MouseScrollEvent.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
/**
 * 鼠标滑轮事件
 *
 *  可侦听事件(未实现):
 * ```
 *  {InteractionEvent}.MouseScroll.xxxxxx.
 * ```
 *  可赋值方法:
 * ```
 * oonMouseScroll: ((e: WheelEvent,delta: PIXI.Point) => void) | undefined
 * ```
 *
 * @example 可查看 `Slider` 源码
 *
 * @since 1.0.0
 */
var MouseScrollEvent = /** @class */ (function () {
    /**
     *
     * @param obj 需要绑定的对象
     * @param preventDefault 是否组织系统默认的事件触发
     */
    function MouseScrollEvent(obj, preventDefault) {
        this.id = 0;
        this.delta = new PIXI.Point();
        this.isStop = true;
        this.obj = obj;
        this.preventDefault = preventDefault;
        obj.container.interactive = true;
        this.startEvent();
    }
    MouseScrollEvent.prototype.startEvent = function () {
        if (this.isStop) {
            this.obj.container.on("mouseover" /* mouseover */, this._onHover, this);
            this.obj.container.on("mouseout" /* mouseout */, this._onMouseOut, this);
            this.isStop = false;
        }
    };
    MouseScrollEvent.prototype._onMouseScroll = function (_e) {
        _e;
        var e = _e;
        if (this.preventDefault)
            e.preventDefault();
        if (typeof e.deltaX !== "undefined")
            this.delta.set(e.deltaX, e.deltaY);
        else //Firefox{}
            this.delta.set(e.axis == 1 ? e.detail * 60 : 0, e.axis == 2 ? e.detail * 60 : 0);
        this.onMouseScroll && this.onMouseScroll.call(this.obj, e, this.delta);
    };
    //e?: interaction.InteractionEvent
    MouseScrollEvent.prototype._onHover = function () {
        if (this.mouseScrllBind === undefined) {
            this.id = Utils_1.uid();
            this.mouseScrllBind = this._onMouseScroll.bind(this);
            document.addEventListener("mousewheel", this.mouseScrllBind, { passive: false });
            document.addEventListener("DOMMouseScroll", this.mouseScrllBind, { passive: false });
        }
    };
    //e?: interaction.InteractionEvent
    MouseScrollEvent.prototype._onMouseOut = function () {
        if (this.mouseScrllBind) {
            document.removeEventListener("mousewheel", this.mouseScrllBind);
            document.removeEventListener("DOMMouseScroll", this.mouseScrllBind);
            this.mouseScrllBind = undefined;
        }
    };
    MouseScrollEvent.prototype.stopEvent = function () {
        if (this.mouseScrllBind) {
            document.removeEventListener("mousewheel", this.mouseScrllBind);
            document.removeEventListener("DOMMouseScroll", this.mouseScrllBind);
            this.mouseScrllBind = undefined;
        }
        this.obj.container.removeListener('mouseover', this._onHover, this);
        this.obj.container.removeListener('mouseout', this._onMouseOut, this);
        this.isStop = true;
    };
    MouseScrollEvent.prototype.remove = function () {
        this.stopEvent();
    };
    return MouseScrollEvent;
}());
exports.MouseScrollEvent = MouseScrollEvent;


/***/ }),

/***/ "./src/layout/CSSBasicLayout.ts":
/*!**************************************!*\
  !*** ./src/layout/CSSBasicLayout.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UIKeys = __webpack_require__(/*! ../core/DisplayLayoutKeys */ "./src/core/DisplayLayoutKeys.ts");
exports.$tempRectangle = new PIXI.Rectangle();
/**
 * 布局尺寸>外部显式设置尺寸>测量尺寸 的优先级顺序返回尺寸
 */
function formatRelative(value, total) {
    if (value == undefined) {
        return NaN;
    }
    if (typeof value === "number") {
        return value;
    }
    var str = value;
    var index = str.indexOf("%");
    if (index == -1) {
        return +str;
    }
    var percent = +str.substring(0, index);
    return percent * 0.01 * total;
}
exports.formatRelative = formatRelative;
/**
 * @private
 * 一个工具方法，使用BasicLayout规则布局目标对象。
 */
function updateBasicDisplayList(target, unscaledWidth, unscaledHeight) {
    if (!target)
        return;
    //console.log(target.container.name);
    var values = target.$values;
    var parentWidth = target.parent ? target.parent.$values[UIKeys.width] : 1;
    var parentHeight = target.parent ? target.parent.$values[UIKeys.height] : 1;
    var hCenter = formatRelative(values[UIKeys.horizontalCenter], parentWidth * 0.5);
    var vCenter = formatRelative(values[UIKeys.verticalCenter], parentHeight * 0.5);
    var left = formatRelative(values[UIKeys.left], parentWidth || 1);
    var right = formatRelative(values[UIKeys.right], parentWidth);
    var top = formatRelative(values[UIKeys.top], parentHeight || 1);
    var bottom = formatRelative(values[UIKeys.bottom], parentHeight);
    var childWidth = unscaledWidth;
    var childHeight = unscaledHeight;
    if (!isNaN(left) && !isNaN(right)) {
        childWidth = parentWidth - right - left;
    }
    if (!isNaN(top) && !isNaN(bottom)) {
        childHeight = parentHeight - bottom - top;
    }
    target.setMeasuredSize(childWidth, childHeight);
    target.setActualSize(childWidth, childHeight);
    var childX = NaN;
    var childY = NaN;
    if (!isNaN(hCenter))
        childX = Math.round((parentWidth - childWidth) / 2 + hCenter);
    else if (!isNaN(left))
        childX = left;
    else if (!isNaN(right))
        childX = parentWidth - childWidth - right;
    else
        childX = target.x;
    if (!isNaN(vCenter))
        childY = Math.round((parentHeight - childHeight) / 2 + vCenter);
    else if (!isNaN(top))
        childY = top;
    else if (!isNaN(bottom))
        childY = parentHeight - childHeight - bottom;
    else
        childY = target.y;
    target.setPosition(childX, childY);
}
exports.updateBasicDisplayList = updateBasicDisplayList;


/***/ }),

/***/ "./src/layout/CSSGridLayout.ts":
/*!*************************************!*\
  !*** ./src/layout/CSSGridLayout.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var CSSBasicLayout_1 = __webpack_require__(/*! ./CSSBasicLayout */ "./src/layout/CSSBasicLayout.ts");
function getColumnRowValue(gridTemplate, parentValue) {
    var list = [];
    var isInfinity = false;
    if (gridTemplate) {
        if (gridTemplate[0] === "repeat") {
            if (gridTemplate[1] === Infinity) {
                isInfinity = true;
                list.push(Utils_1.formatRelative(0, parentValue));
            }
            else {
                for (var i = 0; i < gridTemplate[1]; i++) {
                    list.push(Utils_1.formatRelative(gridTemplate[2], parentValue));
                }
            }
        }
        else {
            for (var i = 0; i < gridTemplate.length; i++) {
                list.push(Utils_1.formatRelative(gridTemplate[i], parentValue));
            }
        }
    }
    return { list: list, isInfinity: isInfinity };
}
/**
 *  更新网格布局
 *
 * 单位目前只支持数值或百分比：100 ，”100%“
 *
 *  网格布局中，子容器的位置与宽高可能失效
 *
 * 关于grid布局的词汇表
 *
 * 格网 https://developer.mozilla.org/zh-CN/docs/Glossary/Grid
 *
 * 网格行 gridTemplateRows https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-columns
 *
 * 网格列 gridTemplateColumns https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-rows
 *
 * 网格行间距 gridRowGap   https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-row-gap
 *
 * 网格列间距 gridColumnGap  https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-column-gap
 *
 * 网格轴 （未实现） 支持居中方式为：justifyContent，alignContent
 *
 * 网格线（未实现） https://developer.mozilla.org/en-US/docs/Glossary/Grid_Lines
 *
 * 网格面积（未实现）https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Areas
 */
function updateGridLayout(target) {
    if (target.parent == undefined) {
        return CSSBasicLayout_1.$tempRectangle;
    }
    if (target.style == undefined) {
        return CSSBasicLayout_1.$tempRectangle;
    }
    var rowHeightTotal = 0;
    var columnWidthTotal = 0;
    var style = target.style;
    var gridColumnGap = style.gridColumnGap || 0;
    var gridRowGap = style.gridRowGap || 0;
    var column = getColumnRowValue(style.gridTemplateColumns, target.parent.width);
    var row = getColumnRowValue(style.gridTemplateRows, target.parent.height);
    var child;
    var cloumnIndex = 0;
    var rowIndex = 0;
    var cloumnWidth = 0;
    var rowHeight = 0;
    var widthTotal = 0;
    for (var i = 0; i < target.uiChildren.length; i++) {
        child = target.uiChildren[i];
        if (child.style.justifyContent || child.style.alignContent) {
            continue;
        }
        if (column.isInfinity) {
            cloumnWidth = column.list[0] || 0;
        }
        else {
            cloumnWidth = column.list[cloumnIndex] || 0;
        }
        if (row.isInfinity) {
            rowHeight = row.list[0] || 0;
        }
        else {
            rowHeight = row.list[rowIndex] || 0;
        }
        child.width = child.explicitWidth || cloumnWidth;
        child.height = child.explicitHeight || rowHeight;
        child.x = widthTotal;
        child.y = rowHeightTotal;
        widthTotal += cloumnWidth + gridColumnGap;
        cloumnIndex++;
        if (widthTotal > columnWidthTotal) {
            columnWidthTotal = widthTotal;
        }
        if (cloumnIndex >= column.list.length) {
            cloumnIndex = 0;
            widthTotal = 0;
            if (rowHeight !== 0) {
                rowHeightTotal += (rowHeight + gridRowGap);
            }
            else {
                rowHeightTotal += (child.height + gridRowGap);
            }
            if (!column.isInfinity)
                rowIndex++;
        }
    }
    columnWidthTotal = Math.max(target.width, columnWidthTotal - gridColumnGap);
    rowHeightTotal = Math.max(target.height, rowHeightTotal - gridRowGap);
    target.width = columnWidthTotal;
    target.height = rowHeightTotal;
    CSSBasicLayout_1.$tempRectangle.width = columnWidthTotal;
    CSSBasicLayout_1.$tempRectangle.height = rowHeightTotal;
    return CSSBasicLayout_1.$tempRectangle;
}
exports.updateGridLayout = updateGridLayout;


/***/ }),

/***/ "./src/layout/CSSLayout.ts":
/*!*********************************!*\
  !*** ./src/layout/CSSLayout.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CSSGridLayout_1 = __webpack_require__(/*! ./CSSGridLayout */ "./src/layout/CSSGridLayout.ts");
var CSSBasicLayout_1 = __webpack_require__(/*! ./CSSBasicLayout */ "./src/layout/CSSBasicLayout.ts");
exports.$TempRectangle = new PIXI.Rectangle();
function updateDisplayAlign(target, parentWidth, parentHeight, marginTop, marginLeft) {
    if (marginTop === void 0) { marginTop = 0; }
    if (marginLeft === void 0) { marginLeft = 0; }
    if (target.style == undefined) {
        return;
    }
    if (target.style.justifyContent == undefined && target.style.alignContent == undefined) {
        return;
    }
    var startX = 0;
    var startY = 0;
    var bounds = target.getPreferredBounds(exports.$TempRectangle);
    switch (target.style.justifyContent) {
        case "center":
            startX = parentWidth - bounds.width >> 1;
            break;
        case "flex-start":
            startX = marginLeft;
            break;
        case "flex-end":
            startX = parentWidth - bounds.width - (marginLeft);
            break;
    }
    switch (target.style.alignContent) {
        case "center":
            startY = parentHeight - bounds.height >> 1;
            break;
        case "flex-start":
            startY = marginTop;
            break;
        case "flex-end":
            startY = parentHeight - bounds.height - (marginTop);
            break;
    }
    if (startX !== 0)
        target.x = startX;
    if (startY !== 0)
        target.y = startY;
}
/**
 * 调整目标的元素的大小并定位这些元素。
 */
function updateDisplayLayout(target, unscaledWidth, unscaledHeight) {
    if (target.style == undefined) {
        return;
    }
    if (target.style.display === "block") {
        var pos = CSSBasicLayout_1.updateBasicDisplayList(target, unscaledWidth, unscaledHeight);
        //console.log(pos);
    }
    else if (target.style.display === "grid") {
        var size = CSSGridLayout_1.updateGridLayout(target);
        CSSBasicLayout_1.updateBasicDisplayList(target, size.width, size.height);
    }
    if (target.parent) {
        updateDisplayAlign(target, target.parent.width, target.parent.height, target.style.gridRowGap, target.style.gridColumnGap);
    }
    if (target.isContainer) {
        var bounds = target.getPreferredBounds(exports.$TempRectangle);
        var child = void 0;
        for (var i = 0; i < target.uiChildren.length; i++) {
            child = target.uiChildren[i];
            updateDisplayAlign(child, bounds.width, bounds.height, child.style.gridRowGap, child.style.gridColumnGap);
        }
    }
}
exports.updateDisplayLayout = updateDisplayLayout;


/***/ }),

/***/ "./src/layout/CSSSSystem.ts":
/*!**********************************!*\
  !*** ./src/layout/CSSSSystem.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var DisplayObject_1 = __webpack_require__(/*! ../core/DisplayObject */ "./src/core/DisplayObject.ts");
/** ===================== background  ===================== */
function backgroundColor(target) {
    if (target.style == undefined) {
        return;
    }
    if (target.style.backgroundColor == undefined && target.$background == undefined) {
        return;
    }
    if (target.$background === undefined) {
        target.$background = new PIXI.Graphics();
        target.$background.name = "background";
        target.container.addChildAt(target.$background, 0);
    }
}
exports.backgroundColor = backgroundColor;
function backgroundPositionSize(target) {
    if (target.style == undefined) {
        return;
    }
    if (target.$background && target.$background.children.length > 0) {
        var sprite = target.$background.getChildAt(0);
        var style = target.style;
        if (sprite instanceof PIXI.TilingSprite) {
            sprite.tilePosition.set(style.backgroundPositionX || 0, style.backgroundPositionY || 0);
        }
        else {
            if (style.backgroundSize) {
                sprite.width = style.backgroundSize[0];
                sprite.height = style.backgroundSize[1];
            }
            sprite.position.set(style.backgroundPositionX || 0, style.backgroundPositionY || 0);
        }
    }
}
exports.backgroundPositionSize = backgroundPositionSize;
function backgroundRepeat(target) {
    if (target.style == undefined) {
        return;
    }
    var style = target.style;
    if (style.backgroundImage && target.$background) {
        target.$background.removeChildren();
        var backgroundImage_1;
        if (style.backgroundImage instanceof PIXI.Texture) {
            backgroundImage_1 = style.backgroundImage;
        }
        else if (typeof style.backgroundImage === "string") {
            backgroundImage_1 = Utils_1.getTexture(style.backgroundImage);
        }
        if (backgroundImage_1) {
            var sprite = void 0;
            if (style.backgroundRepeat === undefined) {
                style.backgroundRepeat = "no-repeat";
            }
            if (style.backgroundRepeat === "repeat") {
                sprite = new PIXI.TilingSprite(backgroundImage_1);
            }
            else {
                sprite = new PIXI.Sprite(backgroundImage_1);
            }
            target.$background.addChild(sprite);
            var maskGraphics = new PIXI.Graphics();
            target.$background.addChild(maskGraphics);
            target.$background.mask = maskGraphics;
        }
    }
}
exports.backgroundRepeat = backgroundRepeat;
function backgroundImage(target) {
    if (target.$background === undefined) {
        target.$background = new PIXI.Graphics();
        target.$background.name = "background";
        target.container.addChildAt(target.$background, 0);
    }
    backgroundRepeat(target);
    backgroundPositionSize(target);
}
exports.backgroundImage = backgroundImage;
/** ===================== mask  ===================== */
function maskPosition(target) {
    if (target.style == undefined) {
        return;
    }
    if (target.$mask) {
        var style = target.style;
        if (style.maskPosition === undefined) {
            return;
        }
        if (target.$mask instanceof DisplayObject_1.DisplayObject) {
            target.$mask.x = style.maskPosition[0];
            target.$mask.y = style.maskPosition[1];
        }
        else {
            target.$mask.position.set(style.maskPosition[0], style.maskPosition[1]);
        }
    }
}
exports.maskPosition = maskPosition;
function maskSize(target) {
    if (target.style == undefined) {
        return;
    }
    if (target.$mask) {
        var style = target.style;
        if (style.maskSize === undefined) {
            return;
        }
        target.$mask.width = style.maskSize[0];
        target.$mask.height = style.maskSize[1];
        if (target.$mask instanceof PIXI.Graphics) {
            //target.$mask.clone
        }
        if (!(target.$mask instanceof DisplayObject_1.DisplayObject))
            target.$mask.updateTransform();
    }
}
exports.maskSize = maskSize;
function maskImage(target) {
    if (target.style == undefined) {
        return;
    }
    target.container.mask = null;
    if (target.$mask && target.$mask.parent) {
        if (target.$mask instanceof DisplayObject_1.DisplayObject) {
            target.removeChild(target.$mask);
        }
        else {
            target.$mask.parent.removeChild(target.$mask);
        }
    }
    for (var i = 0; i < target.uiChildren.length; i++) {
        if (target.uiChildren[i].name == "maskImage") {
            target.removeChild(target.uiChildren[i]);
            break;
        }
    }
    target.$mask = undefined;
    var style = target.style;
    var container = target.container;
    var maskdisplay = Utils_1.getDisplayObject(style.maskImage, target);
    if (maskdisplay == null || maskdisplay === '') {
        return;
    }
    if (maskdisplay instanceof PIXI.Graphics) {
        target.$mask = maskdisplay;
        container.mask = target.$mask;
        container.addChild(target.$mask);
    }
    else if (maskdisplay instanceof DisplayObject_1.DisplayObject) {
        if (maskdisplay.maskSprite) {
            target.$mask = maskdisplay; //gui组件
            target.$mask.name = "maskImage";
            container.mask = maskdisplay.maskSprite() || null; //pixi组件
            if (maskdisplay.parent == undefined) {
                target.addChild(maskdisplay);
            }
        }
    }
    else {
        target.$mask = PIXI.Sprite.from(Utils_1.getTexture(style.maskImage));
        container.mask = target.$mask;
        container.addChild(target.$mask);
    }
    maskSize(target);
    maskPosition(target);
}
exports.maskImage = maskImage;
/** ===================== font  ===================== */
function updateFontStyle(target, key, value) {
    if (target.setInputStyle) {
        target.setInputStyle(key, value);
    }
    else {
        target.sprite.style[key] = value;
    }
}
exports.updateFontStyle = updateFontStyle;
function color(target, key, value) {
    if (target.setInputStyle) {
        target.setInputStyle(key, value);
    }
    else {
        target.sprite.style.fill = value;
    }
}
exports.color = color;


/***/ }),

/***/ "./src/layout/CSSStyle.ts":
/*!********************************!*\
  !*** ./src/layout/CSSStyle.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CSSFunction = __webpack_require__(/*! ./CSSSSystem */ "./src/layout/CSSSSystem.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
function formatRelative(value) {
    if (value == undefined) {
        return { percent: NaN, value: NaN };
    }
    if (typeof value === "number") {
        return { percent: NaN, value: value };
    }
    var str = value;
    var index = str.indexOf("%");
    if (index == -1) {
        return { percent: NaN, value: +str };
    }
    var percent = +str.substring(0, index);
    return { percent: Math.min(percent * 0.01, 1), value: NaN };
}
/**
 * 组件样式表
 */
var CSSStyle = /** @class */ (function () {
    function CSSStyle(target) {
        /**
         * 规定元素的显示类型。布局模式
         *
         * grid 模式下，子节点会忽略left,top,right，bottom,width,height等
         *
         * none 模式下，忽略style
         * */
        this._display = "block";
        /**
         * 规定元素的定位类型。
         * */
        this._position = "absolute";
        /**
         * 设置 backgroundImage 后，设置是否及如何重复背景图像。
         * repeat重复
         * no-repeat不重复，
         */
        this._backgroundRepeat = "no-repeat";
        /**
         * 文本颜色，16进制
         * */
        this._color = 0xfffff0;
        /**
         * 是否自动换行
         * */
        this._wordWrap = false;
        /**
         * 多行文本(wordWrap = true) - 对齐方式
         * */
        this._textAlign = "center";
        /** 字体大小 */
        this._fontSize = 22;
        /** 字体样式 */
        this._fontStyle = "normal";
        /**  字体变形，普通或小写  */
        this._fontVariant = "normal";
        /** 字体粗细 */
        this._fontWeight = "normal";
        /** 描边的笔触粗细值 */
        this._strokeThickness = 0;
        /** 是否设置投影 */
        this._dropShadow = false;
        /** 投影的alpha值 */
        this._dropShadowAlpha = false;
        /** 是否设置投影 */
        this._dropShadowAngle = 0; //Math.PI / 6;
        /** 投影的模糊半径 */
        this._dropShadowBlur = 0;
        /** 投影填充颜色值 */
        this._dropShadowColor = 0x000000;
        /** 投影深度 */
        this._dropShadowDistance = 5;
        /** 中文换行 */
        this._breakWords = true;
        this.parent = target;
        target.on(Index_1.ComponentEvent.RESIZE, this.onResize, this);
    }
    CSSStyle.prototype.release = function () {
        this.parent.off(Index_1.ComponentEvent.RESIZE, this.onResize, this);
    };
    Object.defineProperty(CSSStyle.prototype, "display", {
        get: function () {
            return this._display;
        },
        set: function (value) {
            this._display = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "position", {
        get: function () {
            return this._position;
        },
        set: function (value) {
            this._position = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "justifyContent", {
        get: function () {
            return this._justifyContent;
        },
        set: function (value) {
            this._justifyContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "alignContent", {
        get: function () {
            return this._alignContent;
        },
        set: function (value) {
            this._alignContent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "gridTemplateColumns", {
        get: function () {
            return this._gridTemplateColumns;
        },
        set: function (value) {
            this._gridTemplateColumns = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "gridColumnGap", {
        get: function () {
            return this._gridColumnGap;
        },
        set: function (value) {
            this._gridColumnGap = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "gridTemplateRows", {
        get: function () {
            return this._gridTemplateRows;
        },
        set: function (value) {
            this._gridTemplateRows = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "gridRowGap", {
        get: function () {
            return this._gridRowGap;
        },
        set: function (value) {
            this._gridRowGap = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "width", {
        /**
         * 表示显示对象的宽度，以像素为单位。
         * */
        get: function () {
            return this.parent.width;
        },
        set: function (value) {
            var relative = formatRelative(value);
            this.parent.width = relative.value;
            this.parent.percentWidth = relative.percent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "height", {
        /**
         * 表示显示对象的高度，以像素为单位。
         * */
        get: function () {
            return this.parent.height;
        },
        set: function (value) {
            var relative = formatRelative(value);
            this.parent.height = relative.value;
            this.parent.percentHeight = relative.percent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "minWidth", {
        /**
         * 设置元素的最小宽度。
         */
        get: function () {
            return this.parent.minWidth;
        },
        set: function (value) {
            this.parent.minWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "maxWidth", {
        /**
         * 设置元素的最大宽度。
         */
        get: function () {
            return this.parent.maxWidth;
        },
        set: function (value) {
            this.parent.maxWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "maxHeight", {
        /**
         * 设置元素的最小高度。
         */
        get: function () {
            return this.parent.maxHeight;
        },
        set: function (value) {
            this.parent.maxHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "minHeight", {
        /**
         * 设置元素的最大高度。
         * */
        get: function () {
            return this.parent.minHeight;
        },
        set: function (value) {
            this.parent.minHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "left", {
        /**
         * 设置定位元素左外边距边界与其容器左边界之间的偏移。
         * */
        get: function () {
            return this.parent.left;
        },
        set: function (value) {
            this.parent.left = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "top", {
        /**
         * 设置定位元素的上外边距边界与其容器上边界之间的偏移。
         * */
        get: function () {
            return this.parent.top;
        },
        set: function (value) {
            this.parent.top = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "right", {
        /**
         * 设置定位元素右外边距边界与其容器右边界之间的偏移。
         * */
        get: function () {
            return this.parent.right;
        },
        set: function (value) {
            this.parent.right = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "bottom", {
        /**
         * 设置定位元素下外边距边界与其容器下边界之间的偏移。
         * */
        get: function () {
            return this.parent.bottom;
        },
        set: function (value) {
            this.parent.bottom = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "scaleX", {
        /**
         * 缩放
         * */
        get: function () {
            return this.parent.scaleX;
        },
        set: function (value) {
            this.parent.scaleX = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "scaleY", {
        /**
         * 缩放
         * */
        get: function () {
            return this.parent.scaleY;
        },
        set: function (value) {
            this.parent.scaleY = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "skewX", {
        /**
         * 设置元素水平拉伸扭曲（角度）。
         * */
        get: function () {
            return this.parent.skewX;
        },
        set: function (value) {
            this.parent.skewX = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "skewY", {
        /**
         * 设置元素垂直拉伸扭曲（角度）。
         * */
        get: function () {
            return this.parent.skewY;
        },
        set: function (value) {
            this.parent.skewY = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "rotate", {
        /**
         * 设置元素旋转 （角度）
        */
        get: function () {
            return this.parent.rotation;
        },
        set: function (value) {
            this.parent.rotation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "rotation", {
        /**
         * 设置元素旋转 （角度）
        */
        get: function () {
            return this.parent.rotation;
        },
        set: function (value) {
            this.parent.rotation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "pivotX", {
        /**
         * 轴点 像素值
         */
        get: function () {
            return this.parent.pivotX;
        },
        set: function (value) {
            this.parent.pivotX = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "pivotY", {
        /**
         * 轴点 像素值
         */
        get: function () {
            return this.parent.pivotY;
        },
        set: function (value) {
            this.parent.pivotY = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "tint", {
        /**
          * 调整元素的色调，取消设置0xFFFFFF
          */
        get: function () {
            return this.parent.tint;
        },
        set: function (value) {
            this.parent.tint = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "alpha", {
        /**
         * 表示指定对象的 Alpha 透明度值。有效值为0（完全透明）～ 1（完全不透明）。
         * */
        get: function () {
            return this.parent.alpha;
        },
        set: function (value) {
            this.parent.alpha = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "visible", {
        /**
         * 显示对象是否可见
         * */
        get: function () {
            return this.parent.visible;
        },
        set: function (value) {
            this.parent.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "visibility", {
        get: function () {
            return this.parent.visible ? "visible" : "hidden";
        },
        set: function (value) {
            this.visible = value === "hidden" ? false : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "backgroundColor", {
        get: function () {
            return this._backgroundColor;
        },
        set: function (value) {
            if (value === this.backgroundColor) {
                return;
            }
            this._backgroundColor = value;
            CSSFunction.backgroundColor(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "backgroundImage", {
        get: function () {
            return this._backgroundImage;
        },
        set: function (value) {
            this._backgroundImage = value;
            CSSFunction.backgroundImage(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "backgroundPositionX", {
        get: function () {
            return this._backgroundPositionX;
        },
        set: function (value) {
            this._backgroundPositionX = value;
            CSSFunction.backgroundPositionSize(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "backgroundPositionY", {
        get: function () {
            return this._backgroundPositionY;
        },
        set: function (value) {
            this._backgroundPositionY = value;
            CSSFunction.backgroundPositionSize(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "backgroundSize", {
        get: function () {
            return this._backgroundSize;
        },
        set: function (value) {
            this._backgroundSize = value;
            CSSFunction.backgroundPositionSize(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "backgroundRepeat", {
        get: function () {
            return this._backgroundRepeat;
        },
        set: function (value) {
            this._backgroundRepeat = value;
            CSSFunction.backgroundRepeat(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "maskImage", {
        get: function () {
            return this._maskImage;
        },
        set: function (value) {
            this._maskImage = value;
            CSSFunction.maskImage(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "maskPosition", {
        get: function () {
            return this._maskPosition;
        },
        set: function (value) {
            this._maskPosition = value;
            CSSFunction.maskPosition(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "maskSize", {
        get: function () {
            return this._maskSize;
        },
        set: function (value) {
            this._maskSize = value;
            CSSFunction.maskSize(this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "filter", {
        get: function () {
            return this._filter;
        },
        set: function (value) {
            if (value === this._filter) {
                return;
            }
            this._filter = value;
            if (value === undefined || value === 'none') {
                this.parent.container.filters = [];
                return;
            }
            var target = Utils_1.getStringFunctionParam(value);
            switch (target.key) {
                case "blur":
                    this.parent.filterBlur = target.value;
                    break;
                case "grayscale":
                    this.parent.filterGrayscale = target.value;
                    break;
                case "outline":
                    this.parent.filterOutline = value;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "cursor", {
        /**
         * 设置鼠标样式
         */
        get: function () {
            return this.parent.container.cursor;
        },
        set: function (value) {
            this.parent.container.cursor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            CSSFunction.color(this.parent, "color", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "letterSpacing", {
        get: function () {
            return this._letterSpacing;
        },
        set: function (value) {
            this._letterSpacing = value;
            CSSFunction.updateFontStyle(this.parent, "letterSpacing", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "wordWrap", {
        get: function () {
            return this._wordWrap;
        },
        set: function (value) {
            this._wordWrap = value;
            CSSFunction.updateFontStyle(this.parent, "wordWrap", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "wordWrapWidth", {
        get: function () {
            return this._wordWrapWidth;
        },
        set: function (value) {
            this._wordWrapWidth = value;
            CSSFunction.updateFontStyle(this.parent, "wordWrapWidth", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "textAlign", {
        get: function () {
            return this._textAlign;
        },
        set: function (value) {
            this._textAlign = value;
            CSSFunction.updateFontStyle(this.parent, "textAlign", value);
            CSSFunction.updateFontStyle(this.parent, "align", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "lineHeight", {
        get: function () {
            return this._lineHeight;
        },
        set: function (value) {
            this._lineHeight = value;
            CSSFunction.updateFontStyle(this.parent, "lineHeight", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "fontFamily", {
        get: function () {
            return this._fontFamily;
        },
        set: function (value) {
            this._fontFamily = value;
            CSSFunction.updateFontStyle(this.parent, "fontFamily", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "fontSize", {
        get: function () {
            return this._fontSize;
        },
        set: function (value) {
            this._fontSize = value;
            CSSFunction.updateFontStyle(this.parent, "fontSize", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "fontStyle", {
        get: function () {
            return this._fontStyle;
        },
        set: function (value) {
            this._fontStyle = value;
            CSSFunction.updateFontStyle(this.parent, "fontStyle", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "fontVariant", {
        get: function () {
            return this._fontVariant;
        },
        set: function (value) {
            this._fontVariant = value;
            CSSFunction.updateFontStyle(this.parent, "fontVariant", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "fontWeight", {
        get: function () {
            return this._fontWeight;
        },
        set: function (value) {
            this._fontWeight = value;
            CSSFunction.updateFontStyle(this.parent, "fontWeight", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (value) {
            this._padding = value;
            CSSFunction.updateFontStyle(this.parent, "padding", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "stroke", {
        get: function () {
            return this._stroke;
        },
        set: function (value) {
            this._stroke = value;
            CSSFunction.updateFontStyle(this.parent, "stroke", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "strokeThickness", {
        get: function () {
            return this._strokeThickness;
        },
        set: function (value) {
            this._strokeThickness = value;
            CSSFunction.updateFontStyle(this.parent, "strokeThickness", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "dropShadow", {
        get: function () {
            return this._dropShadow;
        },
        set: function (value) {
            this._dropShadow = value;
            CSSFunction.updateFontStyle(this.parent, "dropShadow", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "dropShadowAlpha", {
        get: function () {
            return this._dropShadowAlpha;
        },
        set: function (value) {
            this._dropShadowAlpha = value;
            CSSFunction.updateFontStyle(this.parent, "dropShadowAlpha", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "dropShadowAngle", {
        get: function () {
            return this._dropShadowAngle;
        },
        set: function (value) {
            this._dropShadowAngle = value;
            CSSFunction.updateFontStyle(this.parent, "dropShadowAngle", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "dropShadowBlur", {
        get: function () {
            return this._dropShadowBlur;
        },
        set: function (value) {
            this._dropShadowBlur = value;
            CSSFunction.updateFontStyle(this.parent, "dropShadowBlur", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "dropShadowColor", {
        get: function () {
            return this._dropShadowColor;
        },
        set: function (value) {
            this._dropShadowColor = value;
            CSSFunction.updateFontStyle(this.parent, "dropShadowColor", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "dropShadowDistance", {
        get: function () {
            return this._dropShadowDistance;
        },
        set: function (value) {
            this._dropShadowDistance = value;
            CSSFunction.updateFontStyle(this.parent, "dropShadowDistance", value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CSSStyle.prototype, "breakWords", {
        get: function () {
            return this._breakWords;
        },
        set: function (value) {
            this._breakWords = value;
            CSSFunction.updateFontStyle(this.parent, "breakWords", value);
        },
        enumerable: true,
        configurable: true
    });
    CSSStyle.prototype.onResize = function () {
        var target = this.parent;
        if (target.width == 0 || target.height == 0) {
            return;
        }
        if (this.backgroundColor && target.$background) {
            var background = target.$background;
            //console.log("onResize backgroundColor",background.width , target.width ,background.height ,target.height)
            background.clear();
            background.beginFill(this.backgroundColor);
            background.drawRoundedRect(0, 0, target.width, target.height, 0);
            background.endFill();
        }
        if (target.$background && target.$background.mask) {
            //console.log("onResize backgroundColor mask",this.backgroundColor)
            var mask = target.$background.mask;
            mask.clear();
            mask.beginFill(this.backgroundColor);
            mask.drawRoundedRect(0, 0, target.width, target.height, 0);
            mask.endFill();
        }
    };
    return CSSStyle;
}());
exports.CSSStyle = CSSStyle;
/*
CSS3.0 所有样式属性

    background: string | null;
    backgroundAttachment: string | null;
    backgroundClip: string | null;
    // backgroundColor: string | null;
    // backgroundImage: string | null;
    backgroundOrigin: string | null;
    backgroundPosition: string | null;
    // backgroundPositionX: string | null;
    // backgroundPositionY: string | null;
    backgroundRepeat: string | null;
    // backgroundSize: string | null;


    alignContent: string;
    alignItems: string;
    alignSelf: string;
    alignmentBaseline: string | null;
    animation: string;
    animationDelay: string;
    animationDirection: string;
    animationDuration: string;
    animationFillMode: string;
    animationIterationCount: string;
    animationName: string;
    animationPlayState: string;
    animationTimingFunction: string;
    backfaceVisibility: string | null;

    baselineShift: string | null;
    border: string | null;
    borderBottom: string | null;
    borderBottomColor: string | null;
    borderBottomLeftRadius: string | null;
    borderBottomRightRadius: string | null;
    borderBottomStyle: string | null;
    borderBottomWidth: string | null;
    borderCollapse: string | null;
    borderColor: string | null;
    borderImage: string | null;
    borderImageOutset: string | null;
    borderImageRepeat: string | null;
    borderImageSlice: string | null;
    borderImageSource: string | null;
    borderImageWidth: string | null;
    borderLeft: string | null;
    borderLeftColor: string | null;
    borderLeftStyle: string | null;
    borderLeftWidth: string | null;
    borderRadius: string | null;
    borderRight: string | null;
    borderRightColor: string | null;
    borderRightStyle: string | null;
    borderRightWidth: string | null;
    borderSpacing: string | null;
    borderStyle: string | null;
    borderTop: string | null;
    borderTopColor: string | null;
    borderTopLeftRadius: string | null;
    borderTopRightRadius: string | null;
    borderTopStyle: string | null;
    borderTopWidth: string | null;
    borderWidth: string | null;
    // bottom: string | null;
    boxShadow: string | null;
    boxSizing: string;
    breakAfter: string | null;
    breakBefore: string | null;
    breakInside: string | null;
    captionSide: string | null;
    caretColor: string;
    clear: string | null;
    clip: string;
    clipPath: string;
    clipRule: string;
    // color: string | null;
    colorInterpolationFilters: string;
    columnCount: string;
    columnFill: string;
    columnGap: string;
    columnRule: string;
    columnRuleColor: string;
    columnRuleStyle: string;
    columnRuleWidth: string;
    columnSpan: string;
    columnWidth: string;
    columns: string;
    content: string | null;
    counterIncrement: string | null;
    counterReset: string | null;
    cssFloat: string | null;
    cssText: string;
    cursor: string;
    direction: string;
    // display: string | null;
    dominantBaseline: string | null;
    emptyCells: string | null;
    enableBackground: string | null;
    fill: string | null;
    fillOpacity: string | null;
    fillRule: string | null;
    filter: string;
    flex: string | null;
    flexBasis: string | null;
    flexDirection: string | null;
    flexFlow: string | null;
    flexGrow: string | null;
    flexShrink: string | null;
    flexWrap: string | null;
    floodColor: string;
    floodOpacity: string;
    font: string;
    // fontFamily: string;
    fontFeatureSettings: string;
    fontKerning: string;
    // fontSize: string;
    fontSizeAdjust: string;
    fontStretch: string;
    // fontStyle: string;
    fontSynthesis: string;
    // fontVariant: string;
    fontVariantCaps: string;
    fontVariantEastAsian: string;
    fontVariantLigatures: string;
    fontVariantNumeric: string;
    fontVariantPosition: string;
    // fontWeight: string;
    gap: string;
    glyphOrientationHorizontal: string | null;
    glyphOrientationVertical: string;
    grid: string | null;
    gridArea: string | null;
    gridAutoColumns: string | null;
    gridAutoFlow: string | null;
    gridAutoRows: string | null;
    gridColumn: string | null;
    gridColumnEnd: string | null;
    gridColumnGap: string;
    gridColumnStart: string | null;
    gridGap: string;
    gridRow: string | null;
    gridRowEnd: string | null;
    gridRowGap: string;
    gridRowStart: string | null;
    gridTemplate: string | null;
    gridTemplateAreas: string | null;
    gridTemplateColumns: string | null;
    gridTemplateRows: string | null;
    // height: string | null;
    hyphens: string;
    imageOrientation: string;
    imageRendering: string;
    imeMode: string | null;
    justifyContent: string;
    justifyItems: string;
    justifySelf: string;
    kerning: string | null;
    layoutGrid: string | null;
    layoutGridChar: string | null;
    layoutGridLine: string | null;
    layoutGridMode: string | null;
    layoutGridType: string | null;
    // left: string | null;
    readonly length: number;
    // letterSpacing: string;
    lightingColor: string;
    lineBreak: string;
    // lineHeight: string | null;
    listStyle: string | null;
    listStyleImage: string | null;
    listStylePosition: string | null;
    listStyleType: string | null;

    margin: string | null;
    marginBottom: string | null;
    marginLeft: string | null;
    marginRight: string | null;
    marginTop: string | null;

    marker: string | null;
    markerEnd: string | null;
    markerMid: string | null;
    markerStart: string | null;
    mask: string;
    maskComposite: string;
    maskImage: string;
    maskPosition: string;
    maskRepeat: string;
    maskSize: string;
    maskType: string;

    // maxHeight: string | null;
    // maxWidth: string | null;
    // minHeight: string | null;
    // minWidth: string | null;

    objectFit: string;
    objectPosition: string;
    opacity: string | null;
    order: string | null;
    orphans: string | null;
    outline: string;
    outlineColor: string;
    outlineOffset: string;
    outlineStyle: string;
    outlineWidth: string;

    overflow: string;
    overflowAnchor: string;
    overflowWrap: string;
    overflowX: string;
    overflowY: string;

    padding: string | null;
    paddingBottom: string | null;
    paddingLeft: string | null;
    paddingRight: string | null;
    paddingTop: string | null;

    pageBreakAfter: string | null;
    pageBreakBefore: string | null;
    pageBreakInside: string | null;
    readonly parentRule: CSSRule;
    penAction: string | null;
    perspective: string | null;
    perspectiveOrigin: string | null;
    placeContent: string;
    placeItems: string;
    placeSelf: string;
    pointerEvents: string | null;
    // position: string | null;
    quotes: string | null;
    resize: string;
    // right: string | null;
    rotate: string | null;
    rowGap: string;
    rubyAlign: string | null;
    rubyOverhang: string | null;
    rubyPosition: string | null;
    // scale: string | null;
    scrollBehavior: string;
    stopColor: string | null;
    stopOpacity: string | null;

    stroke: string | null;
    strokeDasharray: string | null;
    strokeDashoffset: string | null;
    strokeLinecap: string | null;
    strokeLinejoin: string | null;
    strokeMiterlimit: string | null;
    strokeOpacity: string | null;
    strokeWidth: string | null;

    tabSize: string;
    tableLayout: string | null;
    // textAlign: string;
    textAlignLast: string;
    textAnchor: string | null;
    textCombineUpright: string;
    textDecoration: string;
    textDecorationColor: string;
    textDecorationLine: string;
    textDecorationStyle: string;
    textEmphasis: string;
    textEmphasisColor: string;
    textEmphasisPosition: string;
    textEmphasisStyle: string;
    textIndent: string;
    textJustify: string;
    textKashida: string | null;
    textKashidaSpace: string | null;
    textOrientation: string;
    textOverflow: string;
    textShadow: string;
    textTransform: string;
    textUnderlinePosition: string;
    // top: string | null;
    touchAction: string;
    transform: string;
    transformBox: string;
    transformOrigin: string;
    transformStyle: string | null;
    transition: string;
    transitionDelay: string;
    transitionDuration: string;
    transitionProperty: string;
    transitionTimingFunction: string;
    translate: string | null;
    unicodeBidi: string;
    userSelect: string;
    verticalAlign: string | null;
    visibility: string | null;

    whiteSpace: string;
    widows: string | null;
    // width: string | null;
    willChange: string;
    wordBreak: string;
    wordSpacing: string;
    // wordWrap: string;
    writingMode: string;
    // zIndex: string | null;
    zoom: string | null;
    */


/***/ }),

/***/ "./src/tween/Easing.ts":
/*!*****************************!*\
  !*** ./src/tween/Easing.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 完整的缓动曲线列表
 *
 * @example gui.Easing.Linear.None;
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTween
 */
exports.Easing = {
    Linear: {
        None: function (k) {
            return k;
        }
    },
    Quadratic: {
        In: function (k) {
            return Math.pow(k, 2);
        },
        Out: function (k) {
            return k * (2 - k);
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(k, 2);
            }
            return -0.5 * (--k * (k - 2) - 1);
        }
    },
    Cubic: {
        In: function (k) {
            return Math.pow(k, 3);
        },
        Out: function (k) {
            return --k * k * k + 1;
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(k, 3);
            }
            return 0.5 * ((k -= 2) * k * k + 2);
        }
    },
    Quartic: {
        In: function (k) {
            return Math.pow(k, 4);
        },
        Out: function (k) {
            return 1 - --k * k * k * k;
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(k, 4);
            }
            return -0.5 * ((k -= 2) * k * k * k - 2);
        }
    },
    Quintic: {
        In: function (k) {
            return Math.pow(k, 5);
        },
        Out: function (k) {
            return --k * k * k * k * k + 1;
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(k, 5);
            }
            return 0.5 * ((k -= 2) * k * k * k * k + 2);
        }
    },
    Sinusoidal: {
        In: function (k) {
            return 1 - Math.cos((k * Math.PI) / 2);
        },
        Out: function (k) {
            return Math.sin((k * Math.PI) / 2);
        },
        InOut: function (k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        }
    },
    Exponential: {
        In: function (k) {
            return k === 0 ? 0 : Math.pow(1024, k - 1);
        },
        Out: function (k) {
            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
        },
        InOut: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(1024, k - 1);
            }
            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
        }
    },
    Circular: {
        In: function (k) {
            return 1 - Math.sqrt(1 - k * k);
        },
        Out: function (k) {
            return Math.sqrt(1 - --k * k);
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return -0.5 * (Math.sqrt(1 - k * k) - 1);
            }
            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
        }
    },
    Elastic: {
        In: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
        },
        Out: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;
        },
        InOut: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            k *= 2;
            if (k < 1) {
                return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
            }
            return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;
        }
    },
    Back: {
        In: function (k) {
            var s = 1.70158;
            return k * k * ((s + 1) * k - s);
        },
        Out: function (k) {
            var s = 1.70158;
            return --k * k * ((s + 1) * k + s) + 1;
        },
        InOut: function (k) {
            var s = 1.70158 * 1.525;
            if ((k *= 2) < 1) {
                return 0.5 * (k * k * ((s + 1) * k - s));
            }
            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
        }
    },
    Bounce: {
        In: function (k) {
            return 1 - exports.Easing.Bounce.Out(1 - k);
        },
        Out: function (k) {
            var x = 2.75;
            var y = 7.5625;
            if (k < 1 / x) {
                return y * k * k;
            }
            else if (k < 2 / x) {
                return y * (k -= 1.5 / x) * k + 0.75;
            }
            else if (k < 2.5 / x) {
                return y * (k -= 2.25 / x) * k + 0.9375;
            }
            else {
                return y * (k -= 2.625 / x) * k + 0.984375;
            }
        },
        InOut: function (k) {
            if (k < 0.5) {
                return exports.Easing.Bounce.In(k * 2) * 0.5;
            }
            return exports.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
        }
    },
    Stepped: {
        steps: function (steps) { return function (k) { return ((k * steps) | 0) / steps; }; }
    }
};


/***/ }),

/***/ "./src/tween/Timeline.ts":
/*!*******************************!*\
  !*** ./src/tween/Timeline.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Ticker_1 = __webpack_require__(/*! ../core/Ticker */ "./src/core/Ticker.ts");
var ObjectPool_1 = __webpack_require__(/*! ../utils/ObjectPool */ "./src/utils/ObjectPool.ts");
var Index_1 = __webpack_require__(/*! ../interaction/Index */ "./src/interaction/Index.ts");
var Easing_1 = __webpack_require__(/*! ./Easing */ "./src/tween/Easing.ts");
/**
 * @private
 */
var Node = /** @class */ (function () {
    function Node(node) {
        this.default = 0;
        this.start = 0;
        this.end = 0;
        this.duration = 0;
        this.startFrame = 0;
        this.endFrame = 0;
        this.prevTime = 0;
        this.parent = node;
    }
    Node.prototype.release = function () {
        this.parent = undefined;
        this.easing = undefined;
        this.start = 0;
        this.end = 0;
        this.duration = 0;
        this.endFrame = 0;
        this.prevTime = 0;
    };
    Node.prototype.load = function () { };
    Node.prototype.destroy = function () { };
    return Node;
}());
/**
 * 基于帧的时间轴控制类
 *
 * @example let timeline = new gui.Timeline();
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTimeLine
 */
var Timeline = /** @class */ (function (_super) {
    __extends(Timeline, _super);
    function Timeline() {
        var _this = _super.call(this) || this;
        _this.id = -1;
        _this._frames = new Array();
        _this._frameCount = 0;
        _this._elapsedMS = 16.66; //1000/60
        _this._prevTime = 0;
        _this._isStop = false;
        _this._lastNode = new Map();
        _this._isSetDefault = false;
        _this.loop = false;
        return _this;
    }
    Timeline.prototype.setDefault = function (object, _duration, fps) {
        this._object = object;
        this._elapsedMS = 1000 / fps;
        var frameCount = Math.round(_duration / this._elapsedMS);
        this._frameCount = frameCount;
        var frames = this._frames;
        while (frames && frames.length > frameCount) {
            frames.pop();
        }
        var i = frames.length === 0 ? 0 : frames.length;
        for (i; i <= frameCount; i++) {
            if (frames[i] === undefined)
                frames[i] = new Map();
        }
        this._isSetDefault = true;
        return this;
    };
    Timeline.prototype.addProperty = function (property, value, endFrame, easing) {
        if (endFrame > this._frameCount) {
            throw "Error Timeline.addProperty overflow frame";
        }
        var parentNode = this._lastNode.get(property);
        var node = ObjectPool_1.objectPoolShared.pop(Node);
        if (parentNode === undefined) {
            node.parent = undefined;
        }
        else {
            node.parent = parentNode;
        }
        node.startFrame = node.parent === undefined ? 0 : (node.parent.endFrame + 1);
        node.end = value;
        node.start = node.parent === undefined ? (this._object[property] || 0) : node.parent.end;
        node.default = this._object[property] || 0;
        if (easing) {
            node.easing = easing;
        }
        else {
            node.easing = Easing_1.Easing.Linear.None;
        }
        node.duration = (endFrame - node.startFrame) * this._elapsedMS;
        node.endFrame = endFrame;
        this._lastNode.set(property, node);
        for (var i = node.startFrame; i <= endFrame; i++) {
            this._frames[i].set(property, node);
        }
        return this;
    };
    Timeline.prototype.stop = function () {
        this._isStop = true;
    };
    Timeline.prototype.play = function () {
        this._isStop = false;
    };
    Timeline.prototype.gotoAndPlay = function (frame) {
        this.goto(frame, false);
    };
    Timeline.prototype.gotoAndStop = function (frame) {
        this.goto(frame, true);
    };
    Timeline.prototype.seekLastNode = function (value, frame) {
        if (value.parent === undefined) {
            return value;
        }
        if (value.endFrame > frame) {
            this.seekLastNode(value.parent, frame);
        }
        return value;
    };
    Timeline.prototype.goto = function (frame, isStop) {
        var _this = this;
        var _a = this, _lastNode = _a._lastNode, _frames = _a._frames;
        _lastNode.forEach(function (value, key) {
            var node = _this.seekLastNode(value, frame);
            node.prevTime = node.duration;
            _this.updateobject(key, node);
        }, this);
        this._prevTime = frame * this._elapsedMS;
        var _loop_1 = function (i) {
            _frames[i].forEach(function (value, key) {
                if (i == frame) {
                    value.prevTime = (frame - value.startFrame) * _this._elapsedMS;
                    _this.updateobject(key, value);
                }
                else {
                    value.prevTime = 0;
                }
            }, this_1);
        };
        var this_1 = this;
        for (var i = frame; i < _frames.length; i++) {
            _loop_1(i);
        }
        this._isStop = isStop;
        if (!this._isStop) {
            this.load();
        }
    };
    Timeline.prototype.update = function (a, b, elapsedMS) {
        var _this = this;
        if (elapsedMS === void 0) { elapsedMS = 0; }
        if (this._isStop) {
            return;
        }
        var _prevTime = this._prevTime;
        var _a = this, _frames = _a._frames, _frameCount = _a._frameCount, _elapsedMS = _a._elapsedMS;
        var curFrame = Math.round(_prevTime / _elapsedMS);
        if (curFrame >= _frameCount) {
            if (this.loop) {
                this.emit(Index_1.ComponentEvent.LOOP, this);
                this.goto(1, false);
                return;
            }
            this._isStop = true;
            this.emit(Index_1.ComponentEvent.COMPLETE, this);
        }
        if (_frames[curFrame] == undefined) {
            this._isStop = true;
            return;
        }
        _prevTime += elapsedMS;
        _frames[curFrame].forEach(function (value, key) {
            if (value.start !== value.end) {
                value.prevTime += elapsedMS;
                _this.updateobject(key, value);
            }
        }, this);
        this._prevTime = _prevTime;
        return true;
    };
    Timeline.prototype.updateobject = function (key, node) {
        var elapsed;
        if (!node.duration) {
            elapsed = 1;
        }
        else {
            elapsed = node.prevTime / node.duration;
            elapsed = elapsed > 1 ? 1 : elapsed;
        }
        var value = node.easing(elapsed);
        var start = node.start;
        var end = node.end;
        if (typeof end === 'number') {
            switch (key) {
                case "x":
                case "y":
                case "angle":
                    this._object[key] = node.default + Math.floor(start + (end - start) * value);
                    break;
                case "scaleX":
                case "scaleY":
                case "rotation":
                    this._object[key] = node.default * Math.floor(start + (end - start) * value);
                    break;
                default:
                    this._object[key] = Math.floor(start + (end - start) * value);
            }
        }
        else if (typeof end === 'boolean') {
            this._object[key] = end;
        }
        if (elapsed === 1) {
            return true;
        }
        return false;
    };
    Timeline.prototype.load = function () {
        if (!this._isSetDefault) {
            throw "Error Timeline.load undefined default";
        }
        Ticker_1.shared.removeUpdateEvent(this.update, this);
        Ticker_1.shared.addUpdateEvent(this.update, this);
    };
    Timeline.prototype.release = function () {
        Ticker_1.shared.removeUpdateEvent(this.update, this);
        this._frames.forEach(function (map) {
            map.forEach(function (value) {
                ObjectPool_1.objectPoolShared.push(Node, value);
            });
            map.clear();
        });
        this.id = -1;
        this._object = undefined;
        this._frameCount = 0;
        this._elapsedMS = 16.666666666666; //1000/60
        this._prevTime = 0;
        this._isStop = false;
        this._isSetDefault = false;
        this.loop = false;
        this._lastNode.clear();
    };
    return Timeline;
}(PIXI.utils.EventEmitter));
exports.Timeline = Timeline;


/***/ }),

/***/ "./src/tween/Tween.ts":
/*!****************************!*\
  !*** ./src/tween/Tween.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = __webpack_require__(/*! ../utils/Utils */ "./src/utils/Utils.ts");
var Easing_1 = __webpack_require__(/*! ./Easing */ "./src/tween/Easing.ts");
var Interpolation_1 = __webpack_require__(/*! ./private/Interpolation */ "./src/tween/private/Interpolation.ts");
var core_1 = __webpack_require__(/*! ./private/core */ "./src/tween/private/core.ts");
var constants_1 = __webpack_require__(/*! ./private/constants */ "./src/tween/private/constants.ts");
var TweenEvent_1 = __webpack_require__(/*! ../event/TweenEvent */ "./src/event/TweenEvent.ts");
var defaultEasing = Easing_1.Easing.Linear.None;
/**
 * 缓动动画
 *
 * @example let tween = new gui.Tween(myObject).to({width:'300px'}, 2000).start()
 *
 * @namespace gui
 *
 * @link https://vipkid-edu.github.io/vf-gui-docs/play/#example/TestTween
 */
var Tween = /** @class */ (function (_super) {
    __extends(Tween, _super);
    function Tween(object) {
        var _this = _super.call(this) || this;
        _this._valuesEnd = null;
        _this._duration = 1000;
        _this._easingFunction = defaultEasing;
        _this._easingReverse = defaultEasing;
        _this._startTime = 0;
        _this._delayTime = 0;
        _this._repeat = 0;
        _this._initRepeat = 0;
        _this._isPlaying = false;
        _this._yoyo = false;
        _this._reversed = false;
        _this._onStartCallbackFired = false;
        _this._isFinite = true;
        _this._prevTime = 0;
        _this._rendered = false;
        _this._reverseDelayTime = 0;
        /** 附加数据 */
        _this.data = {};
        _this.id = Utils_1.uid();
        _this.object = object;
        _this._valuesStart = Array.isArray(object) ? [] : {};
        _this._interpolationFunction = Interpolation_1.Interpolation.Linear;
        return _this;
    }
    /**
     * Easier way to call the Tween
     * @param {object} object - Initial value
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example Tween.fromTo(myObject, {x:0}, {x:200},1000)
     * @memberof gui.Tween
     * @static
     */
    Tween.fromTo = function (object, to, duration) {
        var tween = new Tween(object).to(to, duration);
        return tween;
    };
    /**
     * Easier way calling constructor only applies the `to` value, useful for CSS Animation
     * @param {TAny} object object
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example Tween.to(myObject, {x:200}, 1000)
     * @memberof gui.Tween
     * @static
     */
    Tween.to = function (object, to, duration) {
        return Tween.fromTo(object, to, duration);
    };
    /**
     * Easier way calling constructor only applies the `from` value, useful for CSS Animation
     * @param {TAny} object object
     * @param {object} from - Initial value
     * @param {object} params - Options of tweens
     * @example Tween.from(myObject, {x:200}, 1000)
     * @memberof gui.Tween
     * @static
     */
    Tween.from = function (object, from, duration) {
        return Tween.fromTo(object, from, duration);
    };
    Tween.prototype.setObject = function (object) {
        this.object = object;
        this._valuesStart = Array.isArray(object) ? [] : {};
    };
    Object.defineProperty(Tween.prototype, "isPlaying", {
        /**
         * 是否在播放中
         * @return {boolean}
         * @example tween.isPlaying()
         * @memberof gui.Tween
         */
        get: function () {
            return this._isPlaying;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tween.prototype, "isStarted", {
        /**
         * 是否开始播放
         * @return {boolean}
         * @example tween.isStarted()
         * @memberof gui.Tween
         */
        get: function () {
            return this._onStartCallbackFired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tween.prototype, "startTime", {
        /**
         * 获取动画的开始时间
         */
        get: function () {
            return this._startTime;
        },
        /**
         * 获取动画的开始时间
         */
        set: function (value) {
            this._startTime = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tween.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        /**
         * 设置缓动时长
         * @param {number} amount 持续的毫秒值
         * @example tween.duration(2000)
         * @memberof gui.Tween
         * @deprecated 不推荐使用这个方法，内部使用
         * @private
         */
        set: function (amount) {
            this._duration = typeof amount === 'function' ? amount(this._duration) : amount;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 逆向缓动
     * @example tween.reverse()
     * @param {boolean=} state 是否逆向
     * @memberof gui.Tween
     */
    Tween.prototype.reverse = function (state) {
        var _reversed = this._reversed;
        this._reversed = state !== undefined ? state : !_reversed;
        return this;
    };
    /**
     * 当前动画是否逆转
     * @return {boolean}
     * @example tween.reversed() true逆向中
     * @memberof gui.Tween
     */
    Tween.prototype.reversed = function () {
        return this._reversed;
    };
    /**
     * 暂停缓动
     * @example tween.pause()
     * @memberof gui.Tween
     */
    Tween.prototype.pause = function () {
        if (!this._isPlaying) {
            return this;
        }
        this._isPlaying = false;
        core_1.remove(this);
        return this.emit(TweenEvent_1.TweenEvent.pause, this.object);
    };
    /**
     * 播放或恢复播放
     * @example tween.play()
     * @memberof gui.Tween
     */
    Tween.prototype.play = function () {
        if (this._isPlaying) {
            return this;
        }
        this._isPlaying = true;
        this._startTime = 0;
        core_1.add(this);
        return this.emit(TweenEvent_1.TweenEvent.play, this.object);
    };
    /**
     * 设置要缓动的目标属性与持续时间
     * @param {object} properties 目标属性值
     * @param {number|Object=} [duration=1000] 持续时间
     * @example let tween = new gui.Tween({x:0}).to({x:100}, 2000)
     * @memberof gui.Tween
     */
    Tween.prototype.to = function (properties, duration) {
        if (duration === void 0) { duration = 1000; }
        this._valuesEnd = properties;
        this._duration = duration;
        return this;
    };
    Tween.prototype.render = function () {
        if (this._rendered) {
            return this;
        }
        var _a = this, _valuesStart = _a._valuesStart, _valuesEnd = _a._valuesEnd, object = _a.object;
        if (!_valuesStart.processed) {
            for (var property in _valuesEnd) {
                var start = object && object[property] && Utils_1.deepCopy(object[property]);
                _valuesStart[property] = start || 0;
                constants_1.decompose(property, object, _valuesStart, _valuesEnd);
            }
            _valuesStart.processed = true;
        }
        this._rendered = true;
        return this;
    };
    /**
     * 开始执行缓动
     * @param {number|string} time 要开始的时间，延迟值
     * @example tween.start()
     * @memberof gui.Tween
     */
    Tween.prototype.start = function (time) {
        this._startTime = time !== undefined ? time : 0;
        this._startTime += this._delayTime;
        this._prevTime = 0;
        this._onStartCallbackFired = false;
        this._rendered = false;
        this._isPlaying = true;
        core_1.add(this);
        return this;
    };
    /**
     * 停止缓动
     * @example tween.stop()
     * @memberof gui.Tween
     */
    Tween.prototype.stop = function () {
        var _a = this, _isPlaying = _a._isPlaying, _isFinite = _a._isFinite, object = _a.object, _duration = _a._duration, _initRepeat = _a._initRepeat, _yoyo = _a._yoyo, _reversed = _a._reversed;
        if (!_isPlaying) {
            return this;
        }
        this._isPlaying = false;
        var atStart = _isFinite ? (_initRepeat + 1) % 2 === 1 : !_reversed;
        this._reversed = false;
        if (_yoyo && atStart) {
            this._prevTime = _duration;
        }
        else {
            this._prevTime = 0;
        }
        this.update(0);
        core_1.remove(this);
        return this.emit(TweenEvent_1.TweenEvent.stop, object);
    };
    /**
     * 设置延迟执行时间
     * @param {number} amount 延迟等待的时间，毫秒
     * @example tween.delay(500)
     * @memberof gui.Tween
     */
    Tween.prototype.delay = function (amount) {
        this._delayTime = amount;
        return this;
    };
    /**
     * 设置重复执行的次数
     * @param {number} amount 重复次数
     * @example tween.repeat(5)
     * @memberof gui.Tween
     */
    Tween.prototype.repeat = function (amount) {
        this._repeat = !this._duration ? 0 : amount;
        this._initRepeat = this._repeat;
        this._isFinite = isFinite(amount);
        return this;
    };
    /**
     * 设置每个重复执行过程的延迟时间，毫秒
     * @param {number} amount 延迟值
     * @example tween.reverseDelay(500)
     * @memberof gui.Tween
     */
    Tween.prototype.reverseDelay = function (amount) {
        this._reverseDelayTime = amount;
        return this;
    };
    /**
     * 是否在重复执行中启用反向动画
     * @param {boolean} state true启动
     * @param {Function=} _easingReverse 反向时的Easing function
     * @example tween.yoyo(true)
     * @memberof gui.Tween
     */
    Tween.prototype.yoyo = function (state, _easingReverse) {
        this._yoyo = typeof state === 'function' ? state(this._yoyo) : state === null ? this._yoyo : state;
        if (!state) {
            this._reversed = false;
        }
        if (_easingReverse) {
            this._easingReverse = _easingReverse;
        }
        else {
            this._easingReverse = this._easingFunction;
        }
        return this;
    };
    /**
     * 设置缓动函数
     * @param {Function} _easingFunction 缓动函数的公式，如果设置yoyo的第二个值会应用于逆向缓动
     * @example tween.easing(Easing.Elastic.InOut)
     * @memberof gui.Tween
     */
    Tween.prototype.easing = function (_easingFunction) {
        this._easingFunction = _easingFunction;
        return this;
    };
    /**
     * 设置差值
     * @param {Function} _interpolationFunction 差值的函数
     * @example tween.interpolation(Interpolation.Bezier)
     * @memberof gui.Tween
     */
    Tween.prototype.interpolation = function (_interpolationFunction) {
        if (typeof _interpolationFunction === 'function') {
            this._interpolationFunction = _interpolationFunction;
        }
        return this;
    };
    /**
     * 更新动画到指定时间点，进行播放
     * @param time
     */
    Tween.prototype.gotoAndPlay = function (time) {
        this._prevTime = time;
        this.update(0);
    };
    /**
     * 更新动画到指定时间点，停止播放
     * @param time
     */
    Tween.prototype.gotoAndStop = function (time) {
        this._prevTime = time;
        this.update(0);
        this.pause();
    };
    /**
     * 更新动画到指定时间点，停止播放
     * @param time
     */
    Tween.prototype.gotoAndEnd = function () {
        this._prevTime = this._duration;
        this.update(0);
    };
    /**
     * 更新函数，通过给定的 `time` 设置目标属性变化
    * @param {number=} elapsedMS 帧间隔
    * @param {Boolean=} preserve 完成后，防止删除动画对象
     * @param {boolean=} forceTime 强制进行更新渲染，不关心时间是否匹配
     * @example tween.update(100)
     * @memberof gui.Tween
     */
    Tween.prototype.update = function (elapsedMS, preserve, forceTime) {
        var _a = this, _onStartCallbackFired = _a._onStartCallbackFired, _easingFunction = _a._easingFunction, _easingReverse = _a._easingReverse, _delayTime = _a._delayTime, _reverseDelayTime = _a._reverseDelayTime, _yoyo = _a._yoyo, _reversed = _a._reversed, _startTime = _a._startTime, _duration = _a._duration, _valuesStart = _a._valuesStart, _valuesEnd = _a._valuesEnd, object = _a.object, _isFinite = _a._isFinite, _isPlaying = _a._isPlaying;
        if (!_isPlaying || (_startTime > 0 && !forceTime)) {
            this._startTime -= elapsedMS;
            this._startTime = Math.max(0, this._startTime);
            return true;
        }
        var elapsed;
        var property;
        var _repeat = this._repeat;
        if (!_duration) {
            elapsed = 1;
            _repeat = 0;
        }
        else {
            this._prevTime += elapsedMS;
            if (elapsedMS > constants_1.TOO_LONG_FRAME_MS && core_1.isRunning() && core_1.isLagSmoothing()) {
                this._prevTime -= constants_1.FRAME_MS;
            }
            elapsed = (this._prevTime) / _duration;
            elapsed = elapsed > 1 ? 1 : elapsed;
            elapsed = _reversed ? 1 - elapsed : elapsed;
        }
        if (!_onStartCallbackFired) {
            if (!this._rendered) {
                this.render();
                this._rendered = true;
            }
            this.emit(TweenEvent_1.TweenEvent.start, object);
            this._onStartCallbackFired = true;
        }
        var currentEasing = _reversed ? _easingReverse || _easingFunction : _easingFunction;
        for (property in _valuesEnd) {
            var start = _valuesStart[property];
            var end = _valuesEnd[property];
            var value = currentEasing[property] ? currentEasing[property](elapsed) : typeof currentEasing === 'function' ? currentEasing(elapsed) : defaultEasing(elapsed);
            if (typeof end === 'number') {
                object[property] = start + (end - start) * value;
            }
            else if (typeof end === 'boolean') {
                object[property] = end;
                elapsed = _reversed ? 0 : 1;
            }
            else { //颜色
                constants_1.recompose(property, object, _valuesStart, _valuesEnd, value, elapsed);
            }
            // else if (Array.isArray(end) && !(end as TAny).isString && !Array.isArray(start)) {
            //     const _interpolationFunctionCall = _interpolationFunction[property]
            //     ? _interpolationFunction[property] : typeof _interpolationFunction === 'function' ? _interpolationFunction : Interpolation.Linear;
            //     object[property] = _interpolationFunctionCall(end, value, object[property]);
            // } 
        }
        this.emit(TweenEvent_1.TweenEvent.update, object, elapsed, elapsedMS);
        if (elapsed === 1 || (_reversed && elapsed === 0)) {
            this._prevTime = 0;
            if (_repeat > 0 && _duration > 0) {
                if (_isFinite) {
                    this._repeat--;
                }
                if (_yoyo) {
                    this._reversed = !_reversed;
                }
                this.emit(_yoyo && !_reversed ? TweenEvent_1.TweenEvent.reverse : TweenEvent_1.TweenEvent.repeat, object);
                if (_reversed && _reverseDelayTime) {
                    this._startTime = _reverseDelayTime;
                }
                else {
                    this._startTime = _delayTime;
                }
                return true;
            }
            else {
                if (!preserve) {
                    this._isPlaying = false;
                    core_1.remove(this);
                }
                this.emit(TweenEvent_1.TweenEvent.complete, object);
                this._repeat = this._initRepeat;
                return false;
            }
        }
        return true;
    };
    Tween.prototype.release = function () {
        this.object = undefined;
        this.stop();
    };
    Tween.core = { add: core_1.add, get: core_1.get, getAll: core_1.getAll, remove: core_1.remove, removeAll: core_1.removeAll, removeDisplay: core_1.removeDisplay, update: core_1.update };
    Tween.Event = TweenEvent_1.TweenEvent;
    return Tween;
}(PIXI.utils.EventEmitter));
exports.Tween = Tween;


/***/ }),

/***/ "./src/tween/private/Interpolation.ts":
/*!********************************************!*\
  !*** ./src/tween/private/Interpolation.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! ./constants */ "./src/tween/private/constants.ts");
/**
 * 差值计算列表
 * @namespace TWEEN.Interpolation
 * @example
 *
 * let bezier = gui.tween.Interpolation.Bezier
 * new gui.tween.Tween({x:0}).to({x:[0, 4, 8, 12, 15, 20, 30, 40, 20, 40, 10, 50]}, 1000).interpolation(bezier).start()
 * @memberof gui.tween
 */
exports.Interpolation = {
    Linear: function (v, k, value) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = exports.Interpolation.Utils.Linear;
        if (k < 0) {
            return fn(v[0], v[1], f, value);
        }
        if (k > 1) {
            return fn(v[m], v[m - 1], m - f, value);
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i, value);
    },
    Bezier: function (v, k, value) {
        var b = exports.Interpolation.Utils.Reset(value);
        var n = v.length - 1;
        var pw = Math.pow;
        var fn = exports.Interpolation.Utils.Bernstein;
        var isBArray = Array.isArray(b);
        for (var i = 0; i <= n; i++) {
            if (typeof b === 'number') {
                b += pw(1 - k, n - i) * pw(k, i) * v[i] * fn(n, i);
            }
            else if (isBArray) {
                for (var p = 0, len = b.length; p < len; p++) {
                    if (typeof b[p] === 'number') {
                        b[p] += pw(1 - k, n - i) * pw(k, i) * v[i][p] * fn(n, i);
                    }
                    else {
                        b[p] = v[i][p];
                    }
                }
            }
            else if (typeof b === 'object') {
                for (var p in b) {
                    if (typeof b[p] === 'number') {
                        b[p] += pw(1 - k, n - i) * pw(k, i) * v[i][p] * fn(n, i);
                    }
                    else {
                        b[p] = v[i][p];
                    }
                }
            }
            else if (typeof b === 'string') {
                var STRING_BUFFER = '';
                var idx = Math.round(n * k);
                var vCurr = v[idx];
                for (var ks = 1, len = vCurr.length; ks < len; ks++) {
                    STRING_BUFFER += vCurr[ks];
                }
                return STRING_BUFFER;
            }
        }
        return b;
    },
    CatmullRom: function (v, k, value) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = exports.Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
            if (k < 0) {
                i = Math.floor((f = m * (1 + k)));
            }
            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i, value);
        }
        else {
            if (k < 0) {
                return fn(v[1], v[1], v[0], v[0], -k, value);
            }
            if (k > 1) {
                return fn(v[m - 1], v[m - 1], v[m], v[m], (k | 0) - k, value);
            }
            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i, value);
        }
    },
    Utils: {
        Linear: function (p0, p1, t, v) {
            if (p0 === p1 || typeof p0 === 'string') {
                // Quick return for performance reason
                if (p1.length && p1.splice && p1.isString) {
                    p1 = '';
                    for (var i = 0, len = p0.length; i < len; i++) {
                        p1 += p0[i];
                    }
                }
                return p1;
            }
            else if (typeof p0 === 'number') {
                return typeof p0 === 'function' ? p0(t) : p0 + (p1 - p0) * t;
            }
            else if (typeof p0 === 'object') {
                if (p0.length !== undefined) {
                    var isForceStringProp = typeof p0[0] === 'string' || p0.isString;
                    if (isForceStringProp || p0[0] === constants_1.STRING_PROP) {
                        var STRING_BUFFER = '';
                        for (var i = isForceStringProp ? 0 : 1, len = p0.length; i < len; i++) {
                            var currentValue = t === 0 ? p0[i] : t === 1 ? p1[i] : typeof p0[i] === 'number' ? p0[i] + (p1[i] - p0[i]) * t : p1[i];
                            if ((t > 0 && t < 1 && constants_1.isRGBColor(p0, i)) || constants_1.isRGBColor(p0, i, constants_1.RGBA)) {
                                currentValue |= 0;
                            }
                            STRING_BUFFER += currentValue;
                        }
                        return STRING_BUFFER;
                    }
                    else if (v && v.length && v.splice) {
                        for (var p = 0, len = v.length; p < len; p++) {
                            v[p] = exports.Interpolation.Utils.Linear(p0[p], p1[p], t, v[p]);
                        }
                    }
                }
                else {
                    for (var p in v) {
                        v[p] = exports.Interpolation.Utils.Linear(p0[p], p1[p], t, v[p]);
                    }
                }
                return v;
            }
        },
        Reset: function (value) {
            if (Array.isArray(value)) {
                for (var i = 0, len = value.length; i < len; i++) {
                    value[i] = exports.Interpolation.Utils.Reset(value[i]);
                }
                return value;
            }
            else if (typeof value === 'object') {
                for (var i in value) {
                    value[i] = exports.Interpolation.Utils.Reset(value[i]);
                }
                return value;
            }
            else if (typeof value === 'number') {
                return 0;
            }
            return value;
        },
        Bernstein: function (n, i) {
            var fc = exports.Interpolation.Utils.Factorial;
            return fc(n) / fc(i) / fc(n - i);
        },
        Factorial: (function () {
            var a = [1];
            return function (n) {
                var s = 1;
                if (a[n]) {
                    return a[n];
                }
                for (var i = n; i > 1; i--) {
                    s *= i;
                }
                a[n] = s;
                return s;
            };
        })(),
        CatmullRom: function (p0, p1, p2, p3, t, v) {
            if (typeof p0 === 'string') {
                return p1;
            }
            else if (typeof p0 === 'number') {
                var v0 = (p2 - p0) * 0.5;
                var v1 = (p3 - p1) * 0.5;
                var t2 = t * t;
                var t3 = t * t2;
                return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
            }
            else if (typeof p0 === 'object') {
                if (p0.length !== undefined) {
                    if (p0[0] === constants_1.STRING_PROP) {
                        var STRING_BUFFER = '';
                        for (var i = 1, len = p0.length; i < len; i++) {
                            var currentValue = typeof p0[i] === 'number' ? exports.Interpolation.Utils.CatmullRom(p0[i], p1[i], p2[i], p3[i], t) : p3[i];
                            if (constants_1.isRGBColor(p0, i) || constants_1.isRGBColor(p0, i, constants_1.RGBA)) {
                                currentValue |= 0;
                            }
                            STRING_BUFFER += currentValue;
                        }
                        return STRING_BUFFER;
                    }
                    for (var p = 0, len = v.length; p < len; p++) {
                        v[p] = exports.Interpolation.Utils.CatmullRom(p0[p], p1[p], p2[p], p3[p], t, v[p]);
                    }
                }
                else {
                    for (var p in v) {
                        v[p] = exports.Interpolation.Utils.CatmullRom(p0[p], p1[p], p2[p], p3[p], t, v[p]);
                    }
                }
                return v;
            }
        }
    }
};


/***/ }),

/***/ "./src/tween/private/constants.ts":
/*!****************************************!*\
  !*** ./src/tween/private/constants.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = __webpack_require__(/*! ../../utils/Utils */ "./src/utils/Utils.ts");
/**
 * 卡帧后的平滑处理帧率
 */
exports.FRAME_MS = 50 / 3;
/**
 * 平滑处理允许的触发时间
 */
exports.TOO_LONG_FRAME_MS = 250;
/**
 * 链式补间动画的key前缀
 */
exports.CHAINED_TWEENS = '_chainedTweens';
// For String tweening stuffs
exports.STRING_PROP = 'STRING_PROP';
// Also RegExp's for string tweening
exports.NUM_REGEX = /\s+|([A-Za-z?().,{}:""[\]#%]+)|([-+]=+)?([-+]+)?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]=?\d+)?/g;
var isNaNForST = function (v) { return isNaN(+v) || ((v[0] === '+' || v[0] === '-') && v[1] === '=') || v === '' || v === ' '; };
var hexColor = /^#([0-9a-f]{6}|[0-9a-f]{3})$/gi;
var hex2rgbext = function (all) {
    var hex = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        hex[_i - 1] = arguments[_i];
    }
    var rgb = Utils_1.hexToRgb(all);
    return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
};
function decomposeString(fromValue) {
    if (fromValue && fromValue.splice && fromValue.isString) {
        return fromValue;
    }
    if (typeof fromValue !== 'string') {
        return fromValue;
    }
    if (fromValue.charAt(1) === '=') {
        return fromValue;
    }
    var hex = fromValue.replace(hexColor, hex2rgbext).match(exports.NUM_REGEX);
    var value;
    if (hex) {
        value = hex.map(function (v) { return (isNaNForST(v) ? v : +v); });
    }
    value.isString = true;
    return value;
}
exports.decomposeString = decomposeString;
// Decompose value, now for only `string` that required
function decompose(prop, obj, from, to) {
    var fromValue = from[prop];
    var toValue = to[prop];
    if (fromValue === toValue) {
        return true;
    }
    else if (Array.isArray(fromValue) && Array.isArray(toValue) && fromValue.length === toValue.length) {
        for (var i = 0, len = toValue.length; i < len; i++) {
            var a = fromValue[i];
            var b = toValue[i];
            if (a === b || (typeof a === 'number' && typeof b === 'number')) {
                continue;
            }
            else {
                decompose(i, obj[prop], fromValue, toValue);
            }
        }
    }
    if (typeof fromValue === 'number' && typeof toValue === 'number') {
        //
    }
    else if (fromValue && fromValue.splice && fromValue.isString && toValue && toValue.splice && toValue.isString) {
        //
    }
    else if (typeof fromValue === 'string' && Array.isArray(toValue)) {
        var fromValue1 = decomposeString(fromValue);
        var toValues = toValue.map(decomposeString);
        from[prop] = fromValue1;
        to[prop] = toValues;
        return true;
    }
    else if (typeof fromValue === 'string' || typeof toValue === 'string') {
        var fromValue1 = Array.isArray(fromValue) && fromValue[0] === exports.STRING_PROP ? fromValue : decomposeString(fromValue);
        var toValue1 = Array.isArray(toValue) && toValue[0] === exports.STRING_PROP ? toValue : decomposeString(toValue);
        if (fromValue1 === undefined) {
            return;
        }
        var i = 1;
        while (i < fromValue1.length) {
            if (fromValue1[i] === toValue1[i] && typeof fromValue1[i - 1] === 'string') {
                fromValue1.splice(i - 1, 2, fromValue1[i - 1] + fromValue1[i]);
                toValue1.splice(i - 1, 2, toValue1[i - 1] + toValue1[i]);
            }
            else {
                i++;
            }
        }
        i = 0;
        if (fromValue1[0] === exports.STRING_PROP) {
            fromValue1.shift();
        }
        if (toValue1[0] === exports.STRING_PROP) {
            toValue1.shift();
        }
        from[prop] = fromValue1;
        to[prop] = toValue1;
        return true;
    }
    else if (typeof fromValue === 'object' && typeof toValue === 'object') {
        if (Array.isArray(fromValue) && !fromValue.isString) {
            return fromValue.map(function (v, i) { return decompose(i, obj[prop], fromValue, toValue); });
        }
        else {
            for (var prop2 in toValue) {
                decompose(prop2, obj[prop], fromValue, toValue);
            }
        }
        return true;
    }
    return false;
}
exports.decompose = decompose;
// Recompose value
exports.RGB = 'rgb(';
exports.RGBA = 'rgba(';
function isRGBColor(v, i, r) {
    if (r === void 0) { r = exports.RGB; }
    return typeof v[i] === 'number' && (v[i - 1] === r || v[i - 3] === r || v[i - 5] === r);
}
exports.isRGBColor = isRGBColor;
function recompose(prop, obj, from, to, t, originalT, stringBuffer) {
    var fromValue = stringBuffer ? from : from[prop];
    var toValue = stringBuffer ? to : to[prop];
    if (toValue === undefined) {
        return fromValue;
    }
    if (fromValue === undefined || typeof fromValue === 'string' || fromValue === toValue) {
        return toValue;
    }
    else if (typeof fromValue === 'object' && typeof toValue === 'object') {
        if (!fromValue || !toValue) {
            return obj[prop];
        }
        if (typeof fromValue === 'object' &&
            !!fromValue &&
            fromValue.isString &&
            toValue &&
            toValue.splice &&
            toValue.isString) {
            var STRING_BUFFER = '';
            for (var i = 0, len = fromValue.length; i < len; i++) {
                if (fromValue[i] !== toValue[i] || typeof fromValue[i] !== 'number' || typeof toValue[i] === 'number') {
                    var isRelative = typeof fromValue[i] === 'number' && typeof toValue[i] === 'string' && toValue[i][1] === '=';
                    var currentValue = typeof fromValue[i] !== 'number'
                        ? fromValue[i]
                        : isRelative
                            ? fromValue[i] + parseFloat(toValue[i][0] + toValue[i].substr(2)) * t
                            : fromValue[i] + (toValue[i] - fromValue[i]) * t;
                    if (isRGBColor(fromValue, i) || isRGBColor(fromValue, i, exports.RGBA)) {
                        currentValue |= 0;
                    }
                    STRING_BUFFER += currentValue;
                    if (isRelative && originalT === 1) {
                        fromValue[i] = fromValue[i] + parseFloat(toValue[i][0] + toValue[i].substr(2));
                    }
                }
                else {
                    STRING_BUFFER += fromValue[i];
                }
            }
            if (!stringBuffer) {
                obj[prop] = STRING_BUFFER;
            }
            return STRING_BUFFER;
        }
        else if (Array.isArray(fromValue) && fromValue[0] !== exports.STRING_PROP) {
            for (var i = 0, len = fromValue.length; i < len; i++) {
                if (fromValue[i] === toValue[i] || typeof obj[prop] === 'string') {
                    continue;
                }
                recompose(i, obj[prop], fromValue, toValue, t, originalT);
            }
        }
        else if (typeof fromValue === 'object' && !!fromValue && !fromValue.isString) {
            for (var i in fromValue) {
                if (fromValue[i] === toValue[i]) {
                    continue;
                }
                recompose(i, obj[prop], fromValue, toValue, t, originalT);
            }
        }
    }
    else if (typeof fromValue === 'number') {
        var isRelative = typeof toValue === 'string';
        obj[prop] = isRelative
            ? fromValue + parseFloat(toValue[0] + toValue.substr(2)) * t
            : fromValue + (toValue - fromValue) * t;
        if (isRelative && originalT === 1) {
            from[prop] = obj[prop];
        }
    }
    else if (typeof toValue === 'function') {
        obj[prop] = toValue(t);
    }
    return obj[prop];
}
exports.recompose = recompose;
// Dot notation => Object structure converter
// example
// {'scale.x.y.z':'VALUE'} => {scale:{x:{y:{z:'VALUE'}}}}
// Only works for 3-level parsing, after 3-level, parsing dot-notation not works as it's not affects
var propRegExp = /([.[])/g;
var replaceBrace = /\]/g;
var propExtract = function (obj, property) {
    var value = obj[property];
    var props = property.replace(replaceBrace, '').split(propRegExp);
    var propsLastIndex = props.length - 1;
    var lastArr = Array.isArray(obj);
    var lastObj = typeof obj === 'object' && !lastArr;
    if (lastObj) {
        obj[property] = null;
        delete obj[property];
    }
    else if (lastArr) {
        obj.splice(property, 1);
    }
    return props.reduce(function (nested, prop, index) {
        if (lastArr) {
            if (prop !== '.' && prop !== '[') {
                prop *= 1;
            }
        }
        var nextProp = props[index + 1];
        var nextIsArray = nextProp === '[';
        if (prop === '.' || prop === '[') {
            if (prop === '.') {
                lastObj = true;
                lastArr = false;
            }
            else if (prop === '[') {
                lastObj = false;
                lastArr = true;
            }
            return nested;
        }
        else if (nested[prop] === undefined) {
            if (lastArr || lastObj) {
                nested[prop] = index === propsLastIndex ? value : lastArr || nextIsArray ? [] : lastObj ? {} : null;
                lastObj = lastArr = false;
                return nested[prop];
            }
        }
        else if (nested[prop] !== undefined) {
            if (index === propsLastIndex) {
                nested[prop] = value;
            }
            return nested[prop];
        }
        return nested;
    }, obj);
};
exports.SET_NESTED = function (nested) {
    if (typeof nested === 'object' && !!nested) {
        for (var prop in nested) {
            if (prop.indexOf('.') !== -1 || prop.indexOf('[') !== -1) {
                propExtract(nested, prop);
            }
            else if (typeof nested[prop] === 'object' && !!nested[prop]) {
                var nested2 = nested[prop];
                for (var prop2 in nested2) {
                    if (prop2.indexOf('.') !== -1 || prop2.indexOf('[') !== -1) {
                        propExtract(nested2, prop2);
                    }
                    else if (typeof nested2[prop2] === 'object' && !!nested2[prop2]) {
                        var nested3 = nested2[prop2];
                        for (var prop3 in nested3) {
                            if (prop3.indexOf('.') !== -1 || prop3.indexOf('[') !== -1) {
                                propExtract(nested3, prop3);
                            }
                        }
                    }
                }
            }
        }
    }
    return nested;
};


/***/ }),

/***/ "./src/tween/private/core.ts":
/*!***********************************!*\
  !*** ./src/tween/private/core.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 缓动列表
 * @private
 */
var _tweens = [];
/**
 * 是否运行中
 */
var isStarted = false;
/**
 * 空帧标识
 */
var emptyFrame = 0;
/**
 * 空帧后最大间隔帧率
 */
var powerModeThrottle = 120;
/**
 * 是否开启卡针后平滑处理
 */
var handleLag = true;
/**
 * 插件存储器
 * @namespace tween.Plugins
 * @memberof gui.tween
 * @example
 * let num = Plugins.num = function (node, start, end) {
  * return t => start + (end - start) * t
  * }
  *
  * @static
  */
exports.Plugins = {};
/**
 * 添加对象到缓动列表
 * @param {Tween} tween Tween 实例
 * @memberof gui.tween
 * @example
 * let tween = new gui.tween.Tween({x:0})
 * tween.to({x:200}, 1000)
 * gui.tween.add(tween)
 */
function add(tween) {
    var i = _tweens.indexOf(tween);
    if (i > -1) {
        _tweens.splice(i, 1);
    }
    _tweens.push(tween);
    emptyFrame = 0;
    isStarted = true;
}
exports.add = add;
/**
 * 没有缓动后，设置运行多少帧后，停止
 * @param {number} frameCount=120 删除所有动画后，要运行的剩余帧
 * @memberof gui.tween
 * @example
 * gui.tween.FrameThrottle(60)
 */
function FrameThrottle(frameCount) {
    if (frameCount === void 0) { frameCount = 120; }
    powerModeThrottle = frameCount * 1.05;
}
exports.FrameThrottle = FrameThrottle;
/**
 * 延时处理，针对插件、canvas、dom
 * @param {number} state=true 是否平滑处理
 * @memberof gui.tween
 * @example
 * gui.tween.ToggleLagSmoothing(false)
 */
function ToggleLagSmoothing(_state) {
    if (_state === void 0) { _state = true; }
    handleLag = _state;
}
exports.ToggleLagSmoothing = ToggleLagSmoothing;
/**
 * 获得所有缓动对象
 * @memberof gui.tween
 * gui.tween.getAll()
 */
function getAll() {
    return _tweens;
}
exports.getAll = getAll;
/**
 * 移除所有动画对象
 * @example  gui.tween.removeAll()
 * @memberof gui.tween
 */
function removeAll() {
    _tweens.length = 0;
    isStarted = false;
}
exports.removeAll = removeAll;
/**
 * 获取对象
 * @param {Tween} tween 缓动对象实例
 * @return {Tween} 返回对象或null
 * @memberof gui.tween
 * @example
 * gui.tween.get(tween)
 */
function get(tween) {
    for (var i = 0; i < _tweens.length; i++) {
        if (tween === _tweens[i]) {
            return _tweens[i];
        }
    }
    return null;
}
exports.get = get;
function removeDisplay(uuid) {
    for (var i = 0; i < _tweens.length; i++) {
        if (_tweens[i].object.uuid && uuid === _tweens[i].object.uuid) {
            _tweens[i].stop();
            remove(_tweens[i]);
            return;
        }
    }
    return;
}
exports.removeDisplay = removeDisplay;
/**
 * 从缓动列表移除对象
 * @param {Tween} tween Tween instance
 * @memberof gui.tween
 * @example
 * gui.tween.remove(tween)
 */
function remove(tween) {
    var i = _tweens.indexOf(tween);
    if (i !== -1) {
        _tweens.splice(i, 1);
    }
    if (_tweens.length === 0) {
        isStarted = false;
    }
}
exports.remove = remove;
/**
 * 按给定时间更新缓动
 * @param {number=} time 时间戳
 * @param {Boolean=} preserve 完成后，防止删除动画对象
 * @memberof gui.tween
 * @example
 * gui.tween.update(500)
 */
function update(time, preserve) {
    if (preserve === void 0) { preserve = false; }
    if (!isStarted) {
        return false;
    }
    if (emptyFrame >= powerModeThrottle && handleLag) {
        console.log("mptyFrame >= powerModeThrottle && handleLag");
        isStarted = false;
        emptyFrame = 0;
        return false;
    }
    if (!_tweens.length) {
        emptyFrame++;
    }
    var i = 0;
    var length = _tweens.length;
    while (i < length) {
        _tweens[i++].update(time, preserve);
        if (length > _tweens.length) {
            // The tween has been removed, keep same index
            i--;
        }
        length = _tweens.length;
    }
    return true;
}
exports.update = update;
/**
 * 是否正在运行中
 * @return {Boolean} 只要还有缓动在运行，返回true
 * @memberof gui.tween
 * @example gui.tween.isRunning()
 */
function isRunning() {
    return isStarted;
}
exports.isRunning = isRunning;
/**
 * 返回是否开启延迟平滑状态
 * @return {Boolean}
 * @memberof gui.tween
 * @example gui.tween.isRunning()
 */
function isLagSmoothing() {
    return handleLag;
}
exports.isLagSmoothing = isLagSmoothing;


/***/ }),

/***/ "./src/tween/private/index.ts":
/*!************************************!*\
  !*** ./src/tween/private/index.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! ./core */ "./src/tween/private/core.ts");
exports.add = core_1.add;
exports.get = core_1.get;
exports.getAll = core_1.getAll;
exports.isRunning = core_1.isRunning;
exports.FrameThrottle = core_1.FrameThrottle;
exports.ToggleLagSmoothing = core_1.ToggleLagSmoothing;
exports.Plugins = core_1.Plugins;
exports.remove = core_1.remove;
exports.removeAll = core_1.removeAll;
exports.removeDisplay = core_1.removeDisplay;
exports.update = core_1.update;
var Interpolation_1 = __webpack_require__(/*! ./Interpolation */ "./src/tween/private/Interpolation.ts");
exports.Interpolation = Interpolation_1.Interpolation;
var utils = __webpack_require__(/*! ./constants */ "./src/tween/private/constants.ts");
exports.utils = utils;
var TweenEvent_1 = __webpack_require__(/*! ../../event/TweenEvent */ "./src/event/TweenEvent.ts");
exports.TweenEvent = TweenEvent_1.TweenEvent;
var Timeline_1 = __webpack_require__(/*! ../Timeline */ "./src/tween/Timeline.ts");
exports.Timeline = Timeline_1.Timeline;


/***/ }),

/***/ "./src/utils/ObjectPool.ts":
/*!*********************************!*\
  !*** ./src/utils/ObjectPool.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/** 对象池*/
var ObjectPool = /** @class */ (function () {
    function ObjectPool() {
        /**
         * 作为对象池的词典dict
         */
        this.objPoolDict = new Map();
    }
    /**
     * 向对象池中放入对象，以便重复利用
     */
    ObjectPool.prototype.push = function (keyClass, oldObj) {
        if (oldObj === undefined) {
            return;
        }
        var objs = this.objPoolDict.get(keyClass);
        if (objs === undefined) {
            objs = [];
            this.objPoolDict.set(keyClass, objs);
        }
        if (objs.indexOf(oldObj) === -1) {
            oldObj.release();
            objs.push(oldObj);
        }
    };
    /**
     * 从对象池中取出需要的对象
     * @return 取出的相应对象
     *
     */
    ObjectPool.prototype.pop = function (keyClass) {
        var objs = this.objPoolDict.get(keyClass);
        if (objs !== undefined && objs.length > 0) {
            return objs.pop();
        }
        return new keyClass();
    };
    return ObjectPool;
}());
/**
 * 对象池实例
 */
exports.objectPoolShared = new ObjectPool();


/***/ }),

/***/ "./src/utils/Utils.ts":
/*!****************************!*\
  !*** ./src/utils/Utils.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Stage_1 = __webpack_require__(/*! ../core/Stage */ "./src/core/Stage.ts");
/**
 * 工具类
 */
/** 日志输出 */
function log(message) {
    var optionalParams = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        optionalParams[_i - 1] = arguments[_i];
    }
    console.log.apply(console, [message].concat(optionalParams));
}
exports.log = log;
function setSourcePath(params) {
    exports.$getSourcePath = params;
}
exports.setSourcePath = setSourcePath;
function setDisplayObjectPath(params) {
    exports.$getUIDisplayObjectPath = params;
}
exports.setDisplayObjectPath = setDisplayObjectPath;
function getTexture(src) {
    if (exports.$getSourcePath) {
        src = exports.$getSourcePath(src);
    }
    if (src instanceof PIXI.Texture) {
        return src;
    }
    if (src == null) {
        src = undefined;
        return src;
    }
    if (src == null) {
        src = undefined;
        return src;
    }
    return PIXI.Texture.from(src);
}
exports.getTexture = getTexture;
function getSheet(src) {
    if (exports.$getSourcePath) {
        src = exports.$getSourcePath(src);
    }
    return src;
}
exports.getSheet = getSheet;
function getSound(src) {
    if (exports.$getSourcePath) {
        src = exports.$getSourcePath(src);
    }
    if (src instanceof PIXI.sound.Sound) {
        return src;
    }
    return PIXI.sound.Sound.from(src);
}
exports.getSound = getSound;
function getDisplayObject(src, target) {
    if (exports.$getUIDisplayObjectPath) {
        src = exports.$getUIDisplayObjectPath(src, target);
    }
    return src;
}
exports.getDisplayObject = getDisplayObject;
/**
 * 递归获取舞台，组件必须已经添加到舞台
 * @param DisplayObject
 */
function getStage(target) {
    if (target.$stage) {
        return target.$stage;
    }
    if (target.parent instanceof Stage_1.Stage) {
        return target.parent;
    }
    if (target.parent) {
        return getStage(target.parent);
    }
    return undefined;
}
exports.getStage = getStage;
/**
 * 快速设置矩形
 * @param sourcr
 * @param x
 * @param y
 * @param w
 * @param h
 */
function setRectangle(source, x, y, w, h) {
    source.x = x;
    source.y = y;
    source.width = w;
    source.height = h;
}
exports.setRectangle = setRectangle;
/** 获取当前运行时时间 */
function now() {
    if (performance !== undefined && performance.now !== undefined) {
        // This must be bound, because directly assigning this function
        // leads to an invocation exception in Chrome.
        return performance.now.bind(performance)();
        // Use Date.now if it is available.
    }
    else {
        var offset = performance && performance.timing && performance.timing.navigationStart ? performance.timing.navigationStart : Date.now();
        return Date.now() - offset;
    }
}
exports.now = now;
/**
 * 深度拷贝对象
 * @param source 对象元
 */
function deepCopy(source, target) {
    if (source === undefined || typeof source !== 'object') {
        return source;
    }
    else if (Array.isArray(source)) {
        return [].concat(source);
    }
    else if (typeof source === 'object') {
        var tempTarget = target || {};
        for (var prop in source) {
            tempTarget[prop] = deepCopy(source[prop], tempTarget[prop]);
        }
        return tempTarget;
    }
    return source;
}
exports.deepCopy = deepCopy;
/**
 * helper function to convert string hex to int or default
 *
 * 16进制转int，颜色转换
 * @param str 要转换的值，如#FFFFFF,0xFFFFFF
 * @param def 转换失败的返回值
 */
function hexToInt(str, def) {
    if (typeof str === 'number')
        return str;
    var result = parseInt(str.replace('#', '0x'));
    if (isNaN(result))
        return def;
    return result;
}
exports.hexToInt = hexToInt;
//helper function to convert hex to rgba
/**
 *
 * @param hex 16进制字符窜 如 #FFFFFF ，不能省略三位写法
 * @param alpha 透明度
 * @returns "rgba(255,255,255,1)" || false
 */
function hexToRgba(hex, alpha) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? "rgba(" + parseInt(result[1], 16) + "," + parseInt(result[2], 16) + "," + parseInt(result[3], 16) + "," + alpha + ")" : false;
}
exports.hexToRgba = hexToRgba;
/**
 * 转换为16位字符串，不够2位的补0，如 “01”
 * @param c 要转换的数字
 */
function componentToHex(c) {
    var hex = c.toString(16);
    if (hex.length == 4) {
        return "00" + hex;
    }
    return hex.length == 1 ? "0" + hex : hex;
}
exports.componentToHex = componentToHex;
/**
 * RGB转16进制
 * @param r 红 0-255
 * @param g 绿 0-255
 * @param b 蓝 0-255
 */
function rgbToHex(r, g, b) {
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
exports.rgbToHex = rgbToHex;
/**
 * RGB转number
 * @param r 红 0-255
 * @param g 绿 0-255
 * @param b 蓝 0-255
 */
function rgbToNumber(r, g, b) {
    return r * 65536 + g * 256 + b;
}
exports.rgbToNumber = rgbToNumber;
/**
 * rgb字符串形式转换
 * @param color rgb(255,255,255)
 */
function rgbStrToNumber(color) {
    var colors = color.substring(4, color.length - 1).split(",");
    return rgbToNumber(parseInt(colors[0]), parseInt(colors[1]), parseInt(colors[2]));
}
exports.rgbStrToNumber = rgbStrToNumber;
/**
 * 10进制转RGB
 * @param c 数
 */
function numberToRgb(c) {
    return {
        r: Math.floor(c / (256 * 256)),
        g: Math.floor(c / 256) % 256,
        b: c % 256,
    };
}
exports.numberToRgb = numberToRgb;
/**
 * hex 转 RGB，
 *
 * 如hex字符串: "#ffffff"->255,255,255
 *
 * 如16进制数字: 0xffffff->255,255,255
 * @param hex
 */
function hexToRgb(hex) {
    if (hex === undefined)
        hex = 0xffffff;
    if (typeof (hex) == "number") {
        return numberToRgb(hex);
    }
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : { r: 255, g: 255, b: 255 };
}
exports.hexToRgb = hexToRgb;
/**
 * 根据amt计算当前的位置start-stop，两数差值
 * @param start 开始数值
 * @param stop  结束的数值
 * @param amt 0-1 用时 >1为1，小于0为0
 */
function Lerp(start, stop, amt) {
    if (amt > 1)
        amt = 1;
    else if (amt < 0)
        amt = 0;
    return start + (stop - start) * amt;
}
exports.Lerp = Lerp;
/**
 * 四舍五入保留指定位数的小数
 * @param num 取舍的数
 * @param decimals 保留小数位
 */
function Round(num, decimals) {
    var pow = Math.pow(10, decimals);
    return Math.round(num * pow) / pow;
}
exports.Round = Round;
/** 获取全局唯一数 */
function uid() {
    return PIXI.utils.uid();
}
exports.uid = uid;
/** 获取URL参数 */
function getQueryVariable(variable) {
    var params = new URLSearchParams(location.search);
    if (params.has(variable)) {
        return params.get(variable);
    }
    return undefined;
}
exports.getQueryVariable = getQueryVariable;
/**
 * 解析一个字符串函数的参数，如xxx(1) = 1
 * @param
 */
function getStringFunctionParam(str) {
    var target = {};
    target.key = str.substr(0, str.indexOf("("));
    var value = str.substr(str.indexOf("(") + 1);
    target.value = parseFloat(value.substr(0, value.lastIndexOf(")")));
    return target;
}
exports.getStringFunctionParam = getStringFunctionParam;
function isDeltaIdentity(m) {
    return (m.a === 1 && m.b === 0 && m.c === 0 && m.d === 1);
}
exports.isDeltaIdentity = isDeltaIdentity;
/**
 * 格式化一个百分比为小数
 * @param value
 * @param total
 */
function formatRelative(value, total) {
    if (value == undefined) {
        return NaN;
    }
    if (typeof value === "number") {
        return value;
    }
    var str = value;
    var index = str.indexOf("%");
    if (index == -1) {
        return +str;
    }
    var percent = +str.substring(0, index);
    return percent * 0.01 * total;
}
exports.formatRelative = formatRelative;
/** 计算两点距离 */
function pointDistance(pointA, pointB) {
    return Math.sqrt((pointA.x - pointB.x) * (pointA.x - pointB.x) + (pointA.y - pointB.y) * (pointA.y - pointB.y));
}
exports.pointDistance = pointDistance;
/** 坐标相减 */
function pointSub(source, subPoint) {
    var x = source.x - subPoint.x;
    var y = source.y - subPoint.y;
    return { x: x, y: y };
}
exports.pointSub = pointSub;
/** 坐标相加 */
function pointPlus(source, PlusPoint) {
    var x = source.x + PlusPoint.x;
    var y = source.y + PlusPoint.y;
    return { x: x, y: y };
}
exports.pointPlus = pointPlus;
/** 向量转弧度 */
function pointSignAngle(pointA, pointB) {
    var num1 = (pointA.x * pointB.y) - (pointB.x * pointA.y);
    var num2 = (pointA.x * pointB.x) + (pointA.y * pointB.y);
    return Math.atan2(num1, num2) * (360 / (Math.PI * 2));
}
exports.pointSignAngle = pointSignAngle;


/***/ }),

/***/ "./src/vf-gui.ts":
/*!***********************!*\
  !*** ./src/vf-gui.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var vfgui = __webpack_require__(/*! ./UI */ "./src/UI.ts");
// //注入常规兼容方法
// if(!Array.from){
//     Array.from = function (el: unknown[]) {
//         return Array.apply(this, el);
//     }
// }
// String.prototype.startsWith || (String.prototype.startsWith = function(word,pos?: number) {
//     return this.lastIndexOf(word, pos1.1.6.1.1.6.1.1.6) ==1.1.6.1.1.6.1.1.6;
// });
window.gui = vfgui;
window.gui.version = "1.1.6";
exports.default = vfgui;
// declare namespace gui{
//     export * from "src/UI";
// }


/***/ })

/******/ });
//# sourceMappingURL=vf-gui.js.map